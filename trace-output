[marking 0x229d1e5bd1c9 <JSFunction normalizeStringPosix (sfi = 0x229d18def9f9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 46/67 (68%), generic ICs: 0/67 (0%)]
[compiling method 0x229d1e5bd1c9 <JSFunction normalizeStringPosix (sfi = 0x229d18def9f9)> using TurboFan]
[optimizing 0x229d1e5bd1c9 <JSFunction normalizeStringPosix (sfi = 0x229d18def9f9)> - took 1.252, 1.499, 0.015 ms]
[completed optimizing 0x229d1e5bd1c9 <JSFunction normalizeStringPosix (sfi = 0x229d18def9f9)>]
[marking 0x229d4febda29 <JSFunction Module._nodeModulePaths (sfi = 0x229d18dcfaa9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 23/23 (100%), generic ICs: 0/23 (0%)]
[compiling method 0x229d4febda29 <JSFunction Module._nodeModulePaths (sfi = 0x229d18dcfaa9)> using TurboFan]
Candidates for inlining (size=1):
  #32:JSCall, frequency: 1
  - size:137, name: resolve
Inlining resolve into Module._nodeModulePaths
Candidates for inlining (size=1):
  #340:JSCall, frequency: 1.61715
  - size:16, name: assertPath
Inlining assertPath into Module._nodeModulePaths
[optimizing 0x229d4febda29 <JSFunction Module._nodeModulePaths (sfi = 0x229d18dcfaa9)> - took 1.132, 2.231, 0.031 ms]
[completed optimizing 0x229d4febda29 <JSFunction Module._nodeModulePaths (sfi = 0x229d18dcfaa9)>]
[marking 0x229d3a698469 <JSFunction set (sfi = 0x229df9115459)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 29/29 (100%), generic ICs: 1/29 (3%)]
[compiling method 0x229d3a698469 <JSFunction set (sfi = 0x229df9115459)> using TurboFan]
Inlining GetHash into set
Inlining GetExistingHash into set
Inlining ComputeIntegerHash into set
Inlining MapFindEntry into set
Inlining HashToEntry into set
[optimizing 0x229d3a698469 <JSFunction set (sfi = 0x229df9115459)> - took 0.415, 1.891, 0.033 ms]
[completed optimizing 0x229d3a698469 <JSFunction set (sfi = 0x229df9115459)>]
[marking 0x229d4feb23f9 <JSFunction nextTick (sfi = 0x229d18daaeb9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 33/43 (76%), generic ICs: 0/43 (0%)]
[compiling method 0x229d4feb23f9 <JSFunction nextTick (sfi = 0x229d18daaeb9)> using TurboFan]
Candidates for inlining (size=3):
  #259:JSCall, frequency: 1
  - size:42, name: push
  #247:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #232:JSCall, frequency: 1
  - size:27, name: initTriggerId
Inlining push into nextTick
Candidates for inlining (size=2):
  #247:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #232:JSCall, frequency: 1
  - size:27, name: initTriggerId
Inlining TickObject into nextTick
Candidates for inlining (size=1):
  #232:JSCall, frequency: 1
  - size:27, name: initTriggerId
Inlining initTriggerId into nextTick
[optimizing 0x229d4feb23f9 <JSFunction nextTick (sfi = 0x229d18daaeb9)> - took 2.115, 1.997, 0.082 ms]
[completed optimizing 0x229d4feb23f9 <JSFunction nextTick (sfi = 0x229d18daaeb9)>]
[marking 0x229de80103f1 <JSFunction specify (sfi = 0x229d3a3fff21)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 31/36 (86%), generic ICs: 0/36 (0%)]
[compiling method 0x229de80103f1 <JSFunction specify (sfi = 0x229d3a3fff21)> using TurboFan]
Candidates for inlining (size=1):
  #19:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into specify
[marking 0x229d09319be9 <JSFunction checkInvalidHeaderChar (sfi = 0x229d269d73a9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 27/27 (100%), generic ICs: 1/27 (3%)]
[optimizing 0x229de80103f1 <JSFunction specify (sfi = 0x229d3a3fff21)> - took 0.743, 1.878, 0.028 ms]
[completed optimizing 0x229de80103f1 <JSFunction specify (sfi = 0x229d3a3fff21)>]
[compiling method 0x229d09319be9 <JSFunction checkInvalidHeaderChar (sfi = 0x229d269d73a9)> using TurboFan]
[optimizing 0x229d09319be9 <JSFunction checkInvalidHeaderChar (sfi = 0x229d269d73a9)> - took 0.220, 0.866, 0.010 ms]
[completed optimizing 0x229d09319be9 <JSFunction checkInvalidHeaderChar (sfi = 0x229d269d73a9)>]
[marking 0x229d4feb24e9 <JSFunction _tickDomainCallback (sfi = 0x229d18daadf1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 26/33 (78%), generic ICs: 3/33 (9%)]
[compiling method 0x229d4feb24e9 <JSFunction _tickDomainCallback (sfi = 0x229d18daadf1)> using TurboFan]
Candidates for inlining (size=6):
  #276:JSCall, frequency: 4.83391
  - size:19, name: emitAfterScript
  #247:JSCall, frequency: 4.83391
  - size:65, name: _combinedTickCallback
  #188:JSCall, frequency: 4.83391
  - size:25, name: emitBeforeScript
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining emitAfterScript into _tickDomainCallback
Candidates for inlining (size=6):
  #511:JSCall, frequency: 4.83391
  - size:30, name: validateAsyncId
  #247:JSCall, frequency: 4.83391
  - size:65, name: _combinedTickCallback
  #188:JSCall, frequency: 4.83391
  - size:25, name: emitBeforeScript
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining validateAsyncId into _tickDomainCallback
Candidates for inlining (size=5):
  #247:JSCall, frequency: 4.83391
  - size:65, name: _combinedTickCallback
  #188:JSCall, frequency: 4.83391
  - size:25, name: emitBeforeScript
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining _combinedTickCallback into _tickDomainCallback
Candidates for inlining (size=4):
  #188:JSCall, frequency: 4.83391
  - size:25, name: emitBeforeScript
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining emitBeforeScript into _tickDomainCallback
Candidates for inlining (size=5):
  #798:JSCall, frequency: 4.83391
  - size:30, name: validateAsyncId
  #790:JSCall, frequency: 4.83391
  - size:30, name: validateAsyncId
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining validateAsyncId into _tickDomainCallback
Candidates for inlining (size=4):
  #790:JSCall, frequency: 4.83391
  - size:30, name: validateAsyncId
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining validateAsyncId into _tickDomainCallback
Candidates for inlining (size=3):
  #122:JSCall, frequency: 4.83391
  - size:52, name: shift
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining shift into _tickDomainCallback
Candidates for inlining (size=2):
  #344:JSCall, frequency: 1
  - size:83, name: emitPendingUnhandledRejections
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining emitPendingUnhandledRejections into _tickDomainCallback
Candidates for inlining (size=1):
  #324:JSCall, frequency: 1
  - size:43, name: tickDone
Inlining tickDone into _tickDomainCallback
Candidates for inlining (size=1):
  #1225:JSCall, frequency: 1
  - size:18, name: clear
Inlining clear into _tickDomainCallback
[optimizing 0x229d4feb24e9 <JSFunction _tickDomainCallback (sfi = 0x229d18daadf1)> - took 8.160, 2.402, 0.056 ms]
[completed optimizing 0x229d4feb24e9 <JSFunction _tickDomainCallback (sfi = 0x229d18daadf1)>]
[marking 0x229d0931a189 <JSFunction checkIsHttpToken (sfi = 0x229d269d72e1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 24/24 (100%), generic ICs: 0/24 (0%)]
[compiling method 0x229d0931a189 <JSFunction checkIsHttpToken (sfi = 0x229d269d72e1)> using TurboFan]
[optimizing 0x229d0931a189 <JSFunction checkIsHttpToken (sfi = 0x229d269d72e1)> - took 0.226, 0.917, 0.017 ms]
[completed optimizing 0x229d0931a189 <JSFunction checkIsHttpToken (sfi = 0x229d269d72e1)>]
[marking 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:230, name: _addListener
Inlining _addListener into addListener
Candidates for inlining (size=1):
  #211:JSCall, frequency: 0.178244
  - size:14, name: $getMaxListeners
Inlining $getMaxListeners into addListener
Inlining small function(s) at call site #303:JSCall
Inlining get into addListener
[optimizing 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)> - took 1.014, 1.163, 0.025 ms]
[completed optimizing 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>]
[marking 0x229d0a421c31 <JSFunction once (sfi = 0x229d08f54099)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d0a421c31 <JSFunction once (sfi = 0x229d08f54099)> using TurboFan]
[optimizing 0x229d0a421c31 <JSFunction once (sfi = 0x229d08f54099)> - took 0.068, 0.338, 0.032 ms]
[completed optimizing 0x229d0a421c31 <JSFunction once (sfi = 0x229d08f54099)>]
[marking 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> for optimized recompilation, reason: small function, ICs with typeinfo: 9/9 (100%), generic ICs: 0/9 (0%)]
[compiling method 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> using TurboFan]
Candidates for inlining (size=1):
  #37:JSCall, frequency: 0.998881
  - size:42, name: remove
Inlining remove into append
[optimizing 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> - took 0.545, 1.122, 0.082 ms]
[completed optimizing 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)>]
[marking 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/54 (46%), generic ICs: 3/54 (5%)]
[compiling method 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)> using TurboFan]
[optimizing 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)> - took 0.230, 1.431, 0.032 ms]
[completed optimizing 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)>]
[marking 0x229d4fe92971 <JSFunction TickObject (sfi = 0x229d18dab049)> for optimized recompilation, reason: small function, ICs with typeinfo: 7/7 (100%), generic ICs: 2/7 (28%)]
[compiling method 0x229d4fe92971 <JSFunction TickObject (sfi = 0x229d18dab049)> using TurboFan]
[optimizing 0x229d4fe92971 <JSFunction TickObject (sfi = 0x229d18dab049)> - took 0.146, 0.491, 0.078 ms]
[completed optimizing 0x229d4fe92971 <JSFunction TickObject (sfi = 0x229d18dab049)>]
[marking 0x229de80103a9 <JSFunction getMediaTypePriority (sfi = 0x229d3a3ffe59)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229de80103a9 <JSFunction getMediaTypePriority (sfi = 0x229d3a3ffe59)> using TurboFan]
Candidates for inlining (size=1):
  #65:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getMediaTypePriority
Candidates for inlining (size=1):
  #171:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getMediaTypePriority
[optimizing 0x229de80103a9 <JSFunction getMediaTypePriority (sfi = 0x229d3a3ffe59)> - took 1.968, 2.946, 0.069 ms]
[completed optimizing 0x229de80103a9 <JSFunction getMediaTypePriority (sfi = 0x229d3a3ffe59)>]
[marking 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> for optimized recompilation, reason: small function, ICs with typeinfo: 10/10 (100%), generic ICs: 0/10 (0%)]
[compiling method 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> using TurboFan]
[optimizing 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> - took 0.119, 0.444, 0.009 ms]
[completed optimizing 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)>]
[marking 0x229de8058f61 <JSFunction isQuality (sfi = 0x229d1ac02459)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229de8058f61 <JSFunction isQuality (sfi = 0x229d1ac02459)> using TurboFan]
[optimizing 0x229de8058f61 <JSFunction isQuality (sfi = 0x229d1ac02459)> - took 0.038, 0.154, 0.004 ms]
[completed optimizing 0x229de8058f61 <JSFunction isQuality (sfi = 0x229d1ac02459)>]
[marking 0x229d0a45b601 <JSFunction wrapper (sfi = 0x229d08f54b81)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 18/20 (90%), generic ICs: 0/20 (0%)]
[compiling method 0x229d0a45b601 <JSFunction wrapper (sfi = 0x229d08f54b81)> using TurboFan]
[optimizing 0x229d0a45b601 <JSFunction wrapper (sfi = 0x229d08f54b81)> - took 0.207, 0.956, 0.053 ms]
[completed optimizing 0x229d0a45b601 <JSFunction wrapper (sfi = 0x229d08f54b81)>]
[marking 0x229d93547b91 <JSFunction getType (sfi = 0x229d1ac02fc1)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d93547b91 <JSFunction getType (sfi = 0x229d1ac02fc1)> using TurboFan]
[optimizing 0x229d93547b91 <JSFunction getType (sfi = 0x229d1ac02fc1)> - took 0.079, 0.310, 0.010 ms]
[completed optimizing 0x229d93547b91 <JSFunction getType (sfi = 0x229d1ac02fc1)>]
[marking 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 41/67 (61%), generic ICs: 0/67 (0%)]
[compiling method 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)> using TurboFan]
Candidates for inlining (size=5):
  #82:JSCall, frequency: 1
  - size:90, name: howMuchToRead
  #28:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #113:JSCall, frequency: 0.823685
  - size:40, name: endReadable
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining howMuchToRead into Readable.read
Candidates for inlining (size=4):
  #28:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #113:JSCall, frequency: 0.823685
  - size:40, name: endReadable
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into Readable.read
Candidates for inlining (size=3):
  #113:JSCall, frequency: 0.823685
  - size:40, name: endReadable
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining endReadable into Readable.read
Candidates for inlining (size=3):
  #627:JSCall, frequency: 0.823685
  - size:167, name: nextTick
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining nextTick into Readable.read
Candidates for inlining (size=5):
  #907:JSCall, frequency: 0.823685
  - size:42, name: push
  #895:JSConstruct, frequency: 0.823685
  - size:34, name: TickObject
  #880:JSCall, frequency: 0.823685
  - size:27, name: initTriggerId
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining push into Readable.read
Candidates for inlining (size=4):
  #895:JSConstruct, frequency: 0.823685
  - size:34, name: TickObject
  #880:JSCall, frequency: 0.823685
  - size:27, name: initTriggerId
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining TickObject into Readable.read
Candidates for inlining (size=3):
  #880:JSCall, frequency: 0.823685
  - size:27, name: initTriggerId
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining initTriggerId into Readable.read
Candidates for inlining (size=2):
  #165:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into Readable.read
Candidates for inlining (size=1):
  #137:JSCall, frequency: 0.176315
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into Readable.read
[marking 0x229dfd2cbcf1 <JSFunction getPriority (sfi = 0x229d1ac02ef9)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229dfd2d2221 <JSFunction getPriority (sfi = 0x229d1ac02ef9)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)> - took 7.124, 3.599, 0.037 ms]
[completed optimizing 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)>]
[optimizing 0x229dfd2d2221 <JSFunction getPriority (sfi = 0x229d1ac02ef9)> - took 1.581, 2.793, 0.041 ms]
[completed optimizing 0x229dfd2d2221 <JSFunction getPriority (sfi = 0x229d1ac02ef9)>]
[marking 0x229ddc38c101 <JSFunction pushValueToArray (sfi = 0x229d3a6be0b1)> for optimized recompilation, reason: small function, ICs with typeinfo: 6/6 (100%), generic ICs: 0/6 (0%)]
[compiling method 0x229ddc38c101 <JSFunction pushValueToArray (sfi = 0x229d3a6be0b1)> using TurboFan]
[optimizing 0x229ddc38c101 <JSFunction pushValueToArray (sfi = 0x229d3a6be0b1)> - took 0.102, 0.653, 0.035 ms]
[completed optimizing 0x229ddc38c101 <JSFunction pushValueToArray (sfi = 0x229d3a6be0b1)>]
[marking 0x229d575a8ea1 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d575b05e1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #386:JSCall, frequency: 0.5
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.5
  - size:216, name: removeListener
  #289:JSCall, frequency: 0.5
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.5
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.5
  - size:157, name: 
  #150:JSCall, frequency: 0.5
  - size:12, name: _reqClosed
  #117:JSCall, frequency: 0.5
  - size:85, name: endHandlerTimer
Inlining removeListener into next
Candidates for inlining (size=6):
  #373:JSCall, frequency: 0.5
  - size:216, name: removeListener
  #289:JSCall, frequency: 0.5
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.5
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.5
  - size:157, name: 
  #150:JSCall, frequency: 0.5
  - size:12, name: _reqClosed
  #117:JSCall, frequency: 0.5
  - size:85, name: endHandlerTimer
Inlining removeListener into next
Candidates for inlining (size=5):
  #289:JSCall, frequency: 0.5
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.5
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.5
  - size:157, name: 
  #150:JSCall, frequency: 0.5
  - size:12, name: _reqClosed
  #117:JSCall, frequency: 0.5
  - size:85, name: endHandlerTimer
[marking 0x229d6d15cf99 <JSFunction __send (sfi = 0x229d6d15b201)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 61/112 (54%), generic ICs: 6/112 (5%)]
[compiling method 0x229d6d15cf99 <JSFunction __send (sfi = 0x229d6d15b201)> using TurboFan]
Inlining small function(s) at call site #198:JSCall
Inlining out into __send
Candidates for inlining (size=6):
  #625:JSCall, frequency: 1
  - size:27, name: formatJSON
  #611:JSCall, frequency: 1
  - size:92, name: setHeader
  #483:JSCall, frequency: 1
  - size:35, name: accepts
  #441:JSCall, frequency: 1
  - size:35, name: accepts
  #407:JSCall, frequency: 1
  - size:46, name: getHeader
  #308:JSCall, frequency: 1
  - size:157, name: 
Inlining formatJSON into __send
Candidates for inlining (size=6):
  #950:JSCall, frequency: 1
  - size:92, name: setHeader
  #611:JSCall, frequency: 1
  - size:92, name: setHeader
  #483:JSCall, frequency: 1
  - size:35, name: accepts
  #441:JSCall, frequency: 1
  - size:35, name: accepts
  #407:JSCall, frequency: 1
  - size:46, name: getHeader
  #308:JSCall, frequency: 1
  - size:157, name: 
Inlining setHeader into __send
Candidates for inlining (size=6):
  #975:JSCall, frequency: 1
  - size:61, name: validateHeader
  #611:JSCall, frequency: 1
  - size:92, name: setHeader
  #483:JSCall, frequency: 1
  - size:35, name: accepts
  #441:JSCall, frequency: 1
  - size:35, name: accepts
  #407:JSCall, frequency: 1
  - size:46, name: getHeader
  #308:JSCall, frequency: 1
  - size:157, name: 
Inlining validateHeader into __send
Candidates for inlining (size=7):
  #1266:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
  #1175:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #611:JSCall, frequency: 1
  - size:92, name: setHeader
  #483:JSCall, frequency: 1
  - size:35, name: accepts
  #441:JSCall, frequency: 1
  - size:35, name: accepts
  #407:JSCall, frequency: 1
  - size:46, name: getHeader
  #308:JSCall, frequency: 1
  - size:157, name: 
Inlining checkInvalidHeaderChar into __send
Candidates for inlining (size=6):
  #1175:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #611:JSCall, frequency: 1
  - size:92, name: setHeader
  #483:JSCall, frequency: 1
  - size:35, name: accepts
  #441:JSCall, frequency: 1
  - size:35, name: accepts
  #407:JSCall, frequency: 1
  - size:46, name: getHeader
  #308:JSCall, frequency: 1
  - size:157, name: 
Inlining checkIsHttpToken into __send
Candidates for inlining (size=5):
  #611:JSCall, frequency: 1
  - size:92, name: setHeader
  #483:JSCall, frequency: 1
  - size:35, name: accepts
  #441:JSCall, frequency: 1
  - size:35, name: accepts
  #407:JSCall, frequency: 1
  - size:46, name: getHeader
  #308:JSCall, frequency: 1
  - size:157, name: 
[optimizing 0x229d575b05e1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 4.043, 6.350, 0.082 ms]
[completed optimizing 0x229d575b05e1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[optimizing 0x229d6d15cf99 <JSFunction __send (sfi = 0x229d6d15b201)> - took 7.825, 6.527, 0.086 ms]
[completed optimizing 0x229d6d15cf99 <JSFunction __send (sfi = 0x229d6d15b201)>]
[marking 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)> using TurboFan]
Candidates for inlining (size=1):
  #16:JSCall, frequency: 1
  - size:134, name: insert
Inlining insert into exports._unrefActive
Inlining small function(s) at call site #356:JSCall
Inlining isEmpty into exports._unrefActive
Candidates for inlining (size=2):
  #364:JSCall, frequency: 1
  - size:11, name: ok
  #328:JSCall, frequency: 1
  - size:41, name: append
Inlining ok into exports._unrefActive
Candidates for inlining (size=1):
  #328:JSCall, frequency: 1
  - size:41, name: append
Inlining append into exports._unrefActive
Candidates for inlining (size=1):
  #538:JSCall, frequency: 0.998895
  - size:42, name: remove
Inlining remove into exports._unrefActive
[optimizing 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)> - took 2.094, 2.016, 0.100 ms]
[completed optimizing 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)>]
[marking 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/14 (71%), generic ICs: 0/14 (0%)]
[compiling method 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)> using TurboFan]
Candidates for inlining (size=3):
  #96:JSCall, frequency: 1
  - size:167, name: nextTick
  #48:JSCall, frequency: 1
  - size:26, name: needFinish
  #31:JSCall, frequency: 1
  - size:33, name: onwriteStateUpdate
Inlining nextTick into onwrite
Candidates for inlining (size=5):
  #385:JSCall, frequency: 1
  - size:42, name: push
  #373:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #358:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #48:JSCall, frequency: 1
  - size:26, name: needFinish
  #31:JSCall, frequency: 1
  - size:33, name: onwriteStateUpdate
Inlining push into onwrite
Candidates for inlining (size=4):
  #373:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #358:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #48:JSCall, frequency: 1
  - size:26, name: needFinish
  #31:JSCall, frequency: 1
  - size:33, name: onwriteStateUpdate
Inlining TickObject into onwrite
Candidates for inlining (size=3):
  #358:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #48:JSCall, frequency: 1
  - size:26, name: needFinish
  #31:JSCall, frequency: 1
  - size:33, name: onwriteStateUpdate
Inlining initTriggerId into onwrite
Candidates for inlining (size=2):
  #48:JSCall, frequency: 1
  - size:26, name: needFinish
  #31:JSCall, frequency: 1
  - size:33, name: onwriteStateUpdate
Inlining needFinish into onwrite
Candidates for inlining (size=1):
  #31:JSCall, frequency: 1
  - size:33, name: onwriteStateUpdate
Inlining onwriteStateUpdate into onwrite
[optimizing 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)> - took 4.628, 2.394, 0.062 ms]
[completed optimizing 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)>]
[marking 0x229d874f9021 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d874ff541 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d874ff541 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.160, 0.976, 0.046 ms]
[completed optimizing 0x229d874ff541 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d48efa1e9 <JSFunction _storeHeader (sfi = 0x229d269dc379)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 34/120 (28%), generic ICs: 2/120 (1%)]
[compiling method 0x229d48efa1e9 <JSFunction _storeHeader (sfi = 0x229d269dc379)> using TurboFan]
Candidates for inlining (size=2):
  #177:JSCall, frequency: 3.65049
  - size:87, name: storeHeader
  #306:JSCall, frequency: 1
  - size:39, name: utcDate
Inlining storeHeader into _storeHeader
Candidates for inlining (size=3):
  #682:JSCall, frequency: 3.65049
  - size:138, name: matchHeader
  #650:JSCall, frequency: 3.65049
  - size:14, name: escapeHeaderValue
  #306:JSCall, frequency: 1
  - size:39, name: utcDate
Inlining matchHeader into _storeHeader
Candidates for inlining (size=2):
  #650:JSCall, frequency: 3.65049
  - size:14, name: escapeHeaderValue
  #306:JSCall, frequency: 1
  - size:39, name: utcDate
Inlining escapeHeaderValue into _storeHeader
Candidates for inlining (size=1):
  #306:JSCall, frequency: 1
  - size:39, name: utcDate
Inlining utcDate into _storeHeader
[optimizing 0x229d48efa1e9 <JSFunction _storeHeader (sfi = 0x229d269dc379)> - took 2.679, 3.955, 0.047 ms]
[completed optimizing 0x229d48efa1e9 <JSFunction _storeHeader (sfi = 0x229d269dc379)>]
[marking 0x229de345ec59 <JSFunction digest (sfi = 0x229de3447a51)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229de345ec59 <JSFunction digest (sfi = 0x229de3447a51)> using TurboFan]
[marking 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 32/49 (65%), generic ICs: 2/49 (4%)]
[optimizing 0x229de345ec59 <JSFunction digest (sfi = 0x229de3447a51)> - took 0.113, 0.382, 0.011 ms]
[completed optimizing 0x229de345ec59 <JSFunction digest (sfi = 0x229de3447a51)>]
[compiling method 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)> using TurboFan]
Candidates for inlining (size=1):
  #254:JSCall, frequency: 0.345178
  - size:54, name: spliceOne
Inlining spliceOne into removeListener
[optimizing 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)> - took 0.911, 1.590, 0.019 ms]
[completed optimizing 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)>]
[marking 0x229d0e3decc1 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d0e3e72c1 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d0e3e72c1 <JSFunction f (sfi = 0x229d08f55139)> - took 0.242, 0.536, 0.044 ms]
[completed optimizing 0x229d0e3e72c1 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d269df629 <JSFunction setHeader (sfi = 0x229d269dd189)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/18 (77%), generic ICs: 4/18 (22%)]
[compiling method 0x229d269df629 <JSFunction setHeader (sfi = 0x229d269dd189)> using TurboFan]
Candidates for inlining (size=1):
  #16:JSCall, frequency: 1
  - size:61, name: validateHeader
Inlining validateHeader into setHeader
Candidates for inlining (size=2):
  #310:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
  #219:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
Inlining checkInvalidHeaderChar into setHeader
Candidates for inlining (size=1):
  #219:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
Inlining checkIsHttpToken into setHeader
[optimizing 0x229d269df629 <JSFunction setHeader (sfi = 0x229d269dd189)> - took 1.798, 2.885, 0.031 ms]
[completed optimizing 0x229d269df629 <JSFunction setHeader (sfi = 0x229d269dd189)>]
[marking 0x229d0931ac11 <JSFunction matchKnownFields (sfi = 0x229d269d9c51)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 45/78 (57%), generic ICs: 0/78 (0%)]
[compiling method 0x229d0931ac11 <JSFunction matchKnownFields (sfi = 0x229d269d9c51)> using TurboFan]
[optimizing 0x229d0931ac11 <JSFunction matchKnownFields (sfi = 0x229d269d9c51)> - took 0.377, 1.302, 0.016 ms]
[completed optimizing 0x229d0931ac11 <JSFunction matchKnownFields (sfi = 0x229d269d9c51)>]
[marking 0x229d6619b0b9 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d6619b0b9 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d6619b0b9 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.497, 0.430, 0.012 ms]
[completed optimizing 0x229d6619b0b9 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229de8010361 <JSFunction parseMediaType (sfi = 0x229d3a3ffd91)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/39 (35%), generic ICs: 0/39 (0%)]
[compiling method 0x229de8010361 <JSFunction parseMediaType (sfi = 0x229d3a3ffd91)> using TurboFan]
[optimizing 0x229de8010361 <JSFunction parseMediaType (sfi = 0x229d3a3ffd91)> - took 0.174, 0.636, 0.027 ms]
[completed optimizing 0x229de8010361 <JSFunction parseMediaType (sfi = 0x229d3a3ffd91)>]
[marking 0x229de345ec11 <JSFunction update (sfi = 0x229de3447989)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/4 (75%), generic ICs: 0/4 (0%)]
[compiling method 0x229de345ec11 <JSFunction update (sfi = 0x229de3447989)> using TurboFan]
[optimizing 0x229de345ec11 <JSFunction update (sfi = 0x229de3447989)> - took 0.069, 0.226, 0.007 ms]
[completed optimizing 0x229de345ec11 <JSFunction update (sfi = 0x229de3447989)>]
[marking 0x229de8058ed1 <JSFunction compareSpecs (sfi = 0x229d1ac022c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/12 (100%), generic ICs: 0/12 (0%)]
[compiling method 0x229de8058ed1 <JSFunction compareSpecs (sfi = 0x229d1ac022c9)> using TurboFan]
[optimizing 0x229de8058ed1 <JSFunction compareSpecs (sfi = 0x229d1ac022c9)> - took 0.100, 0.307, 0.011 ms]
[completed optimizing 0x229de8058ed1 <JSFunction compareSpecs (sfi = 0x229d1ac022c9)>]
[marking 0x229d0a4520a1 <JSFunction LazyTransform (sfi = 0x229de345da89)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d0a4520a1 <JSFunction LazyTransform (sfi = 0x229de345da89)> using TurboFan]
[optimizing 0x229d0a4520a1 <JSFunction LazyTransform (sfi = 0x229de345da89)> - took 0.077, 0.186, 0.008 ms]
[completed optimizing 0x229d0a4520a1 <JSFunction LazyTransform (sfi = 0x229de345da89)>]
[marking 0x229d09319f91 <JSFunction parserOnIncoming (sfi = 0x229d269e40a9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 29/63 (46%), generic ICs: 0/63 (0%)]
[compiling method 0x229d09319f91 <JSFunction parserOnIncoming (sfi = 0x229d269e40a9)> using TurboFan]
Candidates for inlining (size=4):
  #163:JSCall, frequency: 1
  - size:11, name: addListener
  #140:JSCall, frequency: 1
  - size:48, name: assignSocket
  #90:JSConstruct, frequency: 1
  - size:69, name: ServerResponse
  #19:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
Inlining addListener into parserOnIncoming
Candidates for inlining (size=4):
  #280:JSCall, frequency: 1
  - size:230, name: _addListener
  #140:JSCall, frequency: 1
  - size:48, name: assignSocket
  #90:JSConstruct, frequency: 1
  - size:69, name: ServerResponse
  #19:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
Inlining _addListener into parserOnIncoming
Candidates for inlining (size=4):
  #140:JSCall, frequency: 1
  - size:48, name: assignSocket
  #90:JSConstruct, frequency: 1
  - size:69, name: ServerResponse
  #19:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
  #472:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining assignSocket into parserOnIncoming
Candidates for inlining (size=6):
  #596:JSCall, frequency: 1
  - size:50, name: _flush
  #569:JSCall, frequency: 1
  - size:56, name: socketOnWrap
  #554:JSCall, frequency: 1
  - size:11, name: ok
  #90:JSConstruct, frequency: 1
  - size:69, name: ServerResponse
  #19:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
  #472:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining _flush into parserOnIncoming
Candidates for inlining (size=6):
  #689:JSCall, frequency: 1
  - size:128, name: _flushOutput
  #569:JSCall, frequency: 1
  - size:56, name: socketOnWrap
  #554:JSCall, frequency: 1
  - size:11, name: ok
  #90:JSConstruct, frequency: 1
  - size:69, name: ServerResponse
  #19:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
  #472:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining _flushOutput into parserOnIncoming
Candidates for inlining (size=5):
  #569:JSCall, frequency: 1
  - size:56, name: socketOnWrap
  #554:JSCall, frequency: 1
  - size:11, name: ok
  #90:JSConstruct, frequency: 1
  - size:69, name: ServerResponse
  #19:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
  #472:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d09319f91 <JSFunction parserOnIncoming (sfi = 0x229d269e40a9)> - took 6.146, 3.026, 0.083 ms]
[completed optimizing 0x229d09319f91 <JSFunction parserOnIncoming (sfi = 0x229d269e40a9)>]
[marking 0x229ddc389941 <JSFunction EventEmitter (sfi = 0x229d3a6bb371)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229ddc389941 <JSFunction EventEmitter (sfi = 0x229d3a6bb371)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:83, name: EventEmitter.init
Inlining EventEmitter.init into EventEmitter
[optimizing 0x229ddc389941 <JSFunction EventEmitter (sfi = 0x229d3a6bb371)> - took 0.541, 0.991, 0.034 ms]
[completed optimizing 0x229ddc389941 <JSFunction EventEmitter (sfi = 0x229d3a6bb371)>]
[marking 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/23 (52%), generic ICs: 1/23 (4%)]
[compiling method 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)> using TurboFan]
Candidates for inlining (size=1):
  #43:JSCall, frequency: 1
  - size:11, name: addListener
Inlining addListener into Readable.on
Candidates for inlining (size=1):
  #126:JSCall, frequency: 1
  - size:230, name: _addListener
Inlining _addListener into Readable.on
Candidates for inlining (size=1):
  #318:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining $getMaxListeners into Readable.on
Inlining small function(s) at call site #410:JSCall
Inlining get into Readable.on
[optimizing 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)> - took 1.401, 1.391, 0.028 ms]
[completed optimizing 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)>]
[marking 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/9 (55%), generic ICs: 0/9 (0%)]
[compiling method 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)> using TurboFan]
[optimizing 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)> - took 0.070, 0.229, 0.006 ms]
[completed optimizing 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)>]
[marking 0x229d1e5c2321 <JSFunction flow (sfi = 0x229d18dfa931)> for optimized recompilation, reason: small function, ICs with typeinfo: 6/7 (85%), generic ICs: 3/7 (42%)]
[compiling method 0x229d1e5c2321 <JSFunction flow (sfi = 0x229d18dfa931)> using TurboFan]
Candidates for inlining (size=1):
  #36:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into flow
[optimizing 0x229d1e5c2321 <JSFunction flow (sfi = 0x229d18dfa931)> - took 0.472, 0.519, 0.014 ms]
[completed optimizing 0x229d1e5c2321 <JSFunction flow (sfi = 0x229d18dfa931)>]
[marking 0x229de80102d1 <JSFunction parseAccept (sfi = 0x229d3a3ffcc9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 0/11 (0%)]
[compiling method 0x229de80102d1 <JSFunction parseAccept (sfi = 0x229d3a3ffcc9)> using TurboFan]
Candidates for inlining (size=2):
  #71:JSCall, frequency: 1
  - size:184, name: parseMediaType
  #15:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
Inlining parseMediaType into parseAccept
Candidates for inlining (size=1):
  #15:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
Inlining splitMediaTypes into parseAccept
[optimizing 0x229de80102d1 <JSFunction parseAccept (sfi = 0x229d3a3ffcc9)> - took 1.469, 1.526, 0.042 ms]
[completed optimizing 0x229de80102d1 <JSFunction parseAccept (sfi = 0x229d3a3ffcc9)>]
[marking 0x229d0a47f6a1 <JSFunction mediaTypes (sfi = 0x229d0a47e9c1)> for optimized recompilation, reason: small function, ICs with typeinfo: 6/6 (100%), generic ICs: 0/6 (0%)]
[compiling method 0x229d0a47f6a1 <JSFunction mediaTypes (sfi = 0x229d0a47e9c1)> using TurboFan]
Candidates for inlining (size=2):
  #41:JSCall, frequency: 1
  - size:59, name: preferredMediaTypes
  #16:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining preferredMediaTypes into mediaTypes
Candidates for inlining (size=2):
  #89:JSCall, frequency: 1
  - size:65, name: parseAccept
  #16:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining parseAccept into mediaTypes
Candidates for inlining (size=3):
  #237:JSCall, frequency: 1
  - size:184, name: parseMediaType
  #181:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
  #16:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining parseMediaType into mediaTypes
Candidates for inlining (size=2):
  #181:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
  #16:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining splitMediaTypes into mediaTypes
Candidates for inlining (size=1):
  #16:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining loadModule into mediaTypes
[optimizing 0x229d0a47f6a1 <JSFunction mediaTypes (sfi = 0x229d0a47e9c1)> - took 3.047, 2.238, 0.053 ms]
[completed optimizing 0x229d0a47f6a1 <JSFunction mediaTypes (sfi = 0x229d0a47e9c1)>]
[marking 0x229d1e5bd259 <JSFunction ReadableState (sfi = 0x229d18df9be9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 39/48 (81%), generic ICs: 2/48 (4%)]
[compiling method 0x229d1e5bd259 <JSFunction ReadableState (sfi = 0x229d18df9be9)> using TurboFan]
Candidates for inlining (size=1):
  #197:JSConstruct, frequency: 1
  - size:18, name: BufferList
Inlining BufferList into ReadableState
[marking 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 21/33 (63%), generic ICs: 1/33 (3%)]
[optimizing 0x229d1e5bd259 <JSFunction ReadableState (sfi = 0x229d18df9be9)> - took 0.813, 1.152, 0.064 ms]
[completed optimizing 0x229d1e5bd259 <JSFunction ReadableState (sfi = 0x229d18df9be9)>]
[marking 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 13/13 (100%), generic ICs: 0/13 (0%)]
[compiling method 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)> using TurboFan]
Candidates for inlining (size=6):
  #144:JSCall, frequency: 1
  - size:84, name: wrapper
  #137:JSCall, frequency: 1
  - size:11, name: addListener
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into _run
Candidates for inlining (size=5):
  #137:JSCall, frequency: 1
  - size:11, name: addListener
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into _run
Candidates for inlining (size=5):
  #535:JSCall, frequency: 1
  - size:230, name: _addListener
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into _run
Candidates for inlining (size=5):
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
  #725:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining once into _run
Candidates for inlining (size=6):
  #816:JSCall, frequency: 1
  - size:101, name: Readable.on
  #810:JSCall, frequency: 1
  - size:42, name: _onceWrap
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
  #725:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining Readable.on into _run
Candidates for inlining (size=6):
  #865:JSCall, frequency: 1
  - size:11, name: addListener
  #810:JSCall, frequency: 1
  - size:42, name: _onceWrap
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
  #725:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[compiling method 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)> using TurboFan]
Candidates for inlining (size=3):
  #108:JSCall, frequency: 1
  - size:16, name: readStart
  #80:JSCall, frequency: 1
  - size:70, name: Readable.push
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
Inlining readStart into parserOnMessageComplete
Candidates for inlining (size=3):
  #191:JSCall, frequency: 1
  - size:32, name: Readable.resume
  #80:JSCall, frequency: 1
  - size:70, name: Readable.push
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
Inlining Readable.resume into parserOnMessageComplete
Candidates for inlining (size=4):
  #80:JSCall, frequency: 1
  - size:70, name: Readable.push
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.54386
  - size:20, name: resume
  #243:JSCall, frequency: 0.54386
  - size:0, name: debugs.(anonymous function)
Inlining Readable.push into parserOnMessageComplete
Candidates for inlining (size=4):
  #322:JSCall, frequency: 1
  - size:200, name: readableAddChunk
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.54386
  - size:20, name: resume
  #243:JSCall, frequency: 0.54386
  - size:0, name: debugs.(anonymous function)
Inlining readableAddChunk into parserOnMessageComplete
Candidates for inlining (size=5):
  #398:JSCall, frequency: 1
  - size:23, name: needMoreData
  #369:JSCall, frequency: 1
  - size:73, name: onEofChunk
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.54386
  - size:20, name: resume
  #243:JSCall, frequency: 0.54386
  - size:0, name: debugs.(anonymous function)
Inlining needMoreData into parserOnMessageComplete
Candidates for inlining (size=4):
  #369:JSCall, frequency: 1
  - size:73, name: onEofChunk
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.54386
  - size:20, name: resume
  #243:JSCall, frequency: 0.54386
  - size:0, name: debugs.(anonymous function)
Inlining onEofChunk into parserOnMessageComplete
Candidates for inlining (size=4):
  #481:JSCall, frequency: 1
  - size:49, name: emitReadable
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.54386
  - size:20, name: resume
  #243:JSCall, frequency: 0.54386
  - size:0, name: debugs.(anonymous function)
[optimizing 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)> - took 6.752, 3.287, 0.057 ms]
[completed optimizing 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)>]
[optimizing 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)> - took 5.601, 1.211, 0.018 ms]
[completed optimizing 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)>]
[marking 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/4 (75%), generic ICs: 0/4 (0%)]
[compiling method 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)> using TurboFan]
Inlining small function(s) at call site #56:JSCall
Inlining exports._unrefActive into _unrefTimer
Candidates for inlining (size=1):
  #82:JSCall, frequency: 1
  - size:134, name: insert
Inlining insert into _unrefTimer
Inlining small function(s) at call site #423:JSCall
Inlining isEmpty into _unrefTimer
Candidates for inlining (size=2):
  #431:JSCall, frequency: 1
  - size:11, name: ok
  #395:JSCall, frequency: 1
  - size:41, name: append
Inlining ok into _unrefTimer
Candidates for inlining (size=1):
  #395:JSCall, frequency: 1
  - size:41, name: append
Inlining append into _unrefTimer
Candidates for inlining (size=1):
  #605:JSCall, frequency: 0.998895
  - size:42, name: remove
Inlining remove into _unrefTimer
[marking 0x229dfb5abaf9 <JSFunction get (sfi = 0x229db9c93e29)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229dfb5abaf9 <JSFunction get (sfi = 0x229db9c93e29)> using TurboFan]
[optimizing 0x229dfb5abaf9 <JSFunction get (sfi = 0x229db9c93e29)> - took 0.041, 0.162, 0.014 ms]
[completed optimizing 0x229dfb5abaf9 <JSFunction get (sfi = 0x229db9c93e29)>]
[optimizing 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)> - took 2.196, 2.675, 0.100 ms]
[completed optimizing 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)>]
[marking 0x229d269d0b39 <JSFunction debugs.(anonymous function) (sfi = 0x229d18dcc091)> for optimized recompilation, reason: small function, ICs with typeinfo: 0/0 (100%), generic ICs: 0/0 (0%)]
[compiling method 0x229d18dfcc41 <JSFunction debugs.(anonymous function) (sfi = 0x229d18dcc091)> using TurboFan]
[optimizing 0x229d18dfcc41 <JSFunction debugs.(anonymous function) (sfi = 0x229d18dcc091)> - took 0.034, 0.112, 0.003 ms]
[completed optimizing 0x229d18dfcc41 <JSFunction debugs.(anonymous function) (sfi = 0x229d18dcc091)>]
[marking 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 33/47 (70%), generic ICs: 1/47 (2%)]
[compiling method 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> using TurboFan]
Candidates for inlining (size=2):
  #183:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #55:JSConstruct, frequency: 1
  - size:130, name: IncomingMessage
Inlining _addHeaderLines into parserOnHeadersComplete
Candidates for inlining (size=2):
  #467:JSCall, frequency: 1
  - size:116, name: _addHeaderLine
  #55:JSConstruct, frequency: 1
  - size:130, name: IncomingMessage
Inlining _addHeaderLine into parserOnHeadersComplete
Candidates for inlining (size=1):
  #55:JSConstruct, frequency: 1
  - size:130, name: IncomingMessage
Inlining IncomingMessage into parserOnHeadersComplete
Candidates for inlining (size=1):
  #656:JSCall, frequency: 1
  - size:63, name: Readable
Inlining Readable into parserOnHeadersComplete
Inlining small function(s) at call site #972:JSCall
Inlining Stream into parserOnHeadersComplete
Inlining small function(s) at call site #1028:JSCall
Inlining EventEmitter into parserOnHeadersComplete
Candidates for inlining (size=1):
  #1057:JSCall, frequency: 1
  - size:83, name: EventEmitter.init
Inlining EventEmitter.init into parserOnHeadersComplete
Not considering call site #1098:JSCall, because inlining depth 6 exceeds maximum allowed level 5
[optimizing 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> - took 3.113, 3.488, 0.162 ms]
[completed optimizing 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)>]
[marking 0x229d3a6875b1 <JSFunction InnerArraySort (sfi = 0x229df910cec9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 3/9 (33%), generic ICs: 1/9 (11%)]
[compiling method 0x229d3a6875b1 <JSFunction InnerArraySort (sfi = 0x229df910cec9)> using TurboFan]
[optimizing 0x229d3a6875b1 <JSFunction InnerArraySort (sfi = 0x229df910cec9)> - took 0.151, 0.577, 0.012 ms]
[completed optimizing 0x229d3a6875b1 <JSFunction InnerArraySort (sfi = 0x229df910cec9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.658679
  - size:25, name: digest
  #152:JSCall, frequency: 0.658679
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #568:JSCall, frequency: 0.658679
  - size:18, name: LazyTransform
  #205:JSCall, frequency: 0.658679
  - size:25, name: digest
  #152:JSCall, frequency: 0.658679
  - size:23, name: update
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #205:JSCall, frequency: 0.658679
  - size:25, name: digest
  #152:JSCall, frequency: 0.658679
  - size:23, name: update
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #152:JSCall, frequency: 0.658679
  - size:23, name: update
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.803, 2.339, 0.069 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #52) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4be0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d93526c41 ; [fp - 24] 0x229d93526c41 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}1896>
      3: 0x229d93526c69 ; [fp - 32] 0x229d93526c69 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4bd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4bd0: [top + 136] <- 0x229d93526c41 ;  0x229d93526c41 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}1896>  (input #2)
    0x7ffeefbf4bc8: [top + 128] <- 0x229d93526c69 ;  0x229d93526c69 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4bc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4bb8: [top + 112] <- 0x7ffeefbf4be8 ;  caller's fp
    0x7ffeefbf4bb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4ba8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4ba0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4b98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4b90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4b88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4b80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4b78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4b70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4b68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4b60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4b58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4b50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4b48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4be0, state=TOS_REGISTER, took 17.790 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)> for optimized recompilation, reason: small function, ICs with typeinfo: 7/7 (100%), generic ICs: 0/7 (0%)]
[compiling method 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)> using TurboFan]
[optimizing 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)> - took 0.122, 0.347, 0.017 ms]
[completed optimizing 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)>]
[marking 0x229df9ca9ef9 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229df9cb1a31 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229dfd282911 <JSFunction (sfi = 0x229d3a3f31c9)> - took 4.877, 4.364, 0.087 ms]
[completed optimizing 0x229dfd282911 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/21 (57%), generic ICs: 0/21 (0%)]
[compiling method 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)> using TurboFan]
Inlining small function(s) at call site #49:JSCall
Inlining isUint8Array into Writable.write
Candidates for inlining (size=3):
  #205:JSCall, frequency: 1
  - size:19, name: args
  #160:JSCall, frequency: 1
  - size:158, name: writeOrBuffer
  #131:JSCall, frequency: 1
  - size:71, name: validChunk
Inlining args into Writable.write
Candidates for inlining (size=2):
  #160:JSCall, frequency: 1
  - size:158, name: writeOrBuffer
  #131:JSCall, frequency: 1
  - size:71, name: validChunk
Inlining writeOrBuffer into Writable.write
Candidates for inlining (size=2):
  #292:JSCall, frequency: 1
  - size:29, name: decodeChunk
  #131:JSCall, frequency: 1
  - size:71, name: validChunk
Inlining decodeChunk into Writable.write
Candidates for inlining (size=1):
  #131:JSCall, frequency: 1
  - size:71, name: validChunk
Inlining validChunk into Writable.write
[optimizing 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)> - took 2.435, 1.666, 0.019 ms]
[completed optimizing 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)>]
[marking 0x229d4fee0ff1 <JSFunction Socket.setTimeout (sfi = 0x229d4fecbd59)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/11 (63%), generic ICs: 0/11 (0%)]
[compiling method 0x229d4fee0ff1 <JSFunction Socket.setTimeout (sfi = 0x229d4fecbd59)> using TurboFan]
Inlining small function(s) at call site #86:JSCall
Inlining exports._unrefActive into Socket.setTimeout
Candidates for inlining (size=3):
  #118:JSCall, frequency: 0.666667
  - size:134, name: insert
  #68:JSCall, frequency: 0.666667
  - size:58, name: exports.enroll
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
Inlining insert into Socket.setTimeout
Inlining small function(s) at call site #455:JSCall
Inlining isEmpty into Socket.setTimeout
Candidates for inlining (size=4):
  #463:JSCall, frequency: 0.666667
  - size:11, name: ok
  #427:JSCall, frequency: 0.666667
  - size:41, name: append
  #68:JSCall, frequency: 0.666667
  - size:58, name: exports.enroll
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
Inlining ok into Socket.setTimeout
Candidates for inlining (size=3):
  #427:JSCall, frequency: 0.666667
  - size:41, name: append
  #68:JSCall, frequency: 0.666667
  - size:58, name: exports.enroll
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
Inlining append into Socket.setTimeout
Candidates for inlining (size=3):
  #68:JSCall, frequency: 0.666667
  - size:58, name: exports.enroll
  #637:JSCall, frequency: 0.66593
  - size:42, name: remove
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
Inlining exports.enroll into Socket.setTimeout
Candidates for inlining (size=4):
  #934:JSCall, frequency: 0.666667
  - size:12, name: init
  #637:JSCall, frequency: 0.66593
  - size:42, name: remove
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
  #881:JSCall, frequency: 0.285095
  - size:60, name: exports.unenroll
Inlining init into Socket.setTimeout
Candidates for inlining (size=3):
  #637:JSCall, frequency: 0.66593
  - size:42, name: remove
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
  #881:JSCall, frequency: 0.285095
  - size:60, name: exports.unenroll
Inlining remove into Socket.setTimeout
Candidates for inlining (size=2):
  #41:JSCall, frequency: 0.333333
  - size:60, name: exports.unenroll
  #881:JSCall, frequency: 0.285095
  - size:60, name: exports.unenroll
Inlining exports.unenroll into Socket.setTimeout
Candidates for inlining (size=2):
  #1264:JSCall, frequency: 0.333333
  - size:50, name: reuse
  #881:JSCall, frequency: 0.285095
  - size:60, name: exports.unenroll
Inlining reuse into Socket.setTimeout
Candidates for inlining (size=2):
  #1326:JSCall, frequency: 0.333333
  - size:42, name: remove
  #881:JSCall, frequency: 0.285095
  - size:60, name: exports.unenroll
[marking 0x229d48efd679 <JSFunction writeHead (sfi = 0x229d269e35b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 28/49 (57%), generic ICs: 3/49 (6%)]
[compiling method 0x229d48efd679 <JSFunction writeHead (sfi = 0x229d269e35b9)> using TurboFan]
Candidates for inlining (size=1):
  #213:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
Inlining checkInvalidHeaderChar into writeHead
[optimizing 0x229d4fee0ff1 <JSFunction Socket.setTimeout (sfi = 0x229d4fecbd59)> - took 6.302, 3.550, 0.100 ms]
[completed optimizing 0x229d4fee0ff1 <JSFunction Socket.setTimeout (sfi = 0x229d4fecbd59)>]
[optimizing 0x229d48efd679 <JSFunction writeHead (sfi = 0x229d269e35b9)> - took 0.864, 2.314, 0.049 ms]
[completed optimizing 0x229d48efd679 <JSFunction writeHead (sfi = 0x229d269e35b9)>]
[marking 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 13/16 (81%), generic ICs: 1/16 (6%)]
[compiling method 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)> using TurboFan]
Candidates for inlining (size=1):
  #83:JSCall, frequency: 1
  - size:101, name: hrtime
Inlining hrtime into startHandlerTimer
[optimizing 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)> - took 0.758, 0.917, 0.058 ms]
[completed optimizing 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)>]
[marking 0x229d0931aa99 <JSFunction onFinish (sfi = 0x229d269dca81)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d0931aa99 <JSFunction onFinish (sfi = 0x229d269dca81)> using TurboFan]
[optimizing 0x229d0931aa99 <JSFunction onFinish (sfi = 0x229d269dca81)> - took 0.054, 0.171, 0.007 ms]
[completed optimizing 0x229d0931aa99 <JSFunction onFinish (sfi = 0x229d269dca81)>]
[marking 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 21/25 (84%), generic ICs: 3/25 (12%)]
[compiling method 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)> using TurboFan]
Candidates for inlining (size=1):
  #90:JSCall, frequency: 1
  - size:101, name: hrtime
Inlining hrtime into endHandlerTimer
[optimizing 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)> - took 0.834, 1.656, 0.029 ms]
[completed optimizing 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)>]
[marking 0x229d0a456701 <JSFunction createHash (sfi = 0x229de3446ab1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d0a456701 <JSFunction createHash (sfi = 0x229de3446ab1)> using TurboFan]
Candidates for inlining (size=1):
  #16:JSConstruct, frequency: 1
  - size:27, name: Hash
Inlining Hash into createHash
Candidates for inlining (size=1):
  #91:JSCall, frequency: 0.660463
  - size:18, name: LazyTransform
Inlining LazyTransform into createHash
[optimizing 0x229d0a456701 <JSFunction createHash (sfi = 0x229de3446ab1)> - took 0.894, 0.365, 0.017 ms]
[completed optimizing 0x229d0a456701 <JSFunction createHash (sfi = 0x229de3446ab1)>]
[marking 0x229d18dfea01 <JSFunction Readable.resume (sfi = 0x229d18dfb809)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/5 (100%), generic ICs: 0/5 (0%)]
[compiling method 0x229d18dfea01 <JSFunction Readable.resume (sfi = 0x229d18dfb809)> using TurboFan]
Candidates for inlining (size=2):
  #50:JSCall, frequency: 0.640359
  - size:20, name: resume
  #39:JSCall, frequency: 0.640359
  - size:0, name: debugs.(anonymous function)
Inlining resume into Readable.resume
Candidates for inlining (size=2):
  #125:JSCall, frequency: 0.640359
  - size:167, name: nextTick
  #39:JSCall, frequency: 0.640359
  - size:0, name: debugs.(anonymous function)
Inlining nextTick into Readable.resume
Candidates for inlining (size=4):
  #400:JSCall, frequency: 0.640359
  - size:42, name: push
  #388:JSConstruct, frequency: 0.640359
  - size:34, name: TickObject
  #373:JSCall, frequency: 0.640359
  - size:27, name: initTriggerId
  #39:JSCall, frequency: 0.640359
  - size:0, name: debugs.(anonymous function)
Inlining push into Readable.resume
Candidates for inlining (size=3):
  #388:JSConstruct, frequency: 0.640359
  - size:34, name: TickObject
  #373:JSCall, frequency: 0.640359
  - size:27, name: initTriggerId
  #39:JSCall, frequency: 0.640359
  - size:0, name: debugs.(anonymous function)
Inlining TickObject into Readable.resume
Candidates for inlining (size=2):
  #373:JSCall, frequency: 0.640359
  - size:27, name: initTriggerId
  #39:JSCall, frequency: 0.640359
  - size:0, name: debugs.(anonymous function)
Inlining initTriggerId into Readable.resume
Candidates for inlining (size=1):
  #39:JSCall, frequency: 0.640359
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into Readable.resume
[optimizing 0x229d18dfea01 <JSFunction Readable.resume (sfi = 0x229d18dfb809)> - took 3.998, 2.088, 0.046 ms]
[completed optimizing 0x229d18dfea01 <JSFunction Readable.resume (sfi = 0x229d18dfb809)>]
[marking 0x229d269e1091 <JSFunction end (sfi = 0x229d269dd959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 21/51 (41%), generic ICs: 0/51 (0%)]
[marking 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 21/63 (33%), generic ICs: 1/63 (1%)]
[compiling method 0x229d269e1091 <JSFunction end (sfi = 0x229d269dd959)> using TurboFan]
Candidates for inlining (size=3):
  #225:JSCall, frequency: 1
  - size:20, name: _finish
  #176:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #148:JSCall, frequency: 1
  - size:137, name: _send
Inlining _finish into end
Candidates for inlining (size=3):
  #335:JSCall, frequency: 1
  - size:16, name: _finish
  #176:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #148:JSCall, frequency: 1
  - size:137, name: _send
Inlining _finish into end
Candidates for inlining (size=3):
  #382:JSCall, frequency: 1
  - size:11, name: ok
  #176:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #148:JSCall, frequency: 1
  - size:137, name: _send
Inlining ok into end
Candidates for inlining (size=2):
  #176:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #148:JSCall, frequency: 1
  - size:137, name: _send
Inlining debugs.(anonymous function) into end
Candidates for inlining (size=1):
  #148:JSCall, frequency: 1
  - size:137, name: _send
Inlining _send into end
Candidates for inlining (size=1):
  #521:JSCall, frequency: 1
  - size:158, name: _writeRaw
Inlining _writeRaw into end
Candidates for inlining (size=4):
  #698:JSCall, frequency: 0.5001
  - size:33, name: Socket.write
  #684:JSCall, frequency: 0.4999
  - size:169, name: internalNextTick
  #730:JSCall, frequency: unknown
  - size:27, name: get
  #718:JSCall, frequency: unknown
  - size:27, name: get
Inlining Socket.write into end
Candidates for inlining (size=4):
  #833:JSCall, frequency: 0.5001
  - size:130, name: Writable.write
  #684:JSCall, frequency: 0.4999
  - size:169, name: internalNextTick
  #730:JSCall, frequency: unknown
  - size:27, name: get
  #718:JSCall, frequency: unknown
  - size:27, name: get
Inlining Writable.write into end
Inlining small function(s) at call site #891:JSCall
Inlining isUint8Array into end
Not considering call site #1044:JSCall, because inlining depth 6 exceeds maximum allowed level 5
Candidates for inlining (size=5):
  #1001:JSCall, frequency: 0.5001
  - size:158, name: writeOrBuffer
  #972:JSCall, frequency: 0.5001
  - size:71, name: validChunk
  #684:JSCall, frequency: 0.4999
  - size:169, name: internalNextTick
  #730:JSCall, frequency: unknown
  - size:27, name: get
  #718:JSCall, frequency: unknown
  - size:27, name: get
[compiling method 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)> using TurboFan]
Candidates for inlining (size=2):
  #145:JSCall, frequency: 1
  - size:78, name: createWriteReq
  #50:JSCall, frequency: 1
  - size:28, name: _unrefTimer
Inlining createWriteReq into Socket._writeGeneric
Candidates for inlining (size=1):
  #50:JSCall, frequency: 1
  - size:28, name: _unrefTimer
Inlining _unrefTimer into Socket._writeGeneric
Inlining small function(s) at call site #424:JSCall
Inlining exports._unrefActive into Socket._writeGeneric
Candidates for inlining (size=1):
  #449:JSCall, frequency: 1
  - size:134, name: insert
Inlining insert into Socket._writeGeneric
Inlining small function(s) at call site #789:JSCall
Inlining isEmpty into Socket._writeGeneric
Candidates for inlining (size=2):
  #797:JSCall, frequency: 1
  - size:11, name: ok
  #761:JSCall, frequency: 1
  - size:41, name: append
Inlining ok into Socket._writeGeneric
Candidates for inlining (size=1):
  #761:JSCall, frequency: 1
  - size:41, name: append
Inlining append into Socket._writeGeneric
Candidates for inlining (size=1):
  #970:JSCall, frequency: 0.998895
  - size:42, name: remove
Inlining remove into Socket._writeGeneric
[optimizing 0x229d269e1091 <JSFunction end (sfi = 0x229d269dd959)> - took 6.589, 3.063, 0.063 ms]
[completed optimizing 0x229d269e1091 <JSFunction end (sfi = 0x229d269dd959)>]
[optimizing 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)> - took 3.875, 4.921, 0.112 ms]
[completed optimizing 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)>]
[marking 0x229d09319f49 <JSFunction resOnFinish (sfi = 0x229d269e3fe1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 28/35 (80%), generic ICs: 0/35 (0%)]
[compiling method 0x229d09319f49 <JSFunction resOnFinish (sfi = 0x229d269e3fe1)> using TurboFan]
Candidates for inlining (size=5):
  #182:JSCall, frequency: 1
  - size:47, name: Socket.setTimeout
  #168:JSCall, frequency: 1
  - size:47, name: Socket.setTimeout
  #123:JSCall, frequency: 1
  - size:35, name: detachSocket
  #114:JSCall, frequency: 1
  - size:27, name: _dump
  #66:JSCall, frequency: 1
  - size:11, name: ok
Inlining Socket.setTimeout into resOnFinish
Inlining small function(s) at call site #342:JSCall
Inlining exports._unrefActive into resOnFinish
Candidates for inlining (size=7):
  #168:JSCall, frequency: 1
  - size:47, name: Socket.setTimeout
  #123:JSCall, frequency: 1
  - size:35, name: detachSocket
  #114:JSCall, frequency: 1
  - size:27, name: _dump
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
Inlining Socket.setTimeout into resOnFinish
Inlining small function(s) at call site #462:JSCall
Inlining exports._unrefActive into resOnFinish
Candidates for inlining (size=9):
  #123:JSCall, frequency: 1
  - size:35, name: detachSocket
  #114:JSCall, frequency: 1
  - size:27, name: _dump
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #492:JSCall, frequency: 0.66672
  - size:134, name: insert
  #444:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #417:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
Inlining detachSocket into resOnFinish
Candidates for inlining (size=10):
  #537:JSCall, frequency: 1
  - size:216, name: removeListener
  #526:JSCall, frequency: 1
  - size:11, name: ok
  #114:JSCall, frequency: 1
  - size:27, name: _dump
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #492:JSCall, frequency: 0.66672
  - size:134, name: insert
  #444:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #417:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
Inlining removeListener into resOnFinish
Candidates for inlining (size=10):
  #526:JSCall, frequency: 1
  - size:11, name: ok
  #114:JSCall, frequency: 1
  - size:27, name: _dump
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #492:JSCall, frequency: 0.66672
  - size:134, name: insert
  #444:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #824:JSCall, frequency: 0.346126
  - size:54, name: spliceOne
  #417:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
Inlining ok into resOnFinish
Candidates for inlining (size=9):
  #114:JSCall, frequency: 1
  - size:27, name: _dump
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #492:JSCall, frequency: 0.66672
  - size:134, name: insert
  #444:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #824:JSCall, frequency: 0.346126
  - size:54, name: spliceOne
  #417:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
Inlining _dump into resOnFinish
Candidates for inlining (size=10):
  #998:JSCall, frequency: 1
  - size:32, name: Readable.resume
  #989:JSCall, frequency: 1
  - size:205, name: removeAllListeners
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #492:JSCall, frequency: 0.66672
  - size:134, name: insert
  #444:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #824:JSCall, frequency: 0.346126
  - size:54, name: spliceOne
  #417:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
Inlining Readable.resume into resOnFinish
Candidates for inlining (size=11):
  #989:JSCall, frequency: 1
  - size:205, name: removeAllListeners
  #66:JSCall, frequency: 1
  - size:11, name: ok
  #492:JSCall, frequency: 0.66672
  - size:134, name: insert
  #444:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #377:JSCall, frequency: 0.66672
  - size:134, name: insert
  #324:JSCall, frequency: 0.66672
  - size:58, name: exports.enroll
  #1065:JSCall, frequency: 0.641514
  - size:20, name: resume
  #1055:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
  #824:JSCall, frequency: 0.346126
  - size:54, name: spliceOne
  #417:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
  #297:JSCall, frequency: 0.33328
  - size:60, name: exports.unenroll
[optimizing 0x229d09319f49 <JSFunction resOnFinish (sfi = 0x229d269e3fe1)> - took 12.700, 3.072, 0.045 ms]
[completed optimizing 0x229d09319f49 <JSFunction resOnFinish (sfi = 0x229d269e3fe1)>]
[marking 0x229d09319e71 <JSFunction onParserExecute (sfi = 0x229d269e3d89)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/5 (100%), generic ICs: 0/5 (0%)]
[compiling method 0x229d09319e71 <JSFunction onParserExecute (sfi = 0x229d269e3d89)> using TurboFan]
Candidates for inlining (size=3):
  #46:JSCall, frequency: 1
  - size:215, name: onParserExecuteCommon
  #40:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #24:JSCall, frequency: 1
  - size:28, name: _unrefTimer
Inlining onParserExecuteCommon into onParserExecute
Candidates for inlining (size=3):
  #75:JSCall, frequency: 1
  - size:23, name: resetSocketTimeout
  #40:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #24:JSCall, frequency: 1
  - size:28, name: _unrefTimer
Inlining resetSocketTimeout into onParserExecute
Candidates for inlining (size=3):
  #40:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #24:JSCall, frequency: 1
  - size:28, name: _unrefTimer
  #211:JSCall, frequency: 0.444175
  - size:47, name: Socket.setTimeout
Inlining debugs.(anonymous function) into onParserExecute
Candidates for inlining (size=2):
  #24:JSCall, frequency: 1
  - size:28, name: _unrefTimer
  #211:JSCall, frequency: 0.444175
  - size:47, name: Socket.setTimeout
Inlining _unrefTimer into onParserExecute
Inlining small function(s) at call site #295:JSCall
Inlining exports._unrefActive into onParserExecute
Candidates for inlining (size=2):
  #320:JSCall, frequency: 1
  - size:134, name: insert
  #211:JSCall, frequency: 0.444175
  - size:47, name: Socket.setTimeout
Inlining insert into onParserExecute
Inlining small function(s) at call site #659:JSCall
Inlining isEmpty into onParserExecute
Candidates for inlining (size=3):
  #667:JSCall, frequency: 1
  - size:11, name: ok
  #631:JSCall, frequency: 1
  - size:41, name: append
  #211:JSCall, frequency: 0.444175
  - size:47, name: Socket.setTimeout
[optimizing 0x229d09319e71 <JSFunction onParserExecute (sfi = 0x229d269e3d89)> - took 4.174, 2.529, 0.058 ms]
[completed optimizing 0x229d09319e71 <JSFunction onParserExecute (sfi = 0x229d269e3d89)>]
[marking 0x229d6d15cf09 <JSFunction send (sfi = 0x229d6d15b071)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/10 (100%), generic ICs: 0/10 (0%)]
[compiling method 0x229d6d15cf09 <JSFunction send (sfi = 0x229d6d15b071)> using TurboFan]
[optimizing 0x229d6d15cf09 <JSFunction send (sfi = 0x229d6d15b071)> - took 0.121, 0.452, 0.024 ms]
[completed optimizing 0x229d6d15cf09 <JSFunction send (sfi = 0x229d6d15b071)>]
[marking 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 27/31 (87%), generic ICs: 5/31 (16%)]
[marking 0x229d0931a979 <JSFunction write_ (sfi = 0x229d269dc761)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 22/49 (44%), generic ICs: 1/49 (2%)]
[compiling method 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> using TurboFan]
Inlining small function(s) at call site #337:JSCall
Inlining isEmpty into insert
Candidates for inlining (size=2):
  #345:JSCall, frequency: 1
  - size:11, name: ok
  #309:JSCall, frequency: 1
  - size:41, name: append
Inlining ok into insert
Candidates for inlining (size=1):
  #309:JSCall, frequency: 1
  - size:41, name: append
Inlining append into insert
Candidates for inlining (size=1):
  #519:JSCall, frequency: 0.998895
  - size:42, name: remove
Inlining remove into insert
[compiling method 0x229d0931a979 <JSFunction write_ (sfi = 0x229d269dc761)> using TurboFan]
Candidates for inlining (size=4):
  #252:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #231:JSCall, frequency: 1
  - size:137, name: _send
  #190:JSCall, frequency: 1
  - size:167, name: nextTick
  #170:JSCall, frequency: 1
  - size:14, name: Writable.cork
Inlining debugs.(anonymous function) into write_
Candidates for inlining (size=3):
  #231:JSCall, frequency: 1
  - size:137, name: _send
  #190:JSCall, frequency: 1
  - size:167, name: nextTick
  #170:JSCall, frequency: 1
  - size:14, name: Writable.cork
Inlining _send into write_
Candidates for inlining (size=3):
  #403:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #190:JSCall, frequency: 1
  - size:167, name: nextTick
  #170:JSCall, frequency: 1
  - size:14, name: Writable.cork
Inlining _writeRaw into write_
Candidates for inlining (size=6):
  #190:JSCall, frequency: 1
  - size:167, name: nextTick
  #170:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #581:JSCall, frequency: 0.523329
  - size:33, name: Socket.write
  #567:JSCall, frequency: 0.476671
  - size:169, name: internalNextTick
  #613:JSCall, frequency: unknown
  - size:27, name: get
  #601:JSCall, frequency: unknown
  - size:27, name: get
Inlining nextTick into write_
Candidates for inlining (size=8):
  #883:JSCall, frequency: 1
  - size:42, name: push
  #871:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #856:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #170:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #581:JSCall, frequency: 0.523329
  - size:33, name: Socket.write
  #567:JSCall, frequency: 0.476671
  - size:169, name: internalNextTick
  #613:JSCall, frequency: unknown
  - size:27, name: get
  #601:JSCall, frequency: unknown
  - size:27, name: get
[optimizing 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> - took 1.748, 2.000, 0.035 ms]
[completed optimizing 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>]
[optimizing 0x229d0931a979 <JSFunction write_ (sfi = 0x229d269dc761)> - took 5.251, 3.832, 0.050 ms]
[completed optimizing 0x229d0931a979 <JSFunction write_ (sfi = 0x229d269dc761)>]
[marking 0x229d48ef90a9 <JSFunction OutgoingMessage (sfi = 0x229d269dc1e9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 26/26 (100%), generic ICs: 1/26 (3%)]
[compiling method 0x229d48ef90a9 <JSFunction OutgoingMessage (sfi = 0x229d269dc1e9)> using TurboFan]
Inlining small function(s) at call site #31:JSCall
Inlining Stream into OutgoingMessage
Inlining small function(s) at call site #184:JSCall
Inlining EventEmitter into OutgoingMessage
Candidates for inlining (size=1):
  #213:JSCall, frequency: 1
  - size:83, name: EventEmitter.init
Inlining EventEmitter.init into OutgoingMessage
[optimizing 0x229d48ef90a9 <JSFunction OutgoingMessage (sfi = 0x229d269dc1e9)> - took 0.887, 1.741, 0.075 ms]
[completed optimizing 0x229d48ef90a9 <JSFunction OutgoingMessage (sfi = 0x229d269dc1e9)>]
[marking 0x229de98b7e79 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229de98bf8e1 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229de98bf8e1 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.634, 2.040, 0.031 ms]
[completed optimizing 0x229de98bf8e1 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d6d15da79 <JSFunction _setupRequest (sfi = 0x229db9c922a1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 30/30 (100%), generic ICs: 1/30 (3%)]
[compiling method 0x229d6d15da79 <JSFunction _setupRequest (sfi = 0x229db9c922a1)> using TurboFan]
Candidates for inlining (size=1):
  #110:JSCall, frequency: 1
  - size:128, name: header
Inlining header into _setupRequest
Candidates for inlining (size=3):
  #516:JSCall, frequency: 1
  - size:92, name: setHeader
  #473:JSCall, frequency: 1
  - size:46, name: getHeader
  #419:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining setHeader into _setupRequest
Candidates for inlining (size=3):
  #560:JSCall, frequency: 1
  - size:61, name: validateHeader
  #473:JSCall, frequency: 1
  - size:46, name: getHeader
  #419:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining validateHeader into _setupRequest
Candidates for inlining (size=4):
  #849:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
  #758:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #473:JSCall, frequency: 1
  - size:46, name: getHeader
  #419:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining checkInvalidHeaderChar into _setupRequest
Candidates for inlining (size=3):
  #758:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #473:JSCall, frequency: 1
  - size:46, name: getHeader
  #419:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining checkIsHttpToken into _setupRequest
Candidates for inlining (size=2):
  #473:JSCall, frequency: 1
  - size:46, name: getHeader
  #419:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
[optimizing 0x229d6d15da79 <JSFunction _setupRequest (sfi = 0x229db9c922a1)> - took 4.419, 4.435, 0.125 ms]
[completed optimizing 0x229d6d15da79 <JSFunction _setupRequest (sfi = 0x229db9c922a1)>]
[marking 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 20/45 (44%), generic ICs: 0/45 (0%)]
[compiling method 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)> using TurboFan]
Candidates for inlining (size=2):
  #196:JSCall, frequency: 1
  - size:42, name: push
  #184:JSConstruct, frequency: 1
  - size:34, name: TickObject
Inlining push into internalNextTick
Candidates for inlining (size=1):
  #184:JSConstruct, frequency: 1
  - size:34, name: TickObject
Inlining TickObject into internalNextTick
[marking 0x229d4fe9ea11 <JSFunction push (sfi = 0x229d18daa0c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/10 (100%), generic ICs: 0/10 (0%)]
[compiling method 0x229d4fe9ea11 <JSFunction push (sfi = 0x229d18daa0c9)> using TurboFan]
[optimizing 0x229d4fe9ea11 <JSFunction push (sfi = 0x229d18daa0c9)> - took 0.087, 0.407, 0.045 ms]
[completed optimizing 0x229d4fe9ea11 <JSFunction push (sfi = 0x229d18daa0c9)>]
[optimizing 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)> - took 1.338, 1.377, 0.037 ms]
[completed optimizing 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)>]
[marking 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 63/137 (45%), generic ICs: 5/137 (3%)]
[compiling method 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)> using TurboFan]
Inlining small function(s) at call site #125:JSCall
Inlining LRUCache.get into find
Candidates for inlining (size=3):
  #634:JSCall, frequency: 1
  - size:67, name: get
  #70:JSCall, frequency: 1
  - size:38, name: getVersion
  #178:JSCall, frequency: 0.999013
  - size:25, name: shallowCopy
Inlining get into find
Candidates for inlining (size=4):
  #70:JSCall, frequency: 1
  - size:38, name: getVersion
  #847:JSCall, frequency: 0.999013
  - size:75, name: Yallist.unshiftNode
  #816:JSCall, frequency: 0.999013
  - size:65, name: isStale
  #178:JSCall, frequency: 0.999013
  - size:25, name: shallowCopy
Inlining getVersion into find
Candidates for inlining (size=3):
  #847:JSCall, frequency: 0.999013
  - size:75, name: Yallist.unshiftNode
  #816:JSCall, frequency: 0.999013
  - size:65, name: isStale
  #178:JSCall, frequency: 0.999013
  - size:25, name: shallowCopy
Inlining Yallist.unshiftNode into find
Candidates for inlining (size=3):
  #816:JSCall, frequency: 0.999013
  - size:65, name: isStale
  #178:JSCall, frequency: 0.999013
  - size:25, name: shallowCopy
  #1042:JSCall, frequency: 0.806515
  - size:100, name: Yallist.removeNode
Inlining isStale into find
Candidates for inlining (size=2):
  #178:JSCall, frequency: 0.999013
  - size:25, name: shallowCopy
  #1042:JSCall, frequency: 0.806515
  - size:100, name: Yallist.removeNode
Inlining shallowCopy into find
Candidates for inlining (size=1):
  #1042:JSCall, frequency: 0.806515
  - size:100, name: Yallist.removeNode
Inlining Yallist.removeNode into find
[marking 0x229d6d1597e9 <JSFunction getVersion (sfi = 0x229d6d1575c1)> for optimized recompilation, reason: small function, ICs with typeinfo: 9/10 (90%), generic ICs: 0/10 (0%)]
[compiling method 0x229d6d1597e9 <JSFunction getVersion (sfi = 0x229d6d1575c1)> using TurboFan]
[optimizing 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)> - took 4.597, 4.221, 0.094 ms]
[completed optimizing 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)>]
[optimizing 0x229d6d1597e9 <JSFunction getVersion (sfi = 0x229d6d1575c1)> - took 0.122, 0.314, 0.005 ms]
[completed optimizing 0x229d6d1597e9 <JSFunction getVersion (sfi = 0x229d6d1575c1)>]
[marking 0x229d0a47f659 <JSFunction mediaType (sfi = 0x229d0a47e8f9)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d0a47f659 <JSFunction mediaType (sfi = 0x229d0a47e8f9)> using TurboFan]
Candidates for inlining (size=1):
  #19:JSCall, frequency: 1
  - size:26, name: mediaTypes
Inlining mediaTypes into mediaType
Candidates for inlining (size=2):
  #90:JSCall, frequency: 1
  - size:59, name: preferredMediaTypes
  #64:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining preferredMediaTypes into mediaType
Candidates for inlining (size=2):
  #137:JSCall, frequency: 1
  - size:65, name: parseAccept
  #64:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining parseAccept into mediaType
Candidates for inlining (size=3):
  #285:JSCall, frequency: 1
  - size:184, name: parseMediaType
  #229:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
  #64:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining parseMediaType into mediaType
Candidates for inlining (size=2):
  #229:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
  #64:JSCall, frequency: 1
  - size:81, name: loadModule
Inlining splitMediaTypes into mediaType
Candidates for inlining (size=1):
  #64:JSCall, frequency: 1
  - size:81, name: loadModule
[marking 0x229d1e5c1999 <JSFunction clearBuffer (sfi = 0x229d3a6f0241)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 20/47 (42%), generic ICs: 0/47 (0%)]
[compiling method 0x229d1e5c1999 <JSFunction clearBuffer (sfi = 0x229d3a6f0241)> using TurboFan]
Candidates for inlining (size=1):
  #129:JSCall, frequency: 1
  - size:51, name: doWrite
Inlining doWrite into clearBuffer
Inlining small function(s) at call site #312:JSCall
Inlining Socket._write into clearBuffer
[optimizing 0x229d0a47f659 <JSFunction mediaType (sfi = 0x229d0a47e8f9)> - took 3.293, 2.103, 0.035 ms]
[completed optimizing 0x229d0a47f659 <JSFunction mediaType (sfi = 0x229d0a47e8f9)>]
[optimizing 0x229d1e5c1999 <JSFunction clearBuffer (sfi = 0x229d3a6f0241)> - took 0.621, 1.441, 0.040 ms]
[completed optimizing 0x229d1e5c1999 <JSFunction clearBuffer (sfi = 0x229d3a6f0241)>]
[marking 0x229d4feadf49 <JSFunction _onceWrap (sfi = 0x229d3a6bba79)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 9/9 (100%), generic ICs: 0/9 (0%)]
[compiling method 0x229d4feadf49 <JSFunction _onceWrap (sfi = 0x229d3a6bba79)> using TurboFan]
[optimizing 0x229d4feadf49 <JSFunction _onceWrap (sfi = 0x229d3a6bba79)> - took 0.127, 0.371, 0.011 ms]
[completed optimizing 0x229d4feadf49 <JSFunction _onceWrap (sfi = 0x229d3a6bba79)>]
[marking 0x229d9ae02379 <JSFunction _reqClosed (sfi = 0x229db9c91239)> for optimized recompilation, reason: small function, ICs with typeinfo: 4/4 (100%), generic ICs: 2/4 (50%)]
[compiling method 0x229d9ae02379 <JSFunction _reqClosed (sfi = 0x229db9c91239)> using TurboFan]
[optimizing 0x229d9ae02379 <JSFunction _reqClosed (sfi = 0x229db9c91239)> - took 0.070, 0.155, 0.012 ms]
[completed optimizing 0x229d9ae02379 <JSFunction _reqClosed (sfi = 0x229db9c91239)>]
[marking 0x229d6d15db09 <JSFunction _finishReqResCycle (sfi = 0x229db9c92431)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/17 (58%), generic ICs: 2/17 (11%)]
[compiling method 0x229d6d15db09 <JSFunction _finishReqResCycle (sfi = 0x229db9c92431)> using TurboFan]
[optimizing 0x229d6d15db09 <JSFunction _finishReqResCycle (sfi = 0x229db9c92431)> - took 0.170, 0.602, 0.022 ms]
[completed optimizing 0x229d6d15db09 <JSFunction _finishReqResCycle (sfi = 0x229db9c92431)>]
[marking 0x229d1e5c2291 <JSFunction resume (sfi = 0x229d18dfa7a1)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/5 (100%), generic ICs: 0/5 (0%)]
[compiling method 0x229d1e5c2291 <JSFunction resume (sfi = 0x229d18dfa7a1)> using TurboFan]
Candidates for inlining (size=1):
  #40:JSCall, frequency: 1
  - size:167, name: nextTick
Inlining nextTick into resume
Candidates for inlining (size=3):
  #317:JSCall, frequency: 1
  - size:42, name: push
  #305:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #290:JSCall, frequency: 1
  - size:27, name: initTriggerId
Inlining push into resume
Candidates for inlining (size=2):
  #305:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #290:JSCall, frequency: 1
  - size:27, name: initTriggerId
Inlining TickObject into resume
Candidates for inlining (size=1):
  #290:JSCall, frequency: 1
  - size:27, name: initTriggerId
Inlining initTriggerId into resume
[optimizing 0x229d1e5c2291 <JSFunction resume (sfi = 0x229d18dfa7a1)> - took 2.482, 1.907, 0.034 ms]
[completed optimizing 0x229d1e5c2291 <JSFunction resume (sfi = 0x229d18dfa7a1)>]
[marking 0x229dc78d9c51 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dc78e1c31 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229dfd282501 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.524, 0.622, 0.021 ms]
[completed optimizing 0x229dfd282501 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d09319fd9 <JSFunction resetSocketTimeout (sfi = 0x229d269e4171)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/5 (100%), generic ICs: 0/5 (0%)]
[compiling method 0x229d09319fd9 <JSFunction resetSocketTimeout (sfi = 0x229d269e4171)> using TurboFan]
Candidates for inlining (size=1):
  #43:JSCall, frequency: 0.527178
  - size:47, name: Socket.setTimeout
Inlining Socket.setTimeout into resetSocketTimeout
Inlining small function(s) at call site #148:JSCall
Inlining exports._unrefActive into resetSocketTimeout
Candidates for inlining (size=3):
  #183:JSCall, frequency: 0.35148
  - size:134, name: insert
  #130:JSCall, frequency: 0.35148
  - size:58, name: exports.enroll
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining insert into resetSocketTimeout
Inlining small function(s) at call site #520:JSCall
Inlining isEmpty into resetSocketTimeout
Candidates for inlining (size=4):
  #528:JSCall, frequency: 0.35148
  - size:11, name: ok
  #492:JSCall, frequency: 0.35148
  - size:41, name: append
  #130:JSCall, frequency: 0.35148
  - size:58, name: exports.enroll
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining ok into resetSocketTimeout
Candidates for inlining (size=3):
  #492:JSCall, frequency: 0.35148
  - size:41, name: append
  #130:JSCall, frequency: 0.35148
  - size:58, name: exports.enroll
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining append into resetSocketTimeout
Candidates for inlining (size=3):
  #130:JSCall, frequency: 0.35148
  - size:58, name: exports.enroll
  #687:JSCall, frequency: 0.351092
  - size:42, name: remove
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining exports.enroll into resetSocketTimeout
Candidates for inlining (size=3):
  #984:JSCall, frequency: 0.35148
  - size:12, name: init
  #687:JSCall, frequency: 0.351092
  - size:42, name: remove
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining init into resetSocketTimeout
Candidates for inlining (size=2):
  #687:JSCall, frequency: 0.351092
  - size:42, name: remove
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining remove into resetSocketTimeout
Candidates for inlining (size=1):
  #103:JSCall, frequency: 0.175698
  - size:60, name: exports.unenroll
Inlining exports.unenroll into resetSocketTimeout
Candidates for inlining (size=1):
  #1301:JSCall, frequency: 0.175698
  - size:50, name: reuse
[marking 0x229d48efa279 <JSFunction _writeRaw (sfi = 0x229d269dc2b1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/37 (37%), generic ICs: 0/37 (0%)]
[compiling method 0x229d48efa279 <JSFunction _writeRaw (sfi = 0x229d269dc2b1)> using TurboFan]
Candidates for inlining (size=4):
  #165:JSCall, frequency: 0.588728
  - size:33, name: Socket.write
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
Inlining Socket.write into _writeRaw
Candidates for inlining (size=4):
  #302:JSCall, frequency: 0.588728
  - size:130, name: Writable.write
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
Inlining Writable.write into _writeRaw
Inlining small function(s) at call site #364:JSCall
Inlining isUint8Array into _writeRaw
Candidates for inlining (size=6):
  #517:JSCall, frequency: 0.588728
  - size:19, name: args
  #474:JSCall, frequency: 0.588728
  - size:158, name: writeOrBuffer
  #445:JSCall, frequency: 0.588728
  - size:71, name: validChunk
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
Inlining args into _writeRaw
Candidates for inlining (size=5):
  #474:JSCall, frequency: 0.588728
  - size:158, name: writeOrBuffer
  #445:JSCall, frequency: 0.588728
  - size:71, name: validChunk
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
Inlining writeOrBuffer into _writeRaw
Candidates for inlining (size=5):
  #603:JSCall, frequency: 0.588728
  - size:29, name: decodeChunk
  #445:JSCall, frequency: 0.588728
  - size:71, name: validChunk
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
Inlining decodeChunk into _writeRaw
Candidates for inlining (size=4):
  #445:JSCall, frequency: 0.588728
  - size:71, name: validChunk
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
Inlining validChunk into _writeRaw
Candidates for inlining (size=3):
  #151:JSCall, frequency: 0.411272
  - size:169, name: internalNextTick
  #198:JSCall, frequency: unknown
  - size:27, name: get
  #186:JSCall, frequency: unknown
  - size:27, name: get
[optimizing 0x229d09319fd9 <JSFunction resetSocketTimeout (sfi = 0x229d269e4171)> - took 5.699, 3.312, 0.125 ms]
[completed optimizing 0x229d09319fd9 <JSFunction resetSocketTimeout (sfi = 0x229d269e4171)>]
[optimizing 0x229d48efa279 <JSFunction _writeRaw (sfi = 0x229d269dc2b1)> - took 7.072, 3.126, 0.063 ms]
[completed optimizing 0x229d48efa279 <JSFunction _writeRaw (sfi = 0x229d269dc2b1)>]
[marking 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)> for optimized recompilation, reason: small function, ICs with typeinfo: 4/4 (100%), generic ICs: 0/4 (0%)]
[compiling method 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)> using TurboFan]
Candidates for inlining (size=2):
  #44:JSCall, frequency: 1
  - size:29, name: flow
  #28:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining flow into emitReadable_
Candidates for inlining (size=2):
  #87:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #28:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into emitReadable_
Candidates for inlining (size=1):
  #28:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into emitReadable_
[optimizing 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)> - took 1.473, 0.564, 0.017 ms]
[completed optimizing 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.662856
  - size:25, name: digest
  #152:JSCall, frequency: 0.662856
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.662856
  - size:25, name: digest
  #152:JSCall, frequency: 0.662856
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.662856
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.824, 2.294, 0.043 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #87) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d874bbd69 ; [fp - 24] 0x229d874bbd69 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}3788>
      3: 0x229d874bbd91 ; [fp - 32] 0x229d874bbd91 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d68: [top + 136] <- 0x229d874bbd69 ;  0x229d874bbd69 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}3788>  (input #2)
    0x7ffeefbf4d60: [top + 128] <- 0x229d874bbd91 ;  0x229d874bbd91 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d50: [top + 112] <- 0x7ffeefbf4d80 ;  caller's fp
    0x7ffeefbf4d48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cf8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cf0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ce8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ce0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d78, state=TOS_REGISTER, took 15.192 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d1e5c1909 <JSFunction afterWrite (sfi = 0x229d3a6f00b1)> for optimized recompilation, reason: small function, ICs with typeinfo: 6/6 (100%), generic ICs: 0/6 (0%)]
[compiling method 0x229d1e5c1909 <JSFunction afterWrite (sfi = 0x229d3a6f00b1)> using TurboFan]
Candidates for inlining (size=3):
  #46:JSCall, frequency: 1
  - size:38, name: finishMaybe
  #40:JSCall, frequency: 1
  - size:0, name: nop
  #23:JSCall, frequency: 1
  - size:23, name: onwriteDrain
Inlining finishMaybe into afterWrite
Candidates for inlining (size=3):
  #78:JSCall, frequency: 1
  - size:26, name: needFinish
  #40:JSCall, frequency: 1
  - size:0, name: nop
  #23:JSCall, frequency: 1
  - size:23, name: onwriteDrain
Inlining needFinish into afterWrite
Candidates for inlining (size=2):
  #40:JSCall, frequency: 1
  - size:0, name: nop
  #23:JSCall, frequency: 1
  - size:23, name: onwriteDrain
Inlining nop into afterWrite
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:23, name: onwriteDrain
Inlining onwriteDrain into afterWrite
[optimizing 0x229d1e5c1909 <JSFunction afterWrite (sfi = 0x229d3a6f00b1)> - took 2.296, 0.496, 0.010 ms]
[completed optimizing 0x229d1e5c1909 <JSFunction afterWrite (sfi = 0x229d3a6f00b1)>]
[marking 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/6 (66%), generic ICs: 0/6 (0%)]
[compiling method 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)> using TurboFan]
Candidates for inlining (size=2):
  #43:JSCall, frequency: 1
  - size:101, name: Readable.on
  #37:JSCall, frequency: 1
  - size:42, name: _onceWrap
Inlining Readable.on into once
Candidates for inlining (size=2):
  #94:JSCall, frequency: 1
  - size:11, name: addListener
  #37:JSCall, frequency: 1
  - size:42, name: _onceWrap
Inlining addListener into once
Candidates for inlining (size=2):
  #174:JSCall, frequency: 1
  - size:230, name: _addListener
  #37:JSCall, frequency: 1
  - size:42, name: _onceWrap
Inlining _addListener into once
Candidates for inlining (size=2):
  #37:JSCall, frequency: 1
  - size:42, name: _onceWrap
  #365:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining _onceWrap into once
Candidates for inlining (size=1):
  #365:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining $getMaxListeners into once
Inlining small function(s) at call site #549:JSCall
Inlining get into once
[optimizing 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)> - took 2.745, 1.695, 0.041 ms]
[completed optimizing 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)>]
[marking 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/11 (90%), generic ICs: 0/11 (0%)]
[compiling method 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)> using TurboFan]
Candidates for inlining (size=2):
  #79:JSCall, frequency: 1
  - size:167, name: nextTick
  #50:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining nextTick into emitReadable
Candidates for inlining (size=4):
  #370:JSCall, frequency: 1
  - size:42, name: push
  #358:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #343:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #50:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining push into emitReadable
Candidates for inlining (size=3):
  #358:JSConstruct, frequency: 1
  - size:34, name: TickObject
  #343:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #50:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining TickObject into emitReadable
Candidates for inlining (size=2):
  #343:JSCall, frequency: 1
  - size:27, name: initTriggerId
  #50:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining initTriggerId into emitReadable
Candidates for inlining (size=1):
  #50:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into emitReadable
[optimizing 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)> - took 3.458, 2.131, 0.046 ms]
[completed optimizing 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)>]
[deoptimizing (DEOPT eager): begin 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> (opt #14) @4, FP to SP delta: 16, caller sp: 0x7ffeefbfdb80]
            ;;; deoptimize at <internal/linkedlist.js:16:12>, wrong map
  reading input frame remove => bytecode_offset=0, args=2, height=2; inputs:
      0: 0x229d4fe9fab1 ; [fp - 16] 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)>
      1: 0x229d4fe9ef61 ; [fp + 24] 0x229d4fe9ef61 <Object map = 0x229de8126489>
      2: 0x229d0931a6c1 ; [fp + 16] 0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>
      3: 0x229d4fea0451 ; [fp - 8] 0x229d4fea0451 <FixedArray[5]>
      4: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame remove => bytecode_offset=0, height=16
    0x7ffeefbfdb78: [top + 80] <- 0x229d4fe9ef61 ;  0x229d4fe9ef61 <Object map = 0x229de8126489>  (input #1)
    0x7ffeefbfdb70: [top + 72] <- 0x229d0931a6c1 ;  0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>  (input #2)
    -------------------------
    0x7ffeefbfdb68: [top + 64] <- 0xc4cc38f45fc ;  caller's pc
    0x7ffeefbfdb60: [top + 56] <- 0x7ffeefbfdb88 ;  caller's fp
    0x7ffeefbfdb58: [top + 48] <- 0x229d4fea0451 ;  context    0x229d4fea0451 <FixedArray[5]>  (input #3)
    0x7ffeefbfdb50: [top + 40] <- 0x229d4fe9fab1 ;  function    0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)>  (input #0)
    0x7ffeefbfdb48: [top + 32] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbfdb40: [top + 24] <- 0x229d3a3e7869 ;  bytecode array 0x229d3a3e7869 <BytecodeArray[53]>  (input #0)
    0x7ffeefbfdb38: [top + 16] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbfdb30: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbfdb28: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
[deoptimizing (eager): end 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> @4 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbfdb80, state=TOS_REGISTER, took 3.029 ms]
[removing optimized code for: 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)>]
[deoptimizing (DEOPT eager): begin 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)> (opt #23) @29, FP to SP delta: 48, caller sp: 0x7ffeefbf4870]
            ;;; deoptimize at <timers.js:159:22> inlined at <timers.js:149:3>, wrong map
  reading input frame exports._unrefActive => bytecode_offset=0, args=2, height=4; inputs:
      0: 0x229d18dccf69 ; [fp - 16] 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)>
      1: 0x229d4feb20e9 ; [fp + 24] 0x229d4feb20e9 <Object map = 0x229de81295b1>
      2: 0x229d0931a6c1 ; [fp + 16] 0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>
      3: 0x229ddc3ed099 ; [fp - 8] 0x229ddc3ed099 <FixedArray[48]>
      4: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame exports._unrefActive => bytecode_offset=0, height=32
    0x7ffeefbf4868: [top + 96] <- 0x229d4feb20e9 ;  0x229d4feb20e9 <Object map = 0x229de81295b1>  (input #1)
    0x7ffeefbf4860: [top + 88] <- 0x229d0931a6c1 ;  0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>  (input #2)
    -------------------------
    0x7ffeefbf4858: [top + 80] <- 0xc4cc39b168a ;  caller's pc
    0x7ffeefbf4850: [top + 72] <- 0x7ffeefbf48d8 ;  caller's fp
    0x7ffeefbf4848: [top + 64] <- 0x229ddc3ed099 ;  context    0x229ddc3ed099 <FixedArray[48]>  (input #3)
    0x7ffeefbf4840: [top + 56] <- 0x229d18dccf69 ;  function    0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)>  (input #0)
    0x7ffeefbf4838: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4830: [top + 40] <- 0x229d3a3e66d1 ;  bytecode array 0x229d3a3e66d1 <BytecodeArray[15]>  (input #0)
    0x7ffeefbf4828: [top + 32] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf4820: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbf4818: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf4810: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4808: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
[deoptimizing (eager): end 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)> @29 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4870, state=TOS_REGISTER, took 3.984 ms]
[removing optimized code for: 0x229d18dccf69 <JSFunction exports._unrefActive (sfi = 0x229d18dc5529)>]
[deoptimizing (DEOPT eager): begin 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> (opt #68) @29, FP to SP delta: 48, caller sp: 0x7ffeefbf47f8]
            ;;; deoptimize at <timers.js:159:22>, wrong map
  reading input frame insert => bytecode_offset=0, args=3, height=9; inputs:
      0: 0x229d4fea9431 ; [fp - 16] 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d0931a6c1 ; [fp + 24] 0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>
      3: 0x229df91023b1 ; [fp + 16] 0x229df91023b1 <true>
      4: 0x229ddc3ed099 ; [fp - 8] 0x229ddc3ed099 <FixedArray[48]>
      5: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame insert => bytecode_offset=0, height=72
    0x7ffeefbf47f0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf47e8: [top + 136] <- 0x229d0931a6c1 ;  0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>  (input #2)
    0x7ffeefbf47e0: [top + 128] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #3)
    -------------------------
    0x7ffeefbf47d8: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf47d0: [top + 112] <- 0x7ffeefbf4800 ;  caller's fp
    0x7ffeefbf47c8: [top + 104] <- 0x229ddc3ed099 ;  context    0x229ddc3ed099 <FixedArray[48]>  (input #4)
    0x7ffeefbf47c0: [top + 96] <- 0x229d4fea9431 ;  function    0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>  (input #0)
    0x7ffeefbf47b8: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf47b0: [top + 80] <- 0x229d3a3e6921 ;  bytecode array 0x229d3a3e6921 <BytecodeArray[273]>  (input #0)
    0x7ffeefbf47a8: [top + 72] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf47a0: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf4798: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4790: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4788: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4780: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4778: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4770: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4768: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4760: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (eager): end 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> @29 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf47f8, state=TOS_REGISTER, took 5.404 ms]
[removing optimized code for: 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>]
[deoptimizing (DEOPT eager): begin 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> (opt #10) @12, FP to SP delta: 24, caller sp: 0x7ffeefbf4750]
            ;;; deoptimize at <internal/linkedlist.js:30:12>, wrong map
  reading input frame append => bytecode_offset=0, args=3, height=2; inputs:
      0: 0x229ddc3d6101 ; [fp - 16] 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)>
      1: 0x229d4fe9ef61 ; [fp + 32] 0x229d4fe9ef61 <Object map = 0x229de8126489>
      2: 0x229df9cd9031 ; [fp + 24] 0x229df9cd9031 <TimersList map = 0x229d9a5b3fd9>
      3: 0x229d0931a6c1 ; [fp + 16] 0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>
      4: 0x229d4fea0451 ; [fp - 8] 0x229d4fea0451 <FixedArray[5]>
      5: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame append => bytecode_offset=0, height=16
    0x7ffeefbf4748: [top + 88] <- 0x229d4fe9ef61 ;  0x229d4fe9ef61 <Object map = 0x229de8126489>  (input #1)
    0x7ffeefbf4740: [top + 80] <- 0x229df9cd9031 ;  0x229df9cd9031 <TimersList map = 0x229d9a5b3fd9>  (input #2)
    0x7ffeefbf4738: [top + 72] <- 0x229d0931a6c1 ;  0x229d0931a6c1 <JSFunction utcDate (sfi = 0x229d269d8d61)>  (input #3)
    -------------------------
    0x7ffeefbf4730: [top + 64] <- 0xc4cc38f474a ;  caller's pc
    0x7ffeefbf4728: [top + 56] <- 0x7ffeefbf4758 ;  caller's fp
    0x7ffeefbf4720: [top + 48] <- 0x229d4fea0451 ;  context    0x229d4fea0451 <FixedArray[5]>  (input #4)
    0x7ffeefbf4718: [top + 40] <- 0x229ddc3d6101 ;  function    0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)>  (input #0)
    0x7ffeefbf4710: [top + 32] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4708: [top + 24] <- 0x229d18dbdbb9 ;  bytecode array 0x229d18dbdbb9 <BytecodeArray[55]>  (input #0)
    0x7ffeefbf4700: [top + 16] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf46f8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf46f0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
[deoptimizing (eager): end 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> @12 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4750, state=TOS_REGISTER, took 3.283 ms]
[removing optimized code for: 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)>]
[marking 0x229d6d159489 <JSFunction accepts (sfi = 0x229d6d156c61)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 6/8 (75%), generic ICs: 0/8 (0%)]
[compiling method 0x229d6d159489 <JSFunction accepts (sfi = 0x229d6d156c61)> using TurboFan]
Candidates for inlining (size=2):
  #57:JSCall, frequency: 1
  - size:21, name: mediaType
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
Inlining mediaType into accepts
Candidates for inlining (size=2):
  #101:JSCall, frequency: 1
  - size:26, name: mediaTypes
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
Inlining mediaTypes into accepts
Candidates for inlining (size=3):
  #170:JSCall, frequency: 1
  - size:59, name: preferredMediaTypes
  #144:JSCall, frequency: 1
  - size:81, name: loadModule
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
Inlining preferredMediaTypes into accepts
Candidates for inlining (size=3):
  #217:JSCall, frequency: 1
  - size:65, name: parseAccept
  #144:JSCall, frequency: 1
  - size:81, name: loadModule
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
Inlining parseAccept into accepts
Candidates for inlining (size=4):
  #362:JSCall, frequency: 1
  - size:184, name: parseMediaType
  #308:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
  #144:JSCall, frequency: 1
  - size:81, name: loadModule
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
Inlining parseMediaType into accepts
Candidates for inlining (size=3):
  #308:JSCall, frequency: 1
  - size:84, name: splitMediaTypes
  #144:JSCall, frequency: 1
  - size:81, name: loadModule
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
Inlining splitMediaTypes into accepts
Candidates for inlining (size=2):
  #144:JSCall, frequency: 1
  - size:81, name: loadModule
  #43:JSCall, frequency: 1
  - size:41, name: negotiator
[optimizing 0x229d6d159489 <JSFunction accepts (sfi = 0x229d6d156c61)> - took 5.720, 4.080, 0.044 ms]
[completed optimizing 0x229d6d159489 <JSFunction accepts (sfi = 0x229d6d156c61)>]
[marking 0x229d4fe9e7d1 <JSFunction initTriggerId (sfi = 0x229d18dad201)> for optimized recompilation, reason: small function, ICs with typeinfo: 4/4 (100%), generic ICs: 0/4 (0%)]
[compiling method 0x229d4fe9e7d1 <JSFunction initTriggerId (sfi = 0x229d18dad201)> using TurboFan]
[marking 0x229d3026ed11 <JSFunction out.(anonymous function) (sfi = 0x229d3026e8c1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 2/5 (40%), generic ICs: 1/5 (20%)]
[optimizing 0x229d4fe9e7d1 <JSFunction initTriggerId (sfi = 0x229d18dad201)> - took 0.111, 0.332, 0.008 ms]
[completed optimizing 0x229d4fe9e7d1 <JSFunction initTriggerId (sfi = 0x229d18dad201)>]
[compiling method 0x229d3026ed11 <JSFunction out.(anonymous function) (sfi = 0x229d3026e8c1)> using TurboFan]
[optimizing 0x229d3026ed11 <JSFunction out.(anonymous function) (sfi = 0x229d3026e8c1)> - took 0.059, 0.278, 0.005 ms]
[completed optimizing 0x229d3026ed11 <JSFunction out.(anonymous function) (sfi = 0x229d3026e8c1)>]
[marking 0x229d269df671 <JSFunction getHeader (sfi = 0x229d269dd251)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 6/9 (66%), generic ICs: 3/9 (33%)]
[compiling method 0x229d269df671 <JSFunction getHeader (sfi = 0x229d269dd251)> using TurboFan]
[optimizing 0x229d269df671 <JSFunction getHeader (sfi = 0x229d269dd251)> - took 0.115, 0.427, 0.014 ms]
[completed optimizing 0x229d269df671 <JSFunction getHeader (sfi = 0x229d269dd251)>]
[marking 0x229d1e5c22d9 <JSFunction resume_ (sfi = 0x229d18dfa869)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 13/13 (100%), generic ICs: 0/13 (0%)]
[compiling method 0x229d1e5c22d9 <JSFunction resume_ (sfi = 0x229d18dfa869)> using TurboFan]
Candidates for inlining (size=2):
  #76:JSCall, frequency: 1
  - size:29, name: flow
  #36:JSCall, frequency: 0.936736
  - size:0, name: debugs.(anonymous function)
Inlining flow into resume_
Candidates for inlining (size=2):
  #169:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #36:JSCall, frequency: 0.936736
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into resume_
Candidates for inlining (size=1):
  #36:JSCall, frequency: 0.936736
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into resume_
[optimizing 0x229d1e5c22d9 <JSFunction resume_ (sfi = 0x229d18dfa869)> - took 1.543, 0.927, 0.036 ms]
[completed optimizing 0x229d1e5c22d9 <JSFunction resume_ (sfi = 0x229d18dfa869)>]
[marking 0x229d6d15d9a1 <JSFunction _handle (sfi = 0x229db9c92049)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 9/12 (75%), generic ICs: 1/12 (8%)]
[compiling method 0x229d6d15d9a1 <JSFunction _handle (sfi = 0x229db9c92049)> using TurboFan]
[optimizing 0x229d6d15d9a1 <JSFunction _handle (sfi = 0x229db9c92049)> - took 0.139, 0.459, 0.012 ms]
[completed optimizing 0x229d6d15d9a1 <JSFunction _handle (sfi = 0x229db9c92049)>]
[marking 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> for optimized recompilation, reason: small function, ICs with typeinfo: 9/9 (100%), generic ICs: 2/9 (22%)]
[compiling method 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> using TurboFan]
Candidates for inlining (size=1):
  #37:JSCall, frequency: 0.999668
  - size:42, name: remove
Inlining remove into append
[optimizing 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)> - took 0.606, 1.251, 0.024 ms]
[completed optimizing 0x229ddc3d6101 <JSFunction append (sfi = 0x229d18dbb9d1)>]
[marking 0x229d661c9ed1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d661d04f9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[marking 0x229d661d5309 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d661dcc21 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d661d04f9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.149, 0.919, 0.022 ms]
[completed optimizing 0x229d661d04f9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[optimizing 0x229d661dcc21 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.465, 0.562, 0.009 ms]
[completed optimizing 0x229d661dcc21 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/10 (100%), generic ICs: 0/10 (0%)]
[marking 0x229d2a158631 <JSFunction getType (sfi = 0x229d1ac02fc1)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)> using TurboFan]
Candidates for inlining (size=1):
  #73:JSConstruct, frequency: 0.500053
  - size:16, name: Negotiator
Inlining Negotiator into negotiator
[compiling method 0x229d2a159821 <JSFunction getType (sfi = 0x229d1ac02fc1)> using TurboFan]
[optimizing 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)> - took 0.643, 0.723, 0.016 ms]
[completed optimizing 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)>]
[optimizing 0x229d2a159821 <JSFunction getType (sfi = 0x229d1ac02fc1)> - took 0.054, 0.321, 0.005 ms]
[completed optimizing 0x229d2a159821 <JSFunction getType (sfi = 0x229d1ac02fc1)>]
[marking 0x229d418ce451 <JSFunction getPriority (sfi = 0x229d1ac02ef9)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d418d4b79 <JSFunction getPriority (sfi = 0x229d1ac02ef9)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d418d4b79 <JSFunction getPriority (sfi = 0x229d1ac02ef9)> - took 1.498, 2.999, 0.034 ms]
[completed optimizing 0x229d418d4b79 <JSFunction getPriority (sfi = 0x229d1ac02ef9)>]
[marking 0x229df9c90171 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229df9c97aa1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500169
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500169
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500169
  - size:157, name: 
  #150:JSCall, frequency: 0.500169
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499831
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500169
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500169
  - size:157, name: 
  #150:JSCall, frequency: 0.500169
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499831
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500169
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500169
  - size:157, name: 
  #150:JSCall, frequency: 0.500169
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499831
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500169
  - size:157, name: 
  #150:JSCall, frequency: 0.500169
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499831
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500169
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499831
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499831
  - size:85, name: endHandlerTimer
[marking 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> for optimized recompilation, reason: small function, ICs with typeinfo: 10/10 (100%), generic ICs: 2/10 (20%)]
[compiling method 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> using TurboFan]
[optimizing 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)> - took 0.159, 0.921, 0.011 ms]
[completed optimizing 0x229d4fe9fab1 <JSFunction remove (sfi = 0x229d18dbb909)>]
[optimizing 0x229df9c97aa1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.154, 5.111, 0.100 ms]
[completed optimizing 0x229df9c97aa1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking dependent code 0xc4cc39d9361 (opt #60) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc3939901 (opt #100) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc39d8aa1 (opt #58) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc393cae1 (opt #103) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc39cafe1 (opt #50) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc39c06c1 (opt #46) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc39bec21 (opt #45) for deoptimization, reason: allocation-site-tenuring-changed]
[marking dependent code 0xc4cc39f17a1 (opt #75) for deoptimization, reason: allocation-site-tenuring-changed]
[deoptimize marked code in all contexts]
[deoptimizer unlinked: negotiator / 229d3a387369]
[deoptimizer unlinked: find / 229db9c8f981]
[deoptimizer unlinked: endHandlerTimer / 229d6d159b91]
[deoptimizer unlinked: startHandlerTimer / 229d6d159b49]
[deoptimizer unlinked: parserOnHeadersComplete / 229d48efd199]
[deoptimizer unlinked: parserOnMessageComplete / 229d48efd229]
[deoptimizer unlinked: _run / 229d6d15da31]
[deoptimizing (DEOPT lazy): begin 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> (opt #50) @58, FP to SP delta: 72, caller sp: 0x7ffeefbf5700]
  reading input frame parserOnHeadersComplete => bytecode_offset=196, args=10, height=8; inputs:
      0: 0x229d48efd199 ; [fp - 16] 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)>
      1: 0x229d18df1e49 ; [fp + 88] 0x229d18df1e49 <HTTPParser map = 0x229d9a5b4f51>
      2: 0x100000000 ; [fp + 80] 1
      3: 0x100000000 ; [fp + 72] 1
      4: 0x229dfd282311 ; [fp + 64] 0x229dfd282311 <JSArray[4]>
      5: 0x100000000 ; [fp + 56] 1
      6: 0x229dfd2822f1 ; [fp + 48] 0x229dfd2822f1 <String[2]: /c>
      7: 0x229df9102311 ; [fp + 40] 0x229df9102311 <undefined>
      8: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      9: 0x229df9102421 ; [fp + 24] 0x229df9102421 <false>
     10: 0x229df91023b1 ; [fp + 16] 0x229df91023b1 <true>
     11: 0x229d48efa091 ; [fp - 8] 0x229d48efa091 <FixedArray[23]>
     12: 0x229d18df1e49 ; [fp + 88] 0x229d18df1e49 <HTTPParser map = 0x229d9a5b4f51>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     17: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     18: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     19: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  reading input frame _addHeaderLines => bytecode_offset=53, args=3, height=8; inputs:
      0: 0x229d48efd709 ; (literal 20) 0x229d48efd709 <JSFunction _addHeaderLines (sfi = 0x229d269d9b89)>
      1: 0x229dfd282201 ; [fp - 24] 0x229dfd282201 <IncomingMessage map = 0x229d9a5b6399>
      2: 0x229dfd282311 ; [fp + 64] 0x229dfd282311 <JSArray[4]>
      3: 4 ; (int) [fp - 32] 
      4: 0x229d48ed03f1 ; (literal 10) 0x229d48ed03f1 <FixedArray[7]>
      5: 0x229dfd2f1771 ; [fp - 40] 0x229dfd2f1771 <Object map = 0x229de81023b9>
      6: 0 ; (int) [fp - 48] 
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame parserOnHeadersComplete => bytecode_offset=196, height=56
    0x7ffeefbf56f8: [top + 184] <- 0x229d18df1e49 ;  0x229d18df1e49 <HTTPParser map = 0x229d9a5b4f51>  (input #1)
    0x7ffeefbf56f0: [top + 176] <- 0x100000000 ;  1  (input #2)
    0x7ffeefbf56e8: [top + 168] <- 0x100000000 ;  1  (input #3)
    0x7ffeefbf56e0: [top + 160] <- 0x229dfd282311 ;  0x229dfd282311 <JSArray[4]>  (input #4)
    0x7ffeefbf56d8: [top + 152] <- 0x100000000 ;  1  (input #5)
    0x7ffeefbf56d0: [top + 144] <- 0x229dfd2822f1 ;  0x229dfd2822f1 <String[2]: /c>  (input #6)
    0x7ffeefbf56c8: [top + 136] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf56c0: [top + 128] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #8)
    0x7ffeefbf56b8: [top + 120] <- 0x229df9102421 ;  0x229df9102421 <false>  (input #9)
    0x7ffeefbf56b0: [top + 112] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #10)
    -------------------------
    0x7ffeefbf56a8: [top + 104] <- 0xc4cc38be479 ;  caller's pc
    0x7ffeefbf56a0: [top + 96] <- 0x7ffeefbf5718 ;  caller's fp
    0x7ffeefbf5698: [top + 88] <- 0x229d48efa091 ;  context    0x229d48efa091 <FixedArray[23]>  (input #11)
    0x7ffeefbf5690: [top + 80] <- 0x229d48efd199 ;  function    0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)>  (input #0)
    0x7ffeefbf5688: [top + 72] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5680: [top + 64] <- 0x229d3a3eac61 ;  bytecode array 0x229d3a3eac61 <BytecodeArray[340]>  (input #0)
    0x7ffeefbf5678: [top + 56] <- 0xf900000000 ;  bytecode offset @ 196
    -------------------------
    0x7ffeefbf5670: [top + 48] <- 0x229d18df1e49 ;  0x229d18df1e49 <HTTPParser map = 0x229d9a5b4f51>  (input #12)
    0x7ffeefbf5668: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf5660: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf5658: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf5650: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
    0x7ffeefbf5648: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #17)
    0x7ffeefbf5640: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #18)
  translating interpreted frame _addHeaderLines => bytecode_offset=53, height=64
    0x7ffeefbf5638: [top + 136] <- 0x229dfd282201 ;  0x229dfd282201 <IncomingMessage map = 0x229d9a5b6399>  (input #1)
    0x7ffeefbf5630: [top + 128] <- 0x229dfd282311 ;  0x229dfd282311 <JSArray[4]>  (input #2)
    0x7ffeefbf5628: [top + 120] <- 0x400000000 ;  4  (input #3)
    -------------------------
    0x7ffeefbf5620: [top + 112] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf5618: [top + 104] <- 0x7ffeefbf56a0 ;  caller's fp
    0x7ffeefbf5610: [top + 96] <- 0x229d48ed03f1 ;  context    0x229d48ed03f1 <FixedArray[7]>  (input #4)
    0x7ffeefbf5608: [top + 88] <- 0x229d48efd709 ;  function    0x229d48efd709 <JSFunction _addHeaderLines (sfi = 0x229d269d9b89)>  (input #0)
    0x7ffeefbf5600: [top + 80] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf55f8: [top + 72] <- 0x229d3a3ec419 ;  bytecode array 0x229d3a3ec419 <BytecodeArray[100]>  (input #0)
    0x7ffeefbf55f0: [top + 64] <- 0x6a00000000 ;  bytecode offset @ 53
    -------------------------
    0x7ffeefbf55e8: [top + 56] <- 0x229dfd2f1771 ;  0x229dfd2f1771 <Object map = 0x229de81023b9>  (input #5)
    0x7ffeefbf55e0: [top + 48] <- 0x00000000 ;  0  (input #6)
    0x7ffeefbf55d8: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf55d0: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf55c8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf55c0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf55b8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf55b0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
[deoptimizing (lazy): end 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> @58 => node=53, pc=0xc4cc38c01e0, caller sp=0x7ffeefbf5700, state=TOS_REGISTER, took 9.880 ms]
[marking 0x229dc17dd231 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229dc17dd231 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229dc17dd231 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.469, 0.456, 0.012 ms]
[completed optimizing 0x229dc17dd231 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d3a686531 <JSFunction sort (sfi = 0x229df910cf79)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 2/4 (50%), generic ICs: 0/4 (0%)]
[compiling method 0x229d3a686531 <JSFunction sort (sfi = 0x229df910cf79)> using TurboFan]
[optimizing 0x229d3a686531 <JSFunction sort (sfi = 0x229df910cf79)> - took 0.086, 0.359, 0.010 ms]
[completed optimizing 0x229d3a686531 <JSFunction sort (sfi = 0x229df910cf79)>]
[marking 0x229d48efd709 <JSFunction _addHeaderLines (sfi = 0x229d269d9b89)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/13 (84%), generic ICs: 0/13 (0%)]
[compiling method 0x229d48efd709 <JSFunction _addHeaderLines (sfi = 0x229d269d9b89)> using TurboFan]
Candidates for inlining (size=1):
  #105:JSCall, frequency: 0.535426
  - size:116, name: _addHeaderLine
Inlining _addHeaderLine into _addHeaderLines
[optimizing 0x229d48efd709 <JSFunction _addHeaderLines (sfi = 0x229d269d9b89)> - took 0.544, 1.093, 0.030 ms]
[completed optimizing 0x229d48efd709 <JSFunction _addHeaderLines (sfi = 0x229d269d9b89)>]
[deoptimize marked code in all contexts]
[marking 0x229ddff86121 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229ddff8dd79 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229ddff8dd79 <JSFunction f (sfi = 0x229d08f55139)> - took 0.110, 0.470, 0.021 ms]
[completed optimizing 0x229ddff8dd79 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d18db5629 <JSFunction hrtime (sfi = 0x229d18db51e9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 27/29 (93%), generic ICs: 0/29 (0%)]
[compiling method 0x229d18db5629 <JSFunction hrtime (sfi = 0x229d18db51e9)> using TurboFan]
[optimizing 0x229d18db5629 <JSFunction hrtime (sfi = 0x229d18db51e9)> - took 0.307, 0.765, 0.015 ms]
[completed optimizing 0x229d18db5629 <JSFunction hrtime (sfi = 0x229d18db51e9)>]
[marking 0x229d0e3a50c9 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d0e3ad0f9 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500226
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500226
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500226
  - size:157, name: 
  #150:JSCall, frequency: 0.500226
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499774
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500226
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500226
  - size:157, name: 
  #150:JSCall, frequency: 0.500226
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499774
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500226
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500226
  - size:157, name: 
  #150:JSCall, frequency: 0.500226
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499774
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500226
  - size:157, name: 
  #150:JSCall, frequency: 0.500226
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499774
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500226
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499774
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499774
  - size:85, name: endHandlerTimer
[optimizing 0x229d0e3ad0f9 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.159, 4.895, 0.055 ms]
[completed optimizing 0x229d0e3ad0f9 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d4fea0fb1 <JSFunction byteLength (sfi = 0x229d18d934a9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 19/75 (25%), generic ICs: 1/75 (1%)]
[compiling method 0x229d4fea0fb1 <JSFunction byteLength (sfi = 0x229d18d934a9)> using TurboFan]
[optimizing 0x229d4fea0fb1 <JSFunction byteLength (sfi = 0x229d18d934a9)> - took 0.277, 0.889, 0.011 ms]
[completed optimizing 0x229d4fea0fb1 <JSFunction byteLength (sfi = 0x229d18d934a9)>]
[marking 0x229dfe1f5ba1 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229dfe1f6d81 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[marking 0x229d7df54719 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d7df54719 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229dfe1f6d81 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.379, 1.892, 0.076 ms]
[completed optimizing 0x229dfe1f6d81 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[optimizing 0x229d7df54719 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.065, 0.273, 0.005 ms]
[completed optimizing 0x229d7df54719 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d7df6bc09 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d7df72b39 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d7df72b39 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.484, 2.809, 0.033 ms]
[completed optimizing 0x229d7df72b39 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d269e1001 <JSFunction write (sfi = 0x229d269dd7c9)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d269e1001 <JSFunction write (sfi = 0x229d269dd7c9)> using TurboFan]
Candidates for inlining (size=1):
  #18:JSCall, frequency: 1
  - size:206, name: write_
Inlining write_ into write
Candidates for inlining (size=4):
  #273:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #252:JSCall, frequency: 1
  - size:137, name: _send
  #211:JSCall, frequency: 1
  - size:167, name: nextTick
  #191:JSCall, frequency: 1
  - size:14, name: Writable.cork
Inlining debugs.(anonymous function) into write
Candidates for inlining (size=3):
  #252:JSCall, frequency: 1
  - size:137, name: _send
  #211:JSCall, frequency: 1
  - size:167, name: nextTick
  #191:JSCall, frequency: 1
  - size:14, name: Writable.cork
Inlining _send into write
Candidates for inlining (size=3):
  #425:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #211:JSCall, frequency: 1
  - size:167, name: nextTick
  #191:JSCall, frequency: 1
  - size:14, name: Writable.cork
Inlining _writeRaw into write
Candidates for inlining (size=6):
  #211:JSCall, frequency: 1
  - size:167, name: nextTick
  #191:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #603:JSCall, frequency: 0.59021
  - size:33, name: Socket.write
  #589:JSCall, frequency: 0.40979
  - size:169, name: internalNextTick
  #635:JSCall, frequency: unknown
  - size:27, name: get
  #623:JSCall, frequency: unknown
  - size:27, name: get
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.663714
  - size:25, name: digest
  #152:JSCall, frequency: 0.663714
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.663714
  - size:25, name: digest
  #152:JSCall, frequency: 0.663714
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.663714
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d269e1001 <JSFunction write (sfi = 0x229d269dd7c9)> - took 4.012, 2.199, 0.029 ms]
[completed optimizing 0x229d269e1001 <JSFunction write (sfi = 0x229d269dd7c9)>]
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.776, 2.199, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #116) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4bf0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de8799db1 ; [fp - 24] 0x229de8799db1 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}5665>
      3: 0x229de8799dd9 ; [fp - 32] 0x229de8799dd9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4be8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4be0: [top + 136] <- 0x229de8799db1 ;  0x229de8799db1 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}5665>  (input #2)
    0x7ffeefbf4bd8: [top + 128] <- 0x229de8799dd9 ;  0x229de8799dd9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4bd0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4bc8: [top + 112] <- 0x7ffeefbf4bf8 ;  caller's fp
    0x7ffeefbf4bc0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4bb8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4bb0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ba8: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4ba0: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4b98: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4b90: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4b88: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4b80: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4b78: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4b70: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4b68: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4b60: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4b58: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4bf0, state=TOS_REGISTER, took 15.289 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d18dccfc9 <JSFunction exports.unenroll (sfi = 0x229d18dc55f1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/13 (30%), generic ICs: 0/13 (0%)]
[compiling method 0x229d18dccfc9 <JSFunction exports.unenroll (sfi = 0x229d18dc55f1)> using TurboFan]
Candidates for inlining (size=1):
  #70:JSCall, frequency: 1
  - size:50, name: reuse
Inlining reuse into exports.unenroll
Candidates for inlining (size=1):
  #143:JSCall, frequency: 1
  - size:42, name: remove
Inlining remove into exports.unenroll
[optimizing 0x229d18dccfc9 <JSFunction exports.unenroll (sfi = 0x229d18dc55f1)> - took 0.924, 1.281, 0.032 ms]
[completed optimizing 0x229d18dccfc9 <JSFunction exports.unenroll (sfi = 0x229d18dc55f1)>]
[marking 0x229d467457a1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d4674d779 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d4674d779 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.116, 0.591, 0.009 ms]
[completed optimizing 0x229d4674d779 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d2a7e54c9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d2a7e66a9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d2a7e66a9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.148, 0.939, 0.012 ms]
[completed optimizing 0x229d2a7e66a9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 33/47 (70%), generic ICs: 1/47 (2%)]
[compiling method 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> using TurboFan]
Candidates for inlining (size=2):
  #183:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #55:JSConstruct, frequency: 1
  - size:130, name: IncomingMessage
Inlining _addHeaderLines into parserOnHeadersComplete
Candidates for inlining (size=2):
  #55:JSConstruct, frequency: 1
  - size:130, name: IncomingMessage
  #467:JSCall, frequency: 0.536556
  - size:116, name: _addHeaderLine
Inlining IncomingMessage into parserOnHeadersComplete
Candidates for inlining (size=2):
  #540:JSCall, frequency: 1
  - size:63, name: Readable
  #467:JSCall, frequency: 0.536556
  - size:116, name: _addHeaderLine
Inlining Readable into parserOnHeadersComplete
Inlining small function(s) at call site #856:JSCall
Inlining Stream into parserOnHeadersComplete
Inlining small function(s) at call site #912:JSCall
Inlining EventEmitter into parserOnHeadersComplete
Candidates for inlining (size=2):
  #941:JSCall, frequency: 1
  - size:83, name: EventEmitter.init
  #467:JSCall, frequency: 0.536556
  - size:116, name: _addHeaderLine
Inlining EventEmitter.init into parserOnHeadersComplete
Not considering call site #982:JSCall, because inlining depth 6 exceeds maximum allowed level 5
Candidates for inlining (size=1):
  #467:JSCall, frequency: 0.536556
  - size:116, name: _addHeaderLine
Inlining _addHeaderLine into parserOnHeadersComplete
[optimizing 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)> - took 3.330, 3.799, 0.076 ms]
[completed optimizing 0x229d48efd199 <JSFunction parserOnHeadersComplete (sfi = 0x229d269d6ef9)>]
[marking 0x229d0a4756f9 <JSFunction Yallist.unshiftNode (sfi = 0x229d0a473cc1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 15/16 (93%), generic ICs: 0/16 (0%)]
[compiling method 0x229d0a4756f9 <JSFunction Yallist.unshiftNode (sfi = 0x229d0a473cc1)> using TurboFan]
Candidates for inlining (size=1):
  #48:JSCall, frequency: 0.810467
  - size:100, name: Yallist.removeNode
Inlining Yallist.removeNode into Yallist.unshiftNode
[optimizing 0x229d0a4756f9 <JSFunction Yallist.unshiftNode (sfi = 0x229d0a473cc1)> - took 0.623, 0.754, 0.043 ms]
[completed optimizing 0x229d0a4756f9 <JSFunction Yallist.unshiftNode (sfi = 0x229d0a473cc1)>]
[marking 0x229d48ef9139 <JSFunction ServerResponse (sfi = 0x229d269e3429)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/18 (61%), generic ICs: 0/18 (0%)]
[compiling method 0x229d48ef9139 <JSFunction ServerResponse (sfi = 0x229d269e3429)> using TurboFan]
Candidates for inlining (size=1):
  #32:JSCall, frequency: 1
  - size:150, name: OutgoingMessage
Inlining OutgoingMessage into ServerResponse
Inlining small function(s) at call site #207:JSCall
Inlining Stream into ServerResponse
Inlining small function(s) at call site #355:JSCall
Inlining EventEmitter into ServerResponse
Candidates for inlining (size=1):
  #384:JSCall, frequency: 1
  - size:83, name: EventEmitter.init
Inlining EventEmitter.init into ServerResponse
[optimizing 0x229d48ef9139 <JSFunction ServerResponse (sfi = 0x229d269e3429)> - took 1.301, 2.008, 0.069 ms]
[completed optimizing 0x229d48ef9139 <JSFunction ServerResponse (sfi = 0x229d269e3429)>]
[marking 0x229de801b4d1 <JSFunction onRequest (sfi = 0x229d3a3b7d69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/10 (70%), generic ICs: 0/10 (0%)]
[compiling method 0x229de801b4d1 <JSFunction onRequest (sfi = 0x229d3a3b7d69)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:52, name: _handle
  #51:JSCall, frequency: 1
  - size:111, name: _setupRequest
Inlining _handle into onRequest
Candidates for inlining (size=1):
  #51:JSCall, frequency: 1
  - size:111, name: _setupRequest
Inlining _setupRequest into onRequest
Candidates for inlining (size=1):
  #267:JSCall, frequency: 1
  - size:128, name: header
Inlining header into onRequest
Candidates for inlining (size=3):
  #655:JSCall, frequency: 1
  - size:92, name: setHeader
  #612:JSCall, frequency: 1
  - size:46, name: getHeader
  #558:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining setHeader into onRequest
Candidates for inlining (size=3):
  #699:JSCall, frequency: 1
  - size:61, name: validateHeader
  #612:JSCall, frequency: 1
  - size:46, name: getHeader
  #558:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining validateHeader into onRequest
Candidates for inlining (size=4):
  #988:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
  #897:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #612:JSCall, frequency: 1
  - size:46, name: getHeader
  #558:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
[marking 0x229dadaa8201 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229dadaae801 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229de801b4d1 <JSFunction onRequest (sfi = 0x229d3a3b7d69)> - took 4.015, 3.006, 0.098 ms]
[completed optimizing 0x229de801b4d1 <JSFunction onRequest (sfi = 0x229d3a3b7d69)>]
[optimizing 0x229dadaae801 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.466, 0.420, 0.006 ms]
[completed optimizing 0x229dadaae801 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d6d15d0d1 <JSFunction restifyWriteHead (sfi = 0x229d6d15b521)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 9/17 (52%), generic ICs: 0/17 (0%)]
[compiling method 0x229d6d15d0d1 <JSFunction restifyWriteHead (sfi = 0x229d6d15b521)> using TurboFan]
[optimizing 0x229d6d15d0d1 <JSFunction restifyWriteHead (sfi = 0x229d6d15b521)> - took 0.120, 0.377, 0.012 ms]
[completed optimizing 0x229d6d15d0d1 <JSFunction restifyWriteHead (sfi = 0x229d6d15b521)>]
[marking 0x229d6d15d9e9 <JSFunction _route (sfi = 0x229db9c92111)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 3/7 (42%), generic ICs: 0/7 (0%)]
[compiling method 0x229d6d15d9e9 <JSFunction _route (sfi = 0x229db9c92111)> using TurboFan]
[optimizing 0x229d6d15d9e9 <JSFunction _route (sfi = 0x229db9c92111)> - took 0.105, 0.395, 0.011 ms]
[completed optimizing 0x229d6d15d9e9 <JSFunction _route (sfi = 0x229db9c92111)>]
[marking 0x229dfb5fe4a1 <JSFunction shallowCopy (sfi = 0x229db9c8f3d9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/5 (100%), generic ICs: 0/5 (0%)]
[compiling method 0x229dfb5fe4a1 <JSFunction shallowCopy (sfi = 0x229db9c8f3d9)> using TurboFan]
[optimizing 0x229dfb5fe4a1 <JSFunction shallowCopy (sfi = 0x229db9c8f3d9)> - took 0.100, 0.443, 0.012 ms]
[completed optimizing 0x229dfb5fe4a1 <JSFunction shallowCopy (sfi = 0x229db9c8f3d9)>]
[marking 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 8/14 (57%), generic ICs: 0/14 (0%)]
[compiling method 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)> using TurboFan]
Candidates for inlining (size=1):
  #48:JSCall, frequency: 1
  - size:101, name: Readable.on
Inlining Readable.on into socketOnWrap
Candidates for inlining (size=1):
  #150:JSCall, frequency: 1
  - size:11, name: addListener
Inlining addListener into socketOnWrap
Candidates for inlining (size=1):
  #226:JSCall, frequency: 1
  - size:230, name: _addListener
Inlining _addListener into socketOnWrap
Candidates for inlining (size=1):
  #418:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining $getMaxListeners into socketOnWrap
Inlining small function(s) at call site #510:JSCall
Inlining get into socketOnWrap
[optimizing 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)> - took 1.853, 1.520, 0.028 ms]
[completed optimizing 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)>]
[marking 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 21/33 (63%), generic ICs: 1/33 (3%)]
[compiling method 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)> using TurboFan]
Candidates for inlining (size=6):
  #144:JSCall, frequency: 1
  - size:84, name: wrapper
  #137:JSCall, frequency: 1
  - size:11, name: addListener
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into _run
Candidates for inlining (size=5):
  #137:JSCall, frequency: 1
  - size:11, name: addListener
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into _run
Candidates for inlining (size=5):
  #535:JSCall, frequency: 1
  - size:230, name: _addListener
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into _run
Candidates for inlining (size=5):
  #124:JSCall, frequency: 1
  - size:28, name: once
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
  #725:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining once into _run
Candidates for inlining (size=6):
  #816:JSCall, frequency: 1
  - size:101, name: Readable.on
  #810:JSCall, frequency: 1
  - size:42, name: _onceWrap
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
  #725:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
Inlining Readable.on into _run
Candidates for inlining (size=6):
  #865:JSCall, frequency: 1
  - size:11, name: addListener
  #810:JSCall, frequency: 1
  - size:42, name: _onceWrap
  #111:JSCall, frequency: 1
  - size:28, name: once
  #93:JSCall, frequency: 1
  - size:84, name: wrapper
  #41:JSCall, frequency: 1
  - size:16, name: nextId
  #725:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)> - took 6.756, 3.483, 0.050 ms]
[completed optimizing 0x229d6d15da31 <JSFunction _run (sfi = 0x229db9c921d9)>]
[marking 0x229d7596beb9 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d759736a9 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229dfd282a51 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.026, 4.404, 0.051 ms]
[completed optimizing 0x229dfd282a51 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d6d150121 <JSFunction nextId (sfi = 0x229d6d14e989)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d6d150121 <JSFunction nextId (sfi = 0x229d6d14e989)> using TurboFan]
[optimizing 0x229d6d150121 <JSFunction nextId (sfi = 0x229d6d14e989)> - took 0.074, 0.264, 0.008 ms]
[completed optimizing 0x229d6d150121 <JSFunction nextId (sfi = 0x229d6d14e989)>]
[marking 0x229d61ea84a9 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d61eb0471 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d61eb0471 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.642, 1.676, 0.034 ms]
[completed optimizing 0x229d61eb0471 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d3a6f2721 <JSFunction Writable.uncork (sfi = 0x229d3a6f0d31)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 0/11 (0%)]
[marking 0x229d269da921 <JSFunction read (sfi = 0x229d269d9ea9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/10 (100%), generic ICs: 0/10 (0%)]
[compiling method 0x229d3a6f2721 <JSFunction Writable.uncork (sfi = 0x229d3a6f0d31)> using TurboFan]
[compiling method 0x229d269da921 <JSFunction read (sfi = 0x229d269d9ea9)> using TurboFan]
[optimizing 0x229d3a6f2721 <JSFunction Writable.uncork (sfi = 0x229d3a6f0d31)> - took 0.127, 0.497, 0.008 ms]
[completed optimizing 0x229d3a6f2721 <JSFunction Writable.uncork (sfi = 0x229d3a6f0d31)>]
[optimizing 0x229d269da921 <JSFunction read (sfi = 0x229d269d9ea9)> - took 0.098, 0.280, 0.005 ms]
[completed optimizing 0x229d269da921 <JSFunction read (sfi = 0x229d269d9ea9)>]
[marking 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 21/25 (84%), generic ICs: 3/25 (12%)]
[compiling method 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)> using TurboFan]
Candidates for inlining (size=1):
  #90:JSCall, frequency: 1
  - size:101, name: hrtime
Inlining hrtime into endHandlerTimer
[optimizing 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)> - took 0.841, 1.677, 0.048 ms]
[completed optimizing 0x229d6d159b91 <JSFunction endHandlerTimer (sfi = 0x229d6d157fe9)>]
[marking 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 27/31 (87%), generic ICs: 5/31 (16%)]
[compiling method 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> using TurboFan]
Inlining small function(s) at call site #337:JSCall
Inlining isEmpty into insert
Candidates for inlining (size=2):
  #345:JSCall, frequency: 1.00014
  - size:11, name: ok
  #309:JSCall, frequency: 1.00014
  - size:41, name: append
Inlining ok into insert
Candidates for inlining (size=1):
  #309:JSCall, frequency: 1.00014
  - size:41, name: append
Inlining append into insert
Candidates for inlining (size=1):
  #553:JSCall, frequency: 0.999815
  - size:42, name: remove
Inlining remove into insert
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[marking 0x229d0e3f6879 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.664408
  - size:25, name: digest
  #152:JSCall, frequency: 0.664408
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.664408
  - size:25, name: digest
  #152:JSCall, frequency: 0.664408
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.664408
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> - took 1.775, 2.305, 0.033 ms]
[completed optimizing 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>]
[compiling method 0x229d0e3fdfe9 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.748, 2.222, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[optimizing 0x229d0e3fdfe9 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.497, 0.709, 0.009 ms]
[completed optimizing 0x229d0e3fdfe9 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #137) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e18]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229ded82e891 ; [fp - 24] 0x229ded82e891 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}7540>
      3: 0x229ded82e8b9 ; [fp - 32] 0x229ded82e8b9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e10: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e08: [top + 136] <- 0x229ded82e891 ;  0x229ded82e891 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}7540>  (input #2)
    0x7ffeefbf4e00: [top + 128] <- 0x229ded82e8b9 ;  0x229ded82e8b9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4df8: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4df0: [top + 112] <- 0x7ffeefbf4e20 ;  caller's fp
    0x7ffeefbf4de8: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4de0: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4dd8: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4dd0: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4dc8: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4dc0: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4db8: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4db0: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4da8: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4da0: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d98: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d90: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d88: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d80: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e18, state=TOS_REGISTER, took 14.959 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dfb5f14c1 <JSFunction get (sfi = 0x229d0a46f2b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 8/12 (66%), generic ICs: 0/12 (0%)]
[compiling method 0x229dfb5f14c1 <JSFunction get (sfi = 0x229d0a46f2b9)> using TurboFan]
Candidates for inlining (size=2):
  #74:JSCall, frequency: 0.999492
  - size:75, name: Yallist.unshiftNode
  #43:JSCall, frequency: 0.999492
  - size:65, name: isStale
Inlining Yallist.unshiftNode into get
Candidates for inlining (size=2):
  #43:JSCall, frequency: 0.999492
  - size:65, name: isStale
  #169:JSCall, frequency: 0.809661
  - size:100, name: Yallist.removeNode
Inlining isStale into get
Candidates for inlining (size=1):
  #169:JSCall, frequency: 0.809661
  - size:100, name: Yallist.removeNode
Inlining Yallist.removeNode into get
[optimizing 0x229dfb5f14c1 <JSFunction get (sfi = 0x229d0a46f2b9)> - took 1.703, 1.157, 0.060 ms]
[completed optimizing 0x229dfb5f14c1 <JSFunction get (sfi = 0x229d0a46f2b9)>]
[marking 0x229d3a6f26d9 <JSFunction Writable.cork (sfi = 0x229d3a6f0c69)> for optimized recompilation, reason: small function, ICs with typeinfo: 4/4 (100%), generic ICs: 0/4 (0%)]
[compiling method 0x229d3a6f26d9 <JSFunction Writable.cork (sfi = 0x229d3a6f0c69)> using TurboFan]
[optimizing 0x229d3a6f26d9 <JSFunction Writable.cork (sfi = 0x229d3a6f0c69)> - took 0.074, 0.239, 0.008 ms]
[completed optimizing 0x229d3a6f26d9 <JSFunction Writable.cork (sfi = 0x229d3a6f0c69)>]
[marking 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 63/137 (45%), generic ICs: 5/137 (3%)]
[compiling method 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)> using TurboFan]
Inlining small function(s) at call site #125:JSCall
Inlining LRUCache.get into find
Candidates for inlining (size=3):
  #634:JSCall, frequency: 1
  - size:67, name: get
  #70:JSCall, frequency: 1
  - size:38, name: getVersion
  #178:JSCall, frequency: 0.999507
  - size:25, name: shallowCopy
Inlining get into find
Candidates for inlining (size=4):
  #70:JSCall, frequency: 1
  - size:38, name: getVersion
  #178:JSCall, frequency: 0.999507
  - size:25, name: shallowCopy
  #847:JSCall, frequency: 0.999493
  - size:75, name: Yallist.unshiftNode
  #816:JSCall, frequency: 0.999493
  - size:65, name: isStale
Inlining getVersion into find
Candidates for inlining (size=3):
  #178:JSCall, frequency: 0.999507
  - size:25, name: shallowCopy
  #847:JSCall, frequency: 0.999493
  - size:75, name: Yallist.unshiftNode
  #816:JSCall, frequency: 0.999493
  - size:65, name: isStale
Inlining shallowCopy into find
Candidates for inlining (size=2):
  #847:JSCall, frequency: 0.999493
  - size:75, name: Yallist.unshiftNode
  #816:JSCall, frequency: 0.999493
  - size:65, name: isStale
Inlining Yallist.unshiftNode into find
Candidates for inlining (size=2):
  #816:JSCall, frequency: 0.999493
  - size:65, name: isStale
  #1100:JSCall, frequency: 0.809662
  - size:100, name: Yallist.removeNode
Inlining isStale into find
Candidates for inlining (size=1):
  #1100:JSCall, frequency: 0.809662
  - size:100, name: Yallist.removeNode
Inlining Yallist.removeNode into find
[optimizing 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)> - took 4.434, 4.450, 0.068 ms]
[completed optimizing 0x229db9c8f981 <JSFunction find (sfi = 0x229d0a47c719)>]
[marking 0x229d48efd0c1 <JSFunction readStart (sfi = 0x229d269d9931)> for optimized recompilation, reason: small function, ICs with typeinfo: 4/4 (100%), generic ICs: 0/4 (0%)]
[compiling method 0x229d48efd0c1 <JSFunction readStart (sfi = 0x229d269d9931)> using TurboFan]
Candidates for inlining (size=1):
  #42:JSCall, frequency: 1
  - size:32, name: Readable.resume
Inlining Readable.resume into readStart
Candidates for inlining (size=2):
  #107:JSCall, frequency: 0.641514
  - size:20, name: resume
  #96:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining resume into readStart
Candidates for inlining (size=2):
  #163:JSCall, frequency: 0.641514
  - size:167, name: nextTick
  #96:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining nextTick into readStart
Candidates for inlining (size=4):
  #438:JSCall, frequency: 0.641514
  - size:42, name: push
  #426:JSConstruct, frequency: 0.641514
  - size:34, name: TickObject
  #411:JSCall, frequency: 0.641514
  - size:27, name: initTriggerId
  #96:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining push into readStart
Candidates for inlining (size=3):
  #426:JSConstruct, frequency: 0.641514
  - size:34, name: TickObject
  #411:JSCall, frequency: 0.641514
  - size:27, name: initTriggerId
  #96:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining TickObject into readStart
Candidates for inlining (size=2):
  #411:JSCall, frequency: 0.641514
  - size:27, name: initTriggerId
  #96:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining initTriggerId into readStart
Candidates for inlining (size=1):
  #96:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining debugs.(anonymous function) into readStart
[optimizing 0x229d48efd0c1 <JSFunction readStart (sfi = 0x229d269d9931)> - took 4.334, 2.418, 0.036 ms]
[completed optimizing 0x229d48efd0c1 <JSFunction readStart (sfi = 0x229d269d9931)>]
[marking 0x229d3a6846c9 <JSFunction Object (sfi = 0x229df9109d81)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/4 (25%), generic ICs: 1/4 (25%)]
[compiling method 0x229d3a6846c9 <JSFunction Object (sfi = 0x229df9109d81)> using TurboFan]
[optimizing 0x229d3a6846c9 <JSFunction Object (sfi = 0x229df9109d81)> - took 0.073, 0.270, 0.006 ms]
[completed optimizing 0x229d3a6846c9 <JSFunction Object (sfi = 0x229df9109d81)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.664293
  - size:25, name: digest
  #152:JSCall, frequency: 0.664293
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.664293
  - size:25, name: digest
  #152:JSCall, frequency: 0.664293
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.664293
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[marking 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 13/13 (100%), generic ICs: 0/13 (0%)]
[compiling method 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)> using TurboFan]
Candidates for inlining (size=3):
  #108:JSCall, frequency: 1
  - size:16, name: readStart
  #80:JSCall, frequency: 1
  - size:70, name: Readable.push
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
Inlining readStart into parserOnMessageComplete
Candidates for inlining (size=3):
  #191:JSCall, frequency: 1
  - size:32, name: Readable.resume
  #80:JSCall, frequency: 1
  - size:70, name: Readable.push
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
Inlining Readable.resume into parserOnMessageComplete
Candidates for inlining (size=4):
  #80:JSCall, frequency: 1
  - size:70, name: Readable.push
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.641514
  - size:20, name: resume
  #243:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining Readable.push into parserOnMessageComplete
Candidates for inlining (size=4):
  #322:JSCall, frequency: 1
  - size:200, name: readableAddChunk
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.641514
  - size:20, name: resume
  #243:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining readableAddChunk into parserOnMessageComplete
Candidates for inlining (size=5):
  #398:JSCall, frequency: 1
  - size:23, name: needMoreData
  #369:JSCall, frequency: 1
  - size:73, name: onEofChunk
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.641514
  - size:20, name: resume
  #243:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining needMoreData into parserOnMessageComplete
Candidates for inlining (size=4):
  #369:JSCall, frequency: 1
  - size:73, name: onEofChunk
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.641514
  - size:20, name: resume
  #243:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
Inlining onEofChunk into parserOnMessageComplete
Candidates for inlining (size=4):
  #481:JSCall, frequency: 1
  - size:49, name: emitReadable
  #54:JSCall, frequency: 1
  - size:73, name: _addHeaderLines
  #253:JSCall, frequency: 0.641514
  - size:20, name: resume
  #243:JSCall, frequency: 0.641514
  - size:0, name: debugs.(anonymous function)
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.860, 2.313, 0.037 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #144) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4ee8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d6ffdd889 ; [fp - 24] 0x229d6ffdd889 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}9430>
      3: 0x229d6ffdd8b1 ; [fp - 32] 0x229d6ffdd8b1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4ee0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4ed8: [top + 136] <- 0x229d6ffdd889 ;  0x229d6ffdd889 <String[972]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}9430>  (input #2)
    0x7ffeefbf4ed0: [top + 128] <- 0x229d6ffdd8b1 ;  0x229d6ffdd8b1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4ec8: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4ec0: [top + 112] <- 0x7ffeefbf4ef0 ;  caller's fp
    0x7ffeefbf4eb8: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4eb0: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4ea8: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ea0: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e98: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e90: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e88: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e80: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e78: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e70: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e68: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4e60: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4e58: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4e50: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4ee8, state=TOS_REGISTER, took 15.127 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[optimizing 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)> - took 5.601, 1.167, 0.023 ms]
[completed optimizing 0x229d48efd229 <JSFunction parserOnMessageComplete (sfi = 0x229d269d7089)>]
[marking 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/10 (100%), generic ICs: 0/10 (0%)]
[compiling method 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)> using TurboFan]
Candidates for inlining (size=1):
  #73:JSConstruct, frequency: 0.500027
  - size:16, name: Negotiator
Inlining Negotiator into negotiator
[optimizing 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)> - took 0.639, 0.764, 0.043 ms]
[completed optimizing 0x229d3a387369 <JSFunction negotiator (sfi = 0x229d6d156ad1)>]
[marking 0x229dc17ffb31 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d57589451 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d57589451 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.472, 0.412, 0.013 ms]
[completed optimizing 0x229d57589451 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d18dcd029 <JSFunction exports.enroll (sfi = 0x229d18dc56b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/15 (73%), generic ICs: 0/15 (0%)]
[compiling method 0x229d18dcd029 <JSFunction exports.enroll (sfi = 0x229d18dc56b9)> using TurboFan]
Candidates for inlining (size=2):
  #144:JSCall, frequency: 1
  - size:12, name: init
  #90:JSCall, frequency: 0.159107
  - size:60, name: exports.unenroll
Inlining init into exports.enroll
Candidates for inlining (size=1):
  #90:JSCall, frequency: 0.159107
  - size:60, name: exports.unenroll
Inlining exports.unenroll into exports.enroll
Candidates for inlining (size=1):
  #319:JSCall, frequency: 0.159107
  - size:50, name: reuse
Inlining reuse into exports.enroll
Candidates for inlining (size=1):
  #389:JSCall, frequency: 0.159107
  - size:42, name: remove
Inlining remove into exports.enroll
[optimizing 0x229d18dcd029 <JSFunction exports.enroll (sfi = 0x229d18dc56b9)> - took 1.928, 1.790, 0.031 ms]
[completed optimizing 0x229d18dcd029 <JSFunction exports.enroll (sfi = 0x229d18dc56b9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665073
  - size:25, name: digest
  #152:JSCall, frequency: 0.665073
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665073
  - size:25, name: digest
  #152:JSCall, frequency: 0.665073
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665073
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.880, 2.258, 0.038 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #149) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d784dc4b9 ; [fp - 24] 0x229d784dc4b9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}11328>
      3: 0x229d784dc4e1 ; [fp - 32] 0x229d784dc4e1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d784dc4b9 ;  0x229d784dc4b9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}11328>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d784dc4e1 ;  0x229d784dc4e1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.099 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0931aa09 <JSFunction connectionCorkNT (sfi = 0x229d269dc8f1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d0931aa09 <JSFunction connectionCorkNT (sfi = 0x229d269dc8f1)> using TurboFan]
Candidates for inlining (size=1):
  #19:JSCall, frequency: 1
  - size:48, name: Writable.uncork
Inlining Writable.uncork into connectionCorkNT
[optimizing 0x229d0931aa09 <JSFunction connectionCorkNT (sfi = 0x229d269dc8f1)> - took 0.492, 0.506, 0.013 ms]
[completed optimizing 0x229d0931aa09 <JSFunction connectionCorkNT (sfi = 0x229d269dc8f1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665275
  - size:25, name: digest
  #152:JSCall, frequency: 0.665275
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665275
  - size:25, name: digest
  #152:JSCall, frequency: 0.665275
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665275
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.070, 6.538, 0.077 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #151) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d661e9fa9 ; [fp - 24] 0x229d661e9fa9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}13213>
      3: 0x229d661e9fd1 ; [fp - 32] 0x229d661e9fd1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d661e9fa9 ;  0x229d661e9fa9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}13213>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d661e9fd1 ;  0x229d661e9fd1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 28.587 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4feace69 <JSFunction spliceOne (sfi = 0x229d3a6dc551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/9 (55%), generic ICs: 0/9 (0%)]
[compiling method 0x229d4feace69 <JSFunction spliceOne (sfi = 0x229d3a6dc551)> using TurboFan]
[optimizing 0x229d4feace69 <JSFunction spliceOne (sfi = 0x229d3a6dc551)> - took 0.087, 0.334, 0.009 ms]
[completed optimizing 0x229d4feace69 <JSFunction spliceOne (sfi = 0x229d3a6dc551)>]
[marking 0x229dfb5f0f59 <JSFunction loadModule (sfi = 0x229d0a47e381)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 8/17 (47%), generic ICs: 0/17 (0%)]
[compiling method 0x229dfb5f0f59 <JSFunction loadModule (sfi = 0x229d0a47e381)> using TurboFan]
[optimizing 0x229dfb5f0f59 <JSFunction loadModule (sfi = 0x229d0a47e381)> - took 0.143, 0.370, 0.010 ms]
[completed optimizing 0x229dfb5f0f59 <JSFunction loadModule (sfi = 0x229d0a47e381)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665493
  - size:25, name: digest
  #152:JSCall, frequency: 0.665493
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665493
  - size:25, name: digest
  #152:JSCall, frequency: 0.665493
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665493
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.918, 2.586, 0.040 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #154) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d45a212e1 ; [fp - 24] 0x229d45a212e1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}15101>
      3: 0x229d45a21309 ; [fp - 32] 0x229d45a21309 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d45a212e1 ;  0x229d45a212e1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}15101>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d45a21309 ;  0x229d45a21309 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.866 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665604
  - size:25, name: digest
  #152:JSCall, frequency: 0.665604
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665604
  - size:25, name: digest
  #152:JSCall, frequency: 0.665604
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665604
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.843, 2.247, 0.038 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #155) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de87b2271 ; [fp - 24] 0x229de87b2271 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}16987>
      3: 0x229de87b2299 ; [fp - 32] 0x229de87b2299 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229de87b2271 ;  0x229de87b2271 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}16987>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229de87b2299 ;  0x229de87b2299 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.513 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d3441f301 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d34427129 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500305
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500305
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500305
  - size:157, name: 
  #150:JSCall, frequency: 0.500305
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499695
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500305
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500305
  - size:157, name: 
  #150:JSCall, frequency: 0.500305
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499695
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500305
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500305
  - size:157, name: 
  #150:JSCall, frequency: 0.500305
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499695
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500305
  - size:157, name: 
  #150:JSCall, frequency: 0.500305
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499695
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500305
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499695
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499695
  - size:85, name: endHandlerTimer
[optimizing 0x229d34427129 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.171, 5.246, 0.071 ms]
[completed optimizing 0x229d34427129 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229dc78b0b29 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229dc78b0b29 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229dc78b0b29 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.509, 2.770, 0.036 ms]
[completed optimizing 0x229dc78b0b29 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229de805d801 <JSFunction (sfi = 0x229d08f03d21)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 9/9 (100%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d801 <JSFunction (sfi = 0x229d08f03d21)> using TurboFan]
Candidates for inlining (size=3):
  #70:JSCall, frequency: 1
  - size:41, name: send
  #56:JSCall, frequency: 1
  - size:92, name: setHeader
  #31:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=2):
  #56:JSCall, frequency: 1
  - size:92, name: setHeader
  #31:JSCall, frequency: 1
  - size:162, name: etag
Inlining setHeader into 
Candidates for inlining (size=2):
  #208:JSCall, frequency: 1
  - size:61, name: validateHeader
  #31:JSCall, frequency: 1
  - size:162, name: etag
Inlining validateHeader into 
Candidates for inlining (size=3):
  #499:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
  #408:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #31:JSCall, frequency: 1
  - size:162, name: etag
Inlining checkInvalidHeaderChar into 
Candidates for inlining (size=2):
  #408:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #31:JSCall, frequency: 1
  - size:162, name: etag
Inlining checkIsHttpToken into 
Candidates for inlining (size=1):
  #31:JSCall, frequency: 1
  - size:162, name: etag
[optimizing 0x229de805d801 <JSFunction (sfi = 0x229d08f03d21)> - took 3.805, 2.899, 0.035 ms]
[completed optimizing 0x229de805d801 <JSFunction (sfi = 0x229d08f03d21)>]
[marking 0x229d91582411 <JSFunction (sfi = 0x229d08f03de9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 10/10 (100%), generic ICs: 2/10 (20%)]
[compiling method 0x229d91582411 <JSFunction (sfi = 0x229d08f03de9)> using TurboFan]
Candidates for inlining (size=3):
  #78:JSCall, frequency: 1
  - size:41, name: send
  #64:JSCall, frequency: 1
  - size:92, name: setHeader
  #39:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=2):
  #64:JSCall, frequency: 1
  - size:92, name: setHeader
  #39:JSCall, frequency: 1
  - size:162, name: etag
Inlining setHeader into 
Candidates for inlining (size=2):
  #219:JSCall, frequency: 1
  - size:61, name: validateHeader
  #39:JSCall, frequency: 1
  - size:162, name: etag
Inlining validateHeader into 
Candidates for inlining (size=3):
  #510:JSCall, frequency: 1
  - size:113, name: checkInvalidHeaderChar
  #419:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #39:JSCall, frequency: 1
  - size:162, name: etag
Inlining checkInvalidHeaderChar into 
Candidates for inlining (size=2):
  #419:JSCall, frequency: 1
  - size:98, name: checkIsHttpToken
  #39:JSCall, frequency: 1
  - size:162, name: etag
Inlining checkIsHttpToken into 
Candidates for inlining (size=1):
  #39:JSCall, frequency: 1
  - size:162, name: etag
[marking 0x229dfe1f3e21 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229dfe1f3e21 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d91582411 <JSFunction (sfi = 0x229d08f03de9)> - took 3.894, 3.114, 0.034 ms]
[completed optimizing 0x229d91582411 <JSFunction (sfi = 0x229d08f03de9)>]
[optimizing 0x229dfe1f3e21 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.059, 0.260, 0.004 ms]
[completed optimizing 0x229dfe1f3e21 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d4673d389 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d467440b1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d467440b1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.165, 1.046, 0.020 ms]
[completed optimizing 0x229d467440b1 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d80698d79 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d806a0b49 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d806a0b49 <JSFunction f (sfi = 0x229d08f55139)> - took 0.110, 0.471, 0.011 ms]
[completed optimizing 0x229d806a0b49 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3fced9 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3fced9 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3fced9 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.469, 0.376, 0.010 ms]
[completed optimizing 0x229d8b3fced9 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665817
  - size:25, name: digest
  #152:JSCall, frequency: 0.665817
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665817
  - size:25, name: digest
  #152:JSCall, frequency: 0.665817
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665817
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.819, 2.222, 0.040 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #164) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dfe188a71 ; [fp - 24] 0x229dfe188a71 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}18870>
      3: 0x229dfe188a99 ; [fp - 32] 0x229dfe188a99 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229dfe188a71 ;  0x229dfe188a71 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}18870>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229dfe188a99 ;  0x229dfe188a99 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 15.396 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229ded83dcc1 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229ded845a91 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229ded845a91 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.030, 4.747, 0.068 ms]
[completed optimizing 0x229ded845a91 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229de8799c71 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229de87a1259 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229de87a1259 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.732, 2.122, 0.053 ms]
[completed optimizing 0x229de87a1259 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d5c8b1809 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8b95c9 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8b95c9 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.530, 0.641, 0.013 ms]
[completed optimizing 0x229d5c8b95c9 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665862
  - size:25, name: digest
  #152:JSCall, frequency: 0.665862
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665862
  - size:25, name: digest
  #152:JSCall, frequency: 0.665862
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665862
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.192, 2.219, 0.038 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #168) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d4529ad79 ; [fp - 24] 0x229d4529ad79 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}20754>
      3: 0x229d4529ada1 ; [fp - 32] 0x229d4529ada1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d4529ad79 ;  0x229d4529ad79 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}20754>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d4529ada1 ;  0x229d4529ada1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.386 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dea22d001 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea234dc1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea234dc1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.490, 0.412, 0.013 ms]
[completed optimizing 0x229dea234dc1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665796
  - size:25, name: digest
  #152:JSCall, frequency: 0.665796
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665796
  - size:25, name: digest
  #152:JSCall, frequency: 0.665796
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665796
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.426, 2.512, 0.035 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #170) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d84a2bfa1 ; [fp - 24] 0x229d84a2bfa1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}22640>
      3: 0x229d84a2bfc9 ; [fp - 32] 0x229d84a2bfc9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d84a2bfa1 ;  0x229d84a2bfa1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}22640>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d84a2bfc9 ;  0x229d84a2bfc9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 15.460 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.665936
  - size:25, name: digest
  #330:JSCall, frequency: 0.665936
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.665936
  - size:25, name: digest
  #330:JSCall, frequency: 0.665936
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.665936
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[marking 0x229d452d6e71 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d452d8051 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 3.807, 3.149, 0.104 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[optimizing 0x229d452d8051 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.337, 2.164, 0.012 ms]
[completed optimizing 0x229d452d8051 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #171) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf5008]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229d75974419 ; [fp + 32] 0x229d75974419 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229d75974771 ; [fp + 24] 0x229d75974771 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229d75975f39 ; [fp + 16] 0x229d75975f39 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d75976011 ; [fp - 24] 0x229d75976011 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}22849>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229d75976011 ; [fp - 32] 0x229d75976011 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}22849>
      3: 0x229d75976039 ; [fp - 40] 0x229d75976039 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf5000: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf4ff8: [top + 104] <- 0x229d75974419 ;  0x229d75974419 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf4ff0: [top + 96] <- 0x229d75974771 ;  0x229d75974771 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf4fe8: [top + 88] <- 0x229d75975f39 ;  0x229d75975f39 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf4fe0: [top + 80] <- 0xc4cc396a5d7 ;  caller's pc
    0x7ffeefbf4fd8: [top + 72] <- 0x7ffeefbf5080 ;  caller's fp
    0x7ffeefbf4fd0: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf4fc8: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf4fc0: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4fb8: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf4fb0: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf4fa8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4fa0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4f98: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4f90: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f88: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f80: [top + 136] <- 0x229d75976011 ;  0x229d75976011 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}22849>  (input #2)
    0x7ffeefbf4f78: [top + 128] <- 0x229d75976039 ;  0x229d75976039 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f70: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4f68: [top + 112] <- 0x7ffeefbf4fd8 ;  caller's fp
    0x7ffeefbf4f60: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f58: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f50: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f48: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f40: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f38: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f30: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f28: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f20: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f18: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f10: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f08: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f00: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ef8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5008, state=TOS_REGISTER, took 28.690 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665958
  - size:25, name: digest
  #152:JSCall, frequency: 0.665958
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665958
  - size:25, name: digest
  #152:JSCall, frequency: 0.665958
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665958
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.795, 2.466, 0.035 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #173) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229ddff8dbd1 ; [fp - 24] 0x229ddff8dbd1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}24520>
      3: 0x229ddff8dbf9 ; [fp - 32] 0x229ddff8dbf9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229ddff8dbd1 ;  0x229ddff8dbd1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}24520>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229ddff8dbf9 ;  0x229ddff8dbf9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 15.295 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d5c8a7389 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d5c8aea99 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d5c8aea99 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.115, 0.576, 0.008 ms]
[completed optimizing 0x229d5c8aea99 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666034
  - size:25, name: digest
  #152:JSCall, frequency: 0.666034
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666034
  - size:25, name: digest
  #152:JSCall, frequency: 0.666034
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666034
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.807, 2.460, 0.060 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #175) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc55960c1 ; [fp - 24] 0x229dc55960c1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}26403>
      3: 0x229dc55960e9 ; [fp - 32] 0x229dc55960e9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229dc55960c1 ;  0x229dc55960c1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}26403>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229dc55960e9 ;  0x229dc55960e9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.610 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4fee1781 <JSFunction Socket.write (sfi = 0x229d4fecccf9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 6/9 (66%), generic ICs: 0/9 (0%)]
[compiling method 0x229d4fee1781 <JSFunction Socket.write (sfi = 0x229d4fecccf9)> using TurboFan]
[optimizing 0x229d4fee1781 <JSFunction Socket.write (sfi = 0x229d4fecccf9)> - took 0.165, 0.612, 0.018 ms]
[completed optimizing 0x229d4fee1781 <JSFunction Socket.write (sfi = 0x229d4fecccf9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666017
  - size:25, name: digest
  #152:JSCall, frequency: 0.666017
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666017
  - size:25, name: digest
  #152:JSCall, frequency: 0.666017
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666017
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.800, 2.364, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #177) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d30]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d7d4a5009 ; [fp - 24] 0x229d7d4a5009 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}28289>
      3: 0x229d7d4a5031 ; [fp - 32] 0x229d7d4a5031 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d28: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d20: [top + 136] <- 0x229d7d4a5009 ;  0x229d7d4a5009 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}28289>  (input #2)
    0x7ffeefbf4d18: [top + 128] <- 0x229d7d4a5031 ;  0x229d7d4a5031 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d10: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d08: [top + 112] <- 0x7ffeefbf4d38 ;  caller's fp
    0x7ffeefbf4d00: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4cf8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4cf0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ce8: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4ce0: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4cd8: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4cd0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4cc8: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4cc0: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4cb8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cb0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ca8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ca0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4c98: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d30, state=TOS_REGISTER, took 15.869 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d45a08f49 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d45a0f3a9 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d45a0f3a9 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.560, 2.814, 0.028 ms]
[completed optimizing 0x229d45a0f3a9 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d4e8fe249 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d4e8fe249 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d4e8fe249 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.093, 0.328, 0.011 ms]
[completed optimizing 0x229d4e8fe249 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d41896751 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d4189e579 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500313
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500313
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500313
  - size:157, name: 
  #150:JSCall, frequency: 0.500313
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499687
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500313
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500313
  - size:157, name: 
  #150:JSCall, frequency: 0.500313
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499687
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500313
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500313
  - size:157, name: 
  #150:JSCall, frequency: 0.500313
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499687
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500313
  - size:157, name: 
  #150:JSCall, frequency: 0.500313
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499687
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500313
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499687
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499687
  - size:85, name: endHandlerTimer
[optimizing 0x229d4189e579 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.344, 4.937, 0.052 ms]
[completed optimizing 0x229d4189e579 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229dc78f6b81 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229dc78f6b81 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229dc78f6b81 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.473, 0.365, 0.009 ms]
[completed optimizing 0x229dc78f6b81 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229dfa129601 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa12a7e1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa12a7e1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.174, 0.957, 0.011 ms]
[completed optimizing 0x229dfa12a7e1 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d75923fb9 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d7592c0d1 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d7592c0d1 <JSFunction f (sfi = 0x229d08f55139)> - took 0.114, 0.473, 0.011 ms]
[completed optimizing 0x229d7592c0d1 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666102
  - size:25, name: digest
  #152:JSCall, frequency: 0.666102
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666102
  - size:25, name: digest
  #152:JSCall, frequency: 0.666102
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666102
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.735, 2.408, 0.043 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #184) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de9888531 ; [fp - 24] 0x229de9888531 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}29551>
      3: 0x229de9888559 ; [fp - 32] 0x229de9888559 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229de9888531 ;  0x229de9888531 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}29551>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229de9888559 ;  0x229de9888559 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 16.540 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de98bfaa1 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de98c7871 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229de98c7871 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.178, 5.668, 0.067 ms]
[completed optimizing 0x229de98c7871 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.66605
  - size:25, name: digest
  #152:JSCall, frequency: 0.66605
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.66605
  - size:25, name: digest
  #152:JSCall, frequency: 0.66605
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.66605
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.836, 2.293, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #186) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229db55ae461 ; [fp - 24] 0x229db55ae461 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}31437>
      3: 0x229db55ae489 ; [fp - 32] 0x229db55ae489 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229db55ae461 ;  0x229db55ae461 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}31437>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229db55ae489 ;  0x229db55ae489 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 16.274 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d61eb82e9 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61ebf9e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61ebf9e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.547, 0.657, 0.014 ms]
[completed optimizing 0x229d61ebf9e1 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229dadae2dc9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229dadae3fa9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229dadae3fa9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.382, 2.318, 0.015 ms]
[completed optimizing 0x229dadae3fa9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d02bb3df1 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d02bbb511 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d02bbb511 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.655, 1.999, 0.033 ms]
[completed optimizing 0x229d02bbb511 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d641bf1b1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641c68c1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641c68c1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.488, 0.408, 0.012 ms]
[completed optimizing 0x229d641c68c1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665965
  - size:25, name: digest
  #152:JSCall, frequency: 0.665965
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665965
  - size:25, name: digest
  #152:JSCall, frequency: 0.665965
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665965
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.802, 2.386, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #191) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dd12158c1 ; [fp - 24] 0x229dd12158c1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}33317>
      3: 0x229dd12158e9 ; [fp - 32] 0x229dd12158e9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229dd12158c1 ;  0x229dd12158c1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}33317>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229dd12158e9 ;  0x229dd12158e9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 15.295 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.665993
  - size:25, name: digest
  #152:JSCall, frequency: 0.665993
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.665993
  - size:25, name: digest
  #152:JSCall, frequency: 0.665993
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.665993
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.808, 2.394, 0.046 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #192) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc17a2d09 ; [fp - 24] 0x229dc17a2d09 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}35186>
      3: 0x229dc17a2d31 ; [fp - 32] 0x229dc17a2d31 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229dc17a2d09 ;  0x229dc17a2d09 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}35186>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229dc17a2d31 ;  0x229dc17a2d31 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 16.148 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d61eb2d81 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d61eba491 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d61eba491 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.121, 0.602, 0.009 ms]
[completed optimizing 0x229d61eba491 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666081
  - size:25, name: digest
  #152:JSCall, frequency: 0.666081
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666081
  - size:25, name: digest
  #152:JSCall, frequency: 0.666081
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666081
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.901, 2.270, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #194) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dfa132cc9 ; [fp - 24] 0x229dfa132cc9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}37087>
      3: 0x229dfa132cf1 ; [fp - 32] 0x229dfa132cf1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229dfa132cc9 ;  0x229dfa132cc9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}37087>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229dfa132cf1 ;  0x229dfa132cf1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.693 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666135
  - size:25, name: digest
  #152:JSCall, frequency: 0.666135
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666135
  - size:25, name: digest
  #152:JSCall, frequency: 0.666135
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666135
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.805, 2.250, 0.043 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #195) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d30]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc78f1751 ; [fp - 24] 0x229dc78f1751 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}38974>
      3: 0x229dc78f1779 ; [fp - 32] 0x229dc78f1779 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d28: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d20: [top + 136] <- 0x229dc78f1751 ;  0x229dc78f1751 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}38974>  (input #2)
    0x7ffeefbf4d18: [top + 128] <- 0x229dc78f1779 ;  0x229dc78f1779 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d10: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d08: [top + 112] <- 0x7ffeefbf4d38 ;  caller's fp
    0x7ffeefbf4d00: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4cf8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4cf0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ce8: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4ce0: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4cd8: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4cd0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4cc8: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4cc0: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4cb8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cb0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ca8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ca0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4c98: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d30, state=TOS_REGISTER, took 15.134 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 13/16 (81%), generic ICs: 1/16 (6%)]
[compiling method 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)> using TurboFan]
Candidates for inlining (size=1):
  #83:JSCall, frequency: 1
  - size:101, name: hrtime
Inlining hrtime into startHandlerTimer
[optimizing 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)> - took 0.771, 0.908, 0.022 ms]
[completed optimizing 0x229d6d159b49 <JSFunction startHandlerTimer (sfi = 0x229d6d157f21)>]
[marking 0x229dfe1eba89 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229dfe1ecc69 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[marking 0x229dfe1f3c81 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[optimizing 0x229dfe1ecc69 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.088, 0.316, 0.012 ms]
[completed optimizing 0x229dfe1ecc69 <JSFunction getType (sfi = 0x229df8185e51)>]
[compiling method 0x229dfe1fa099 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[marking 0x229d3d684711 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d3d68c4f1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500318
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500318
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500318
  - size:157, name: 
  #150:JSCall, frequency: 0.500318
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499682
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500318
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500318
  - size:157, name: 
  #150:JSCall, frequency: 0.500318
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499682
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500318
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500318
  - size:157, name: 
  #150:JSCall, frequency: 0.500318
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499682
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500318
  - size:157, name: 
  #150:JSCall, frequency: 0.500318
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499682
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500318
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499682
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499682
  - size:85, name: endHandlerTimer
[optimizing 0x229dfe1fa099 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.546, 2.867, 0.029 ms]
[completed optimizing 0x229dfe1fa099 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[optimizing 0x229d3d68c4f1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.256, 5.186, 0.055 ms]
[completed optimizing 0x229d3d68c4f1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d4672f8b1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d467365d9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d467365d9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.165, 0.956, 0.011 ms]
[completed optimizing 0x229d467365d9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d8069a9b9 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d806a1cd9 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d806a1cd9 <JSFunction f (sfi = 0x229d08f55139)> - took 0.114, 0.475, 0.011 ms]
[completed optimizing 0x229d806a1cd9 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3f7129 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3fde31 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3fde31 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.484, 0.407, 0.011 ms]
[completed optimizing 0x229d8b3fde31 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666119
  - size:25, name: digest
  #152:JSCall, frequency: 0.666119
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666119
  - size:25, name: digest
  #152:JSCall, frequency: 0.666119
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666119
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.727, 2.338, 0.035 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #203) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de98ff749 ; [fp - 24] 0x229de98ff749 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}40857>
      3: 0x229de98ff771 ; [fp - 32] 0x229de98ff771 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229de98ff749 ;  0x229de98ff749 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}40857>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229de98ff771 ;  0x229de98ff771 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 15.460 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d19bf12d1 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d19bf89c9 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d19bf89c9 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.007, 4.582, 0.051 ms]
[completed optimizing 0x229d19bf89c9 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229de878f149 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229de8796841 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229de8796841 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.773, 1.887, 0.030 ms]
[completed optimizing 0x229de8796841 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d5c8b65c1 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8be381 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8be381 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.555, 0.634, 0.019 ms]
[completed optimizing 0x229d5c8be381 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666104
  - size:25, name: digest
  #152:JSCall, frequency: 0.666104
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666104
  - size:25, name: digest
  #152:JSCall, frequency: 0.666104
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666104
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.222, 2.821, 0.035 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #207) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d61e9b521 ; [fp - 24] 0x229d61e9b521 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}42742>
      3: 0x229d61e9b549 ; [fp - 32] 0x229d61e9b549 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d61e9b521 ;  0x229d61e9b521 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}42742>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d61e9b549 ;  0x229d61e9b549 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 16.724 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dea238339 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea23fa21 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea23fa21 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.497, 0.429, 0.015 ms]
[completed optimizing 0x229dea23fa21 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d452a6329 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d452ad019 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d452ad019 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.382, 1.903, 0.015 ms]
[completed optimizing 0x229d452ad019 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666143
  - size:25, name: digest
  #152:JSCall, frequency: 0.666143
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666143
  - size:25, name: digest
  #152:JSCall, frequency: 0.666143
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666143
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.778, 2.759, 0.038 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #210) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d145ab621 ; [fp - 24] 0x229d145ab621 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}44628>
      3: 0x229d145ab649 ; [fp - 32] 0x229d145ab649 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d145ab621 ;  0x229d145ab621 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}44628>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d145ab649 ;  0x229d145ab649 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 18.007 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1.00007
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.666309
  - size:25, name: digest
  #330:JSCall, frequency: 0.666309
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.666309
  - size:25, name: digest
  #330:JSCall, frequency: 0.666309
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.666309
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 3.857, 3.077, 0.077 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #211) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf5008]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229dc65edd01 ; [fp + 32] 0x229dc65edd01 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229dc65ee059 ; [fp + 24] 0x229dc65ee059 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229dc65ef821 ; [fp + 16] 0x229dc65ef821 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229dc65ef8f9 ; [fp - 24] 0x229dc65ef8f9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}45737>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229dc65ef8f9 ; [fp - 32] 0x229dc65ef8f9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}45737>
      3: 0x229dc65ef921 ; [fp - 40] 0x229dc65ef921 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf5000: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf4ff8: [top + 104] <- 0x229dc65edd01 ;  0x229dc65edd01 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf4ff0: [top + 96] <- 0x229dc65ee059 ;  0x229dc65ee059 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf4fe8: [top + 88] <- 0x229dc65ef821 ;  0x229dc65ef821 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf4fe0: [top + 80] <- 0xc4cc397c4b7 ;  caller's pc
    0x7ffeefbf4fd8: [top + 72] <- 0x7ffeefbf5080 ;  caller's fp
    0x7ffeefbf4fd0: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf4fc8: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf4fc0: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4fb8: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf4fb0: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf4fa8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4fa0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4f98: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4f90: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f88: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f80: [top + 136] <- 0x229dc65ef8f9 ;  0x229dc65ef8f9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}45737>  (input #2)
    0x7ffeefbf4f78: [top + 128] <- 0x229dc65ef921 ;  0x229dc65ef921 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f70: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4f68: [top + 112] <- 0x7ffeefbf4fd8 ;  caller's fp
    0x7ffeefbf4f60: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f58: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f50: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f48: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f40: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f38: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f30: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f28: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f20: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f18: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f10: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f08: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f00: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ef8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5008, state=TOS_REGISTER, took 25.325 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666358
  - size:25, name: digest
  #152:JSCall, frequency: 0.666358
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666358
  - size:25, name: digest
  #152:JSCall, frequency: 0.666358
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666358
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.722, 2.374, 0.037 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #212) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d19bcf759 ; [fp - 24] 0x229d19bcf759 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}46517>
      3: 0x229d19bcf781 ; [fp - 32] 0x229d19bcf781 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d19bcf759 ;  0x229d19bcf759 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}46517>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d19bcf781 ;  0x229d19bcf781 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 17.779 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d5c8a69d1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d5c8ae0e1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d5c8ae0e1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.120, 0.575, 0.009 ms]
[completed optimizing 0x229d5c8ae0e1 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666308
  - size:25, name: digest
  #152:JSCall, frequency: 0.666308
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666308
  - size:25, name: digest
  #152:JSCall, frequency: 0.666308
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666308
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.171, 2.417, 0.049 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #214) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dd8b03df9 ; [fp - 24] 0x229dd8b03df9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}48406>
      3: 0x229dd8b03e21 ; [fp - 32] 0x229dd8b03e21 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229dd8b03df9 ;  0x229dd8b03df9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}48406>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229dd8b03e21 ;  0x229dd8b03e21 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 19.046 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4e8e5441 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d4e8e5441 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d4e8e5441 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.094, 0.339, 0.022 ms]
[completed optimizing 0x229d4e8e5441 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d2a122de9 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d2a129311 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[marking 0x229d2a164311 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d2a16c0f1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500268
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500268
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500268
  - size:157, name: 
  #150:JSCall, frequency: 0.500268
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499732
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500268
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500268
  - size:157, name: 
  #150:JSCall, frequency: 0.500268
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499732
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500268
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500268
  - size:157, name: 
  #150:JSCall, frequency: 0.500268
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499732
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500268
  - size:157, name: 
  #150:JSCall, frequency: 0.500268
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499732
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500268
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499732
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499732
  - size:85, name: endHandlerTimer
[optimizing 0x229d2a129311 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.514, 2.660, 0.027 ms]
[completed optimizing 0x229d2a129311 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[optimizing 0x229d2a16c0f1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.447, 11.038, 0.073 ms]
[completed optimizing 0x229d2a16c0f1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666355
  - size:25, name: digest
  #152:JSCall, frequency: 0.666355
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666355
  - size:25, name: digest
  #152:JSCall, frequency: 0.666355
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666355
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.359, 2.484, 0.028 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #218) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d784e5931 ; [fp - 24] 0x229d784e5931 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}50285>
      3: 0x229d784e5959 ; [fp - 32] 0x229d784e5959 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d70: [top + 136] <- 0x229d784e5931 ;  0x229d784e5931 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}50285>  (input #2)
    0x7ffeefbf4d68: [top + 128] <- 0x229d784e5959 ;  0x229d784e5959 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d58: [top + 112] <- 0x7ffeefbf4d88 ;  caller's fp
    0x7ffeefbf4d50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cf8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4cf0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ce8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d80, state=TOS_REGISTER, took 17.005 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dfa11f209 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa1203e9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa1203e9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.154, 1.263, 0.014 ms]
[completed optimizing 0x229dfa1203e9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d75912ff9 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d7591a2f1 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d7591a2f1 <JSFunction f (sfi = 0x229d08f55139)> - took 0.117, 0.543, 0.012 ms]
[completed optimizing 0x229d7591a2f1 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d02be6db9 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d02be6db9 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d02be6db9 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.479, 0.414, 0.012 ms]
[completed optimizing 0x229d02be6db9 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229de98c2ab1 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de98ca881 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666417
  - size:25, name: digest
  #152:JSCall, frequency: 0.666417
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666417
  - size:25, name: digest
  #152:JSCall, frequency: 0.666417
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666417
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de98ca881 <JSFunction (sfi = 0x229d3a3f31c9)> - took 4.957, 4.158, 0.052 ms]
[completed optimizing 0x229de98ca881 <JSFunction (sfi = 0x229d3a3f31c9)>]
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.694, 2.352, 0.040 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #223) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d9354f701 ; [fp - 24] 0x229d9354f701 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}52182>
      3: 0x229d9354f729 ; [fp - 32] 0x229d9354f729 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d9354f701 ;  0x229d9354f701 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}52182>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d9354f729 ;  0x229d9354f729 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.015 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d61ea4561 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61eabc81 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61eabc81 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.546, 0.637, 0.016 ms]
[completed optimizing 0x229d61eabc81 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d02baf021 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d02bb6609 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d02bb6609 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.790, 1.700, 0.026 ms]
[completed optimizing 0x229d02bb6609 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666401
  - size:25, name: digest
  #152:JSCall, frequency: 0.666401
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666401
  - size:25, name: digest
  #152:JSCall, frequency: 0.666401
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666401
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.773, 2.259, 0.028 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #226) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229da5c1e759 ; [fp - 24] 0x229da5c1e759 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}54073>
      3: 0x229da5c1e781 ; [fp - 32] 0x229da5c1e781 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229da5c1e759 ;  0x229da5c1e759 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}54073>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229da5c1e781 ;  0x229da5c1e781 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.209 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d641b2c31 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641ba9f1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641ba9f1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.477, 0.477, 0.014 ms]
[completed optimizing 0x229d641ba9f1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d824cdff9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d824cf1d9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d824cf1d9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.381, 1.863, 0.014 ms]
[completed optimizing 0x229d824cf1d9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d93552701 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d93559e11 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d93559e11 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.117, 0.579, 0.009 ms]
[completed optimizing 0x229d93559e11 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666571
  - size:25, name: digest
  #152:JSCall, frequency: 0.666571
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666571
  - size:25, name: digest
  #152:JSCall, frequency: 0.666571
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666571
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.742, 2.229, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #230) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d404a4b09 ; [fp - 24] 0x229d404a4b09 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}55958>
      3: 0x229d404a4b31 ; [fp - 32] 0x229d404a4b31 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d404a4b09 ;  0x229d404a4b09 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}55958>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d404a4b31 ;  0x229d404a4b31 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.649 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666545
  - size:25, name: digest
  #152:JSCall, frequency: 0.666545
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666545
  - size:25, name: digest
  #152:JSCall, frequency: 0.666545
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666545
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.730, 2.299, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #231) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229ded80e441 ; [fp - 24] 0x229ded80e441 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}57839>
      3: 0x229ded80e469 ; [fp - 32] 0x229ded80e469 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229ded80e441 ;  0x229ded80e441 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}57839>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229ded80e469 ;  0x229ded80e469 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.312 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666521
  - size:25, name: digest
  #152:JSCall, frequency: 0.666521
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666521
  - size:25, name: digest
  #152:JSCall, frequency: 0.666521
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666521
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.756, 2.517, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #232) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d5c8eab91 ; [fp - 24] 0x229d5c8eab91 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}59733>
      3: 0x229d5c8eabb9 ; [fp - 32] 0x229d5c8eabb9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d5c8eab91 ;  0x229d5c8eab91 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}59733>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d5c8eabb9 ;  0x229d5c8eabb9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 14.996 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d7df37a51 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d7df3f831 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500277
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500277
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500277
  - size:157, name: 
  #150:JSCall, frequency: 0.500277
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499723
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500277
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500277
  - size:157, name: 
  #150:JSCall, frequency: 0.500277
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499723
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500277
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500277
  - size:157, name: 
  #150:JSCall, frequency: 0.500277
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499723
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500277
  - size:157, name: 
  #150:JSCall, frequency: 0.500277
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499723
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500277
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499723
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499723
  - size:85, name: endHandlerTimer
[marking 0x229d7df6ffa1 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d7df76cd9 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d7df3f831 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.432, 5.134, 0.068 ms]
[completed optimizing 0x229d7df3f831 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[optimizing 0x229d7df76cd9 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.485, 3.380, 0.031 ms]
[completed optimizing 0x229d7df76cd9 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d467267a1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d4672d4c9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d4672d4c9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.167, 1.191, 0.014 ms]
[completed optimizing 0x229d4672d4c9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d8068b121 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d80692ef1 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d80692ef1 <JSFunction f (sfi = 0x229d08f55139)> - took 0.118, 0.478, 0.011 ms]
[completed optimizing 0x229d80692ef1 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3e83e1 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3e83e1 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3e83e1 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.485, 0.452, 0.021 ms]
[completed optimizing 0x229d8b3e83e1 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666629
  - size:25, name: digest
  #152:JSCall, frequency: 0.666629
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666629
  - size:25, name: digest
  #152:JSCall, frequency: 0.666629
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666629
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.733, 2.271, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #238) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d84a5c9a9 ; [fp - 24] 0x229d84a5c9a9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}61617>
      3: 0x229d84a5c9d1 ; [fp - 32] 0x229d84a5c9d1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229d84a5c9a9 ;  0x229d84a5c9a9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}61617>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229d84a5c9d1 ;  0x229d84a5c9d1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 14.809 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d50e69661 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d50e69661 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d50e69661 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.089, 0.323, 0.011 ms]
[completed optimizing 0x229d50e69661 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d23fc2531 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d23fc9c29 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d23fc9c29 <JSFunction (sfi = 0x229d3a3f31c9)> - took 4.851, 4.427, 0.052 ms]
[completed optimizing 0x229d23fc9c29 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229de879cbd9 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229de87a41c1 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229de87a41c1 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.693, 2.190, 0.028 ms]
[completed optimizing 0x229de87a41c1 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.66664
  - size:25, name: digest
  #152:JSCall, frequency: 0.66664
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.66664
  - size:25, name: digest
  #152:JSCall, frequency: 0.66664
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.66664
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.775, 2.300, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #242) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229ddffec9c1 ; [fp - 24] 0x229ddffec9c1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}63502>
      3: 0x229ddffec9e9 ; [fp - 32] 0x229ddffec9e9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229ddffec9c1 ;  0x229ddffec9c1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}63502>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229ddffec9e9 ;  0x229ddffec9e9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.020 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d5c89dbc9 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8a52b1 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8a52b1 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.538, 0.643, 0.019 ms]
[completed optimizing 0x229d5c8a52b1 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229dea227361 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea22f121 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea22f121 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.521, 0.458, 0.014 ms]
[completed optimizing 0x229dea22f121 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666636
  - size:25, name: digest
  #152:JSCall, frequency: 0.666636
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666636
  - size:25, name: digest
  #152:JSCall, frequency: 0.666636
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666636
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.758, 2.210, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #245) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d6418e851 ; [fp - 24] 0x229d6418e851 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}65388>
      3: 0x229d6418e879 ; [fp - 32] 0x229d6418e879 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d6418e851 ;  0x229d6418e851 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}65388>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d6418e879 ;  0x229d6418e879 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 14.786 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4528f6d9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d452963c9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d452963c9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.378, 1.863, 0.015 ms]
[completed optimizing 0x229d452963c9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666627
  - size:25, name: digest
  #152:JSCall, frequency: 0.666627
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666627
  - size:25, name: digest
  #152:JSCall, frequency: 0.666627
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666627
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.745, 2.685, 0.035 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #247) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc659cde9 ; [fp - 24] 0x229dc659cde9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}67274>
      3: 0x229dc659ce11 ; [fp - 32] 0x229dc659ce11 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229dc659cde9 ;  0x229dc659cde9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}67274>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229dc659ce11 ;  0x229dc659ce11 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 14.431 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1.00009
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.666691
  - size:25, name: digest
  #330:JSCall, frequency: 0.666691
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.666691
  - size:25, name: digest
  #330:JSCall, frequency: 0.666691
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.666691
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 3.742, 3.069, 0.041 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #248) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf5008]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229dadad64b9 ; [fp + 32] 0x229dadad64b9 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229dadad6811 ; [fp + 24] 0x229dadad6811 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229dadad7fd9 ; [fp + 16] 0x229dadad7fd9 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229dadad80b1 ; [fp - 24] 0x229dadad80b1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}68682>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229dadad80b1 ; [fp - 32] 0x229dadad80b1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}68682>
      3: 0x229dadad80d9 ; [fp - 40] 0x229dadad80d9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf5000: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf4ff8: [top + 104] <- 0x229dadad64b9 ;  0x229dadad64b9 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf4ff0: [top + 96] <- 0x229dadad6811 ;  0x229dadad6811 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf4fe8: [top + 88] <- 0x229dadad7fd9 ;  0x229dadad7fd9 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf4fe0: [top + 80] <- 0xc4cc397b177 ;  caller's pc
    0x7ffeefbf4fd8: [top + 72] <- 0x7ffeefbf5080 ;  caller's fp
    0x7ffeefbf4fd0: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf4fc8: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf4fc0: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4fb8: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf4fb0: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf4fa8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4fa0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4f98: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4f90: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f88: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f80: [top + 136] <- 0x229dadad80b1 ;  0x229dadad80b1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}68682>  (input #2)
    0x7ffeefbf4f78: [top + 128] <- 0x229dadad80d9 ;  0x229dadad80d9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f70: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4f68: [top + 112] <- 0x7ffeefbf4fd8 ;  caller's fp
    0x7ffeefbf4f60: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f58: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f50: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f48: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f40: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f38: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f30: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f28: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f20: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f18: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f10: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f08: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f00: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ef8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5008, state=TOS_REGISTER, took 27.981 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[marking 0x229d5c89adf9 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d5c8a2bb9 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d5c8a2bb9 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.113, 0.587, 0.008 ms]
[completed optimizing 0x229d5c8a2bb9 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666676
  - size:25, name: digest
  #152:JSCall, frequency: 0.666676
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666676
  - size:25, name: digest
  #152:JSCall, frequency: 0.666676
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666676
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.772, 2.223, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #250) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d02ba0201 ; [fp - 24] 0x229d02ba0201 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}69158>
      3: 0x229d02ba0229 ; [fp - 32] 0x229d02ba0229 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d02ba0201 ;  0x229d02ba0201 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}69158>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d02ba0229 ;  0x229d02ba0229 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 14.750 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.6667
  - size:25, name: digest
  #152:JSCall, frequency: 0.6667
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.6667
  - size:25, name: digest
  #152:JSCall, frequency: 0.6667
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.6667
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.052, 2.444, 0.045 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #251) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d752166d1 ; [fp - 24] 0x229d752166d1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}71039>
      3: 0x229d752166f9 ; [fp - 32] 0x229d752166f9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d752166d1 ;  0x229d752166d1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}71039>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d752166f9 ;  0x229d752166f9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.522 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d641b5801 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d641bcf09 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500297
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500297
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500297
  - size:157, name: 
  #150:JSCall, frequency: 0.500297
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499703
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500297
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500297
  - size:157, name: 
  #150:JSCall, frequency: 0.500297
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499703
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500297
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500297
  - size:157, name: 
  #150:JSCall, frequency: 0.500297
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499703
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500297
  - size:157, name: 
  #150:JSCall, frequency: 0.500297
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499703
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500297
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499703
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499703
  - size:85, name: endHandlerTimer
[optimizing 0x229d15502679 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.136, 4.754, 0.061 ms]
[completed optimizing 0x229d15502679 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d4e8e0299 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d4e8e6f99 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d4e8e6f99 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.089, 0.325, 0.008 ms]
[completed optimizing 0x229d4e8e6f99 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d2a13c581 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d2a142a99 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d2a142a99 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.578, 2.782, 0.028 ms]
[completed optimizing 0x229d2a142a99 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229dfa120dc9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa121fa9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa121fa9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.165, 1.202, 0.013 ms]
[completed optimizing 0x229dfa121fa9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d75914439 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d7591c209 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d7591c209 <JSFunction f (sfi = 0x229d08f55139)> - took 0.117, 0.472, 0.011 ms]
[completed optimizing 0x229d7591c209 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.490, 0.418, 0.012 ms]
[completed optimizing 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666676
  - size:25, name: digest
  #152:JSCall, frequency: 0.666676
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666676
  - size:25, name: digest
  #152:JSCall, frequency: 0.666676
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666676
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.862, 2.325, 0.037 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #258) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d50e3a4d9 ; [fp - 24] 0x229d50e3a4d9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}72926>
      3: 0x229d50e3a501 ; [fp - 32] 0x229d50e3a501 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229d50e3a4d9 ;  0x229d50e3a4d9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}72926>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229d50e3a501 ;  0x229d50e3a501 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 17.814 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de98a8c09 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de98b0301 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229de98b0301 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.076, 4.270, 0.049 ms]
[completed optimizing 0x229de98b0301 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d61ea14e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61ea8c01 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61ea8c01 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.564, 0.633, 0.016 ms]
[completed optimizing 0x229d61ea8c01 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666734
  - size:25, name: digest
  #152:JSCall, frequency: 0.666734
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666734
  - size:25, name: digest
  #152:JSCall, frequency: 0.666734
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666734
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.144, 2.825, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #261) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dadac7a99 ; [fp - 24] 0x229dadac7a99 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}74811>
      3: 0x229dadac7ac1 ; [fp - 32] 0x229dadac7ac1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229dadac7a99 ;  0x229dadac7a99 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}74811>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229dadac7ac1 ;  0x229dadac7ac1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 17.315 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d02bb9681 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d02bc0da1 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d02bc0da1 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.698, 1.716, 0.024 ms]
[completed optimizing 0x229d02bc0da1 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d5edc9449 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d5edd0b59 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d5edd0b59 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.124, 0.730, 0.012 ms]
[completed optimizing 0x229d5edd0b59 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d641abc71 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641b3381 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641b3381 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.518, 0.409, 0.012 ms]
[completed optimizing 0x229d641b3381 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666754
  - size:25, name: digest
  #152:JSCall, frequency: 0.666754
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666754
  - size:25, name: digest
  #152:JSCall, frequency: 0.666754
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666754
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.852, 2.365, 0.034 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #265) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d641f6669 ; [fp - 24] 0x229d641f6669 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}76699>
      3: 0x229d641f6691 ; [fp - 32] 0x229d641f6691 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d641f6669 ;  0x229d641f6669 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}76699>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d641f6691 ;  0x229d641f6691 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.254 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d82491709 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d824928e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d824928e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.364, 1.953, 0.015 ms]
[completed optimizing 0x229d824928e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.66673
  - size:25, name: digest
  #152:JSCall, frequency: 0.66673
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.66673
  - size:25, name: digest
  #152:JSCall, frequency: 0.66673
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.66673
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.096, 2.716, 0.050 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #267) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d360f2639 ; [fp - 24] 0x229d360f2639 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}78599>
      3: 0x229d360f2661 ; [fp - 32] 0x229d360f2661 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d360f2639 ;  0x229d360f2639 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}78599>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d360f2661 ;  0x229d360f2661 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.670 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666712
  - size:25, name: digest
  #152:JSCall, frequency: 0.666712
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666712
  - size:25, name: digest
  #152:JSCall, frequency: 0.666712
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666712
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.836, 2.389, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #268) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229da31864e9 ; [fp - 24] 0x229da31864e9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}80485>
      3: 0x229da3186511 ; [fp - 32] 0x229da3186511 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229da31864e9 ;  0x229da31864e9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}80485>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229da3186511 ;  0x229da3186511 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.269 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d75272f19 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d7527a621 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500274
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500274
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500274
  - size:157, name: 
  #150:JSCall, frequency: 0.500274
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499726
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500274
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500274
  - size:157, name: 
  #150:JSCall, frequency: 0.500274
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499726
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500274
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500274
  - size:157, name: 
  #150:JSCall, frequency: 0.500274
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499726
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500274
  - size:157, name: 
  #150:JSCall, frequency: 0.500274
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499726
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500274
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499726
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499726
  - size:85, name: endHandlerTimer
[optimizing 0x229d7527a621 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.211, 5.040, 0.062 ms]
[completed optimizing 0x229d7527a621 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666719
  - size:25, name: digest
  #152:JSCall, frequency: 0.666719
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666719
  - size:25, name: digest
  #152:JSCall, frequency: 0.666719
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666719
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.825, 2.276, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #270) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc178ba91 ; [fp - 24] 0x229dc178ba91 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}82361>
      3: 0x229dc178bab9 ; [fp - 32] 0x229dc178bab9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d70: [top + 136] <- 0x229dc178ba91 ;  0x229dc178ba91 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}82361>  (input #2)
    0x7ffeefbf4d68: [top + 128] <- 0x229dc178bab9 ;  0x229dc178bab9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d58: [top + 112] <- 0x7ffeefbf4d88 ;  caller's fp
    0x7ffeefbf4d50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cf8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4cf0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ce8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d80, state=TOS_REGISTER, took 15.794 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dfe1d6be9 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[marking 0x229dfe1d7ad1 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229dfe1d7ad1 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[compiling method 0x229dfe1dd001 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229dfe1d7ad1 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.086, 0.318, 0.020 ms]
[completed optimizing 0x229dfe1d7ad1 <JSFunction getType (sfi = 0x229df8185e51)>]
[optimizing 0x229dfe1dd001 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.548, 2.784, 0.026 ms]
[completed optimizing 0x229dfe1dd001 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d4672e8b9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d4672fa99 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d4672fa99 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.161, 0.953, 0.011 ms]
[completed optimizing 0x229d4672fa99 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d80692db1 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d8069aec9 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d8069aec9 <JSFunction f (sfi = 0x229d08f55139)> - took 0.112, 0.476, 0.010 ms]
[completed optimizing 0x229d8069aec9 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3e6ee9 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3e80e9 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3e80e9 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.519, 0.406, 0.012 ms]
[completed optimizing 0x229d8b3e80e9 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666738
  - size:25, name: digest
  #152:JSCall, frequency: 0.666738
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666738
  - size:25, name: digest
  #152:JSCall, frequency: 0.666738
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666738
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.850, 2.301, 0.034 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #276) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d1cc46bb9 ; [fp - 24] 0x229d1cc46bb9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}84250>
      3: 0x229d1cc46be1 ; [fp - 32] 0x229d1cc46be1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229d1cc46bb9 ;  0x229d1cc46bb9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}84250>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229d1cc46be1 ;  0x229d1cc46be1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 15.439 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0e39f489 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d0e3a6ba9 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d0e3a6ba9 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.233, 4.301, 0.049 ms]
[completed optimizing 0x229d0e3a6ba9 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d5c89f711 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8a74e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8a74e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.543, 0.635, 0.015 ms]
[completed optimizing 0x229d5c8a74e1 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d8b393d39 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d8b39bc19 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d8b39bc19 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.679, 2.003, 0.029 ms]
[completed optimizing 0x229d8b39bc19 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666717
  - size:25, name: digest
  #152:JSCall, frequency: 0.666717
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666717
  - size:25, name: digest
  #152:JSCall, frequency: 0.666717
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666717
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.809, 2.322, 0.033 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #280) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d2a105ca9 ; [fp - 24] 0x229d2a105ca9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}86141>
      3: 0x229d2a105cd1 ; [fp - 32] 0x229d2a105cd1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d2a105ca9 ;  0x229d2a105ca9 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}86141>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d2a105cd1 ;  0x229d2a105cd1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.056 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dee89f5a1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229dee8a7361 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229dee8a7361 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.114, 0.575, 0.008 ms]
[completed optimizing 0x229dee8a7361 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229dea224e39 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea22cbf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea22cbf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.471, 0.421, 0.014 ms]
[completed optimizing 0x229dea22cbf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d4529a7f9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d452a14e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d452a14e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.386, 2.139, 0.023 ms]
[completed optimizing 0x229d452a14e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666674
  - size:25, name: digest
  #152:JSCall, frequency: 0.666674
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666674
  - size:25, name: digest
  #152:JSCall, frequency: 0.666674
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666674
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.736, 2.422, 0.035 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #284) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d806ad121 ; [fp - 24] 0x229d806ad121 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}88028>
      3: 0x229d806ad149 ; [fp - 32] 0x229d806ad149 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d806ad121 ;  0x229d806ad121 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}88028>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d806ad149 ;  0x229d806ad149 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 14.618 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666618
  - size:25, name: digest
  #152:JSCall, frequency: 0.666618
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666618
  - size:25, name: digest
  #152:JSCall, frequency: 0.666618
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666618
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.863, 2.854, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #285) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d360f31f1 ; [fp - 24] 0x229d360f31f1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}89904>
      3: 0x229d360f3219 ; [fp - 32] 0x229d360f3219 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d360f31f1 ;  0x229d360f31f1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}89904>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d360f3219 ;  0x229d360f3219 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.770 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1.0001
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.666605
  - size:25, name: digest
  #330:JSCall, frequency: 0.666605
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.666605
  - size:25, name: digest
  #330:JSCall, frequency: 0.666605
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.666605
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 3.685, 3.035, 0.044 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #286) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf5070]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229d6ffa4699 ; [fp + 32] 0x229d6ffa4699 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229d6ffa49f1 ; [fp + 24] 0x229d6ffa49f1 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229d6ffa61b9 ; [fp + 16] 0x229d6ffa61b9 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d6ffa6291 ; [fp - 24] 0x229d6ffa6291 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}91560>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229d6ffa6291 ; [fp - 32] 0x229d6ffa6291 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}91560>
      3: 0x229d6ffa62b9 ; [fp - 40] 0x229d6ffa62b9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf5068: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf5060: [top + 104] <- 0x229d6ffa4699 ;  0x229d6ffa4699 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf5058: [top + 96] <- 0x229d6ffa49f1 ;  0x229d6ffa49f1 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf5050: [top + 88] <- 0x229d6ffa61b9 ;  0x229d6ffa61b9 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf5048: [top + 80] <- 0xc4cc397b177 ;  caller's pc
    0x7ffeefbf5040: [top + 72] <- 0x7ffeefbf50e8 ;  caller's fp
    0x7ffeefbf5038: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf5030: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf5028: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5020: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf5018: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf5010: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5008: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5000: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4ff8: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4ff0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fe8: [top + 136] <- 0x229d6ffa6291 ;  0x229d6ffa6291 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}91560>  (input #2)
    0x7ffeefbf4fe0: [top + 128] <- 0x229d6ffa62b9 ;  0x229d6ffa62b9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fd8: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4fd0: [top + 112] <- 0x7ffeefbf5040 ;  caller's fp
    0x7ffeefbf4fc8: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fc0: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fb8: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4fb0: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4fa8: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4fa0: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f98: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f90: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f88: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f80: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f78: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f70: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f68: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f60: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5070, state=TOS_REGISTER, took 23.460 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666619
  - size:25, name: digest
  #152:JSCall, frequency: 0.666619
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666619
  - size:25, name: digest
  #152:JSCall, frequency: 0.666619
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666619
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.699, 2.305, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #287) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229da319d079 ; [fp - 24] 0x229da319d079 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}91793>
      3: 0x229da319d0a1 ; [fp - 32] 0x229da319d0a1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229da319d079 ;  0x229da319d079 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}91793>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229da319d0a1 ;  0x229da319d0a1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 14.513 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4e8ecef1 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d4e8ee0d1 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d4e8ee0d1 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.089, 0.322, 0.018 ms]
[completed optimizing 0x229d4e8ee0d1 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d2a106011 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d2a10cd49 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[marking 0x229d2a10aec1 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d2a112cb1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.50028
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.50028
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.50028
  - size:157, name: 
  #150:JSCall, frequency: 0.50028
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.49972
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.50028
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.50028
  - size:157, name: 
  #150:JSCall, frequency: 0.50028
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.49972
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.50028
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.50028
  - size:157, name: 
  #150:JSCall, frequency: 0.50028
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.49972
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.50028
  - size:157, name: 
  #150:JSCall, frequency: 0.50028
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.49972
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.50028
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.49972
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.49972
  - size:85, name: endHandlerTimer
[optimizing 0x229d2a10cd49 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.479, 2.671, 0.022 ms]
[completed optimizing 0x229d2a10cd49 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[optimizing 0x229d2a112cb1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 5.770, 4.917, 0.052 ms]
[completed optimizing 0x229d2a112cb1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229dfa1193e1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa11f7e9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa11f7e9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.164, 1.024, 0.011 ms]
[completed optimizing 0x229dfa11f7e9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d7590bdd9 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d759130f9 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d759130f9 <JSFunction f (sfi = 0x229d08f55139)> - took 0.113, 0.474, 0.010 ms]
[completed optimizing 0x229d759130f9 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666631
  - size:25, name: digest
  #152:JSCall, frequency: 0.666631
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666631
  - size:25, name: digest
  #152:JSCall, frequency: 0.666631
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666631
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.902, 2.252, 0.034 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #293) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d575de549 ; [fp - 24] 0x229d575de549 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}93676>
      3: 0x229d575de571 ; [fp - 32] 0x229d575de571 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229d575de549 ;  0x229d575de549 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}93676>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229d575de571 ;  0x229d575de571 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 14.644 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d02be80e9 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d02be80e9 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d02be80e9 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.471, 0.431, 0.011 ms]
[completed optimizing 0x229d02be80e9 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229de98a0b71 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de98a8269 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229de98a8269 <JSFunction (sfi = 0x229d3a3f31c9)> - took 4.831, 4.173, 0.059 ms]
[completed optimizing 0x229de98a8269 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666614
  - size:25, name: digest
  #152:JSCall, frequency: 0.666614
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666614
  - size:25, name: digest
  #152:JSCall, frequency: 0.666614
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666614
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.723, 2.285, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #296) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d7e687c59 ; [fp - 24] 0x229d7e687c59 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}95562>
      3: 0x229d7e687c81 ; [fp - 32] 0x229d7e687c81 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d7e687c59 ;  0x229d7e687c59 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}95562>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d7e687c81 ;  0x229d7e687c81 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 14.630 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d61ea2b21 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61eaa241 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61eaa241 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.538, 0.630, 0.015 ms]
[completed optimizing 0x229d61eaa241 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d23ff67a9 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d23ffdec9 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d23ffdec9 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.540, 1.644, 0.026 ms]
[completed optimizing 0x229d23ffdec9 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d641b1839 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641b95f9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641b95f9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.479, 0.413, 0.013 ms]
[completed optimizing 0x229d641b95f9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666502
  - size:25, name: digest
  #152:JSCall, frequency: 0.666502
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666502
  - size:25, name: digest
  #152:JSCall, frequency: 0.666502
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666502
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.741, 2.377, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #300) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d2a17a519 ; [fp - 24] 0x229d2a17a519 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}97443>
      3: 0x229d2a17a541 ; [fp - 32] 0x229d2a17a541 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d2a17a519 ;  0x229d2a17a519 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}97443>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d2a17a541 ;  0x229d2a17a541 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 14.769 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d824afcb1 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d824b0e91 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d824b0e91 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.383, 1.953, 0.015 ms]
[completed optimizing 0x229d824b0e91 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666512
  - size:25, name: digest
  #152:JSCall, frequency: 0.666512
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666512
  - size:25, name: digest
  #152:JSCall, frequency: 0.666512
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666512
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.740, 2.325, 0.038 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d155022a9 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #302) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d155720f1 ; [fp - 24] 0x229d155720f1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}99326>
      3: 0x229d15572119 ; [fp - 32] 0x229d15572119 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d155720f1 ;  0x229d155720f1 <String[973]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}99326>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d15572119 ;  0x229d15572119 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 14.519 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[compiling method 0x229d15579059 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d15579059 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.106, 0.595, 0.007 ms]
[completed optimizing 0x229d15579059 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666521
  - size:25, name: digest
  #152:JSCall, frequency: 0.666521
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666521
  - size:25, name: digest
  #152:JSCall, frequency: 0.666521
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666521
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.751, 2.205, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #304) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d7d4942f1 ; [fp - 24] 0x229d7d4942f1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}101212>
      3: 0x229d7d494319 ; [fp - 32] 0x229d7d494319 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d7d4942f1 ;  0x229d7d4942f1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}101212>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d7d494319 ;  0x229d7d494319 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 14.749 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666482
  - size:25, name: digest
  #152:JSCall, frequency: 0.666482
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666482
  - size:25, name: digest
  #152:JSCall, frequency: 0.666482
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666482
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.983, 2.207, 0.040 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #305) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229da31f7a49 ; [fp - 24] 0x229da31f7a49 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}103092>
      3: 0x229da31f7a71 ; [fp - 32] 0x229da31f7a71 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229da31f7a49 ;  0x229da31f7a49 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}103092>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229da31f7a71 ;  0x229da31f7a71 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 14.644 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d7526c0e1 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d75273ec1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500262
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500262
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500262
  - size:157, name: 
  #150:JSCall, frequency: 0.500262
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499738
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500262
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500262
  - size:157, name: 
  #150:JSCall, frequency: 0.500262
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499738
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500262
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500262
  - size:157, name: 
  #150:JSCall, frequency: 0.500262
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499738
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500262
  - size:157, name: 
  #150:JSCall, frequency: 0.500262
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499738
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500262
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499738
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499738
  - size:85, name: endHandlerTimer
[optimizing 0x229d75273ec1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 5.910, 5.020, 0.065 ms]
[completed optimizing 0x229d75273ec1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229dfe1df0b9 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229dfe1df0b9 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229dfe1df0b9 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.086, 0.333, 0.010 ms]
[completed optimizing 0x229dfe1df0b9 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229dfe1f4dc9 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229dfe1f4dc9 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229dfe1f4dc9 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.486, 2.701, 0.025 ms]
[completed optimizing 0x229dfe1f4dc9 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d46720dc9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d46721fa9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d46721fa9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.164, 1.065, 0.012 ms]
[completed optimizing 0x229d46721fa9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d80694839 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d8069c209 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d8069c209 <JSFunction f (sfi = 0x229d08f55139)> - took 0.115, 0.471, 0.010 ms]
[completed optimizing 0x229d8069c209 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3f1b91 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3f1b91 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3f1b91 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.478, 0.416, 0.012 ms]
[completed optimizing 0x229d8b3f1b91 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666492
  - size:25, name: digest
  #152:JSCall, frequency: 0.666492
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666492
  - size:25, name: digest
  #152:JSCall, frequency: 0.666492
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666492
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.743, 2.253, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #312) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d0e3fa179 ; [fp - 24] 0x229d0e3fa179 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}104978>
      3: 0x229d0e3fa1a1 ; [fp - 32] 0x229d0e3fa1a1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229d0e3fa179 ;  0x229d0e3fa179 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}104978>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229d0e3fa1a1 ;  0x229d0e3fa1a1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 14.841 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0e397d91 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d0e39f489 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d0e39f489 <JSFunction (sfi = 0x229d3a3f31c9)> - took 4.873, 4.289, 0.053 ms]
[completed optimizing 0x229d0e39f489 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666501
  - size:25, name: digest
  #152:JSCall, frequency: 0.666501
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666501
  - size:25, name: digest
  #152:JSCall, frequency: 0.666501
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666501
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.757, 2.211, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #314) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d5c890d79 ; [fp - 24] 0x229d5c890d79 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}106862>
      3: 0x229d5c890da1 ; [fp - 32] 0x229d5c890da1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d5c890d79 ;  0x229d5c890d79 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}106862>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d5c890da1 ;  0x229d5c890da1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 14.689 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d5c8a7511 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8aec09 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8aec09 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.501, 0.647, 0.016 ms]
[completed optimizing 0x229d5c8aec09 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d8b393d39 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d8b39bc19 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d8b39bc19 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.782, 1.805, 0.027 ms]
[completed optimizing 0x229d8b39bc19 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229dea22dfe9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea2356d1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea2356d1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.482, 0.417, 0.012 ms]
[completed optimizing 0x229dea2356d1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666489
  - size:25, name: digest
  #152:JSCall, frequency: 0.666489
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666489
  - size:25, name: digest
  #152:JSCall, frequency: 0.666489
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666489
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.742, 2.213, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #318) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229df9cb2f49 ; [fp - 24] 0x229df9cb2f49 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}108750>
      3: 0x229df9cb2f71 ; [fp - 32] 0x229df9cb2f71 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229df9cb2f49 ;  0x229df9cb2f49 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}108750>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229df9cb2f71 ;  0x229df9cb2f71 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 29.776 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d452a25b9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d452a8ae9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d452a8ae9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.381, 1.941, 0.015 ms]
[completed optimizing 0x229d452a8ae9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666477
  - size:25, name: digest
  #152:JSCall, frequency: 0.666477
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666477
  - size:25, name: digest
  #152:JSCall, frequency: 0.666477
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666477
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.023, 2.244, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #320) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dcef24891 ; [fp - 24] 0x229dcef24891 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}110632>
      3: 0x229dcef248b9 ; [fp - 32] 0x229dcef248b9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229dcef24891 ;  0x229dcef24891 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}110632>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229dcef248b9 ;  0x229dcef248b9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 15.339 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d75904729 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d7590be11 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d7590be11 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.116, 0.584, 0.010 ms]
[completed optimizing 0x229d7590be11 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666486
  - size:25, name: digest
  #152:JSCall, frequency: 0.666486
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666486
  - size:25, name: digest
  #152:JSCall, frequency: 0.666486
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666486
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.815, 2.221, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #322) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d2a7c2649 ; [fp - 24] 0x229d2a7c2649 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}112518>
      3: 0x229d2a7c2671 ; [fp - 32] 0x229d2a7c2671 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d2a7c2649 ;  0x229d2a7c2649 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}112518>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d2a7c2671 ;  0x229d2a7c2671 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.245 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1.0001
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.666494
  - size:25, name: digest
  #330:JSCall, frequency: 0.666494
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.666494
  - size:25, name: digest
  #330:JSCall, frequency: 0.666494
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.666494
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666486
  - size:25, name: digest
  #152:JSCall, frequency: 0.666486
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666486
  - size:25, name: digest
  #152:JSCall, frequency: 0.666486
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666486
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 4.101, 2.962, 0.051 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #323) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf4dc0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229de87b7501 ; [fp + 32] 0x229de87b7501 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229de87b7859 ; [fp + 24] 0x229de87b7859 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229de87b9031 ; [fp + 16] 0x229de87b9031 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229de87b9109 ; [fp - 24] 0x229de87b9109 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}114381>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229de87b9109 ; [fp - 32] 0x229de87b9109 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}114381>
      3: 0x229de87b9131 ; [fp - 40] 0x229de87b9131 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf4db8: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf4db0: [top + 104] <- 0x229de87b7501 ;  0x229de87b7501 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf4da8: [top + 96] <- 0x229de87b7859 ;  0x229de87b7859 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf4da0: [top + 88] <- 0x229de87b9031 ;  0x229de87b9031 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf4d98: [top + 80] <- 0xc4cc38f4048 ;  caller's pc
    0x7ffeefbf4d90: [top + 72] <- 0x7ffeefbf4df8 ;  caller's fp
    0x7ffeefbf4d88: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf4d80: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf4d78: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf4d68: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf4d60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4d50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4d48: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d40: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d38: [top + 136] <- 0x229de87b9109 ;  0x229de87b9109 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}114381>  (input #2)
    0x7ffeefbf4d30: [top + 128] <- 0x229de87b9131 ;  0x229de87b9131 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d28: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4d20: [top + 112] <- 0x7ffeefbf4d90 ;  caller's fp
    0x7ffeefbf4d18: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d10: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d08: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d00: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4cf8: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4cf0: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4ce8: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4ce0: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4cd8: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4cd0: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cc8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cc0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4cb8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4cb0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4dc0, state=TOS_REGISTER, took 25.975 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.175, 2.179, 0.038 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #324) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d30]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de87deb21 ; [fp - 24] 0x229de87deb21 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}114386>
      3: 0x229de87deb49 ; [fp - 32] 0x229de87deb49 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d28: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d20: [top + 136] <- 0x229de87deb21 ;  0x229de87deb21 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}114386>  (input #2)
    0x7ffeefbf4d18: [top + 128] <- 0x229de87deb49 ;  0x229de87deb49 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d10: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d08: [top + 112] <- 0x7ffeefbf4d38 ;  caller's fp
    0x7ffeefbf4d00: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4cf8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4cf0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ce8: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4ce0: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4cd8: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4cd0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4cc8: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4cc0: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4cb8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cb0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ca8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ca0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4c98: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d30, state=TOS_REGISTER, took 15.180 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4e8d8921 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d4e8ded39 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d4e8ded39 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.087, 0.351, 0.010 ms]
[completed optimizing 0x229d4e8ded39 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d2a12ac79 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d2a132381 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500269
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500269
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500269
  - size:157, name: 
  #150:JSCall, frequency: 0.500269
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499731
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500269
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500269
  - size:157, name: 
  #150:JSCall, frequency: 0.500269
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499731
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500269
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500269
  - size:157, name: 
  #150:JSCall, frequency: 0.500269
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499731
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500269
  - size:157, name: 
  #150:JSCall, frequency: 0.500269
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499731
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500269
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499731
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499731
  - size:85, name: endHandlerTimer
[marking 0x229d418a14c1 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d418a80c1 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d2a132381 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.250, 4.924, 0.050 ms]
[completed optimizing 0x229d2a132381 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[optimizing 0x229d418a80c1 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.527, 3.156, 0.044 ms]
[completed optimizing 0x229d418a80c1 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229dfa1296c9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa12fbe1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa12fbe1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.163, 0.958, 0.012 ms]
[completed optimizing 0x229dfa12fbe1 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d7590cd19 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d75914439 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d75914439 <JSFunction f (sfi = 0x229d08f55139)> - took 0.113, 0.469, 0.012 ms]
[completed optimizing 0x229d75914439 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.493, 0.482, 0.012 ms]
[completed optimizing 0x229d02bf0991 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666469
  - size:25, name: digest
  #152:JSCall, frequency: 0.666469
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666469
  - size:25, name: digest
  #152:JSCall, frequency: 0.666469
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666469
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.826, 2.271, 0.033 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #331) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d23fa90a9 ; [fp - 24] 0x229d23fa90a9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}116295>
      3: 0x229d23fa90d1 ; [fp - 32] 0x229d23fa90d1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229d23fa90a9 ;  0x229d23fa90a9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}116295>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229d23fa90d1 ;  0x229d23fa90d1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 15.261 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de988ffc1 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de9897d91 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229de9897d91 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.214, 4.343, 0.052 ms]
[completed optimizing 0x229de9897d91 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d61e9f711 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61ea74e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61ea74e1 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.556, 0.637, 0.015 ms]
[completed optimizing 0x229d61ea74e1 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666475
  - size:25, name: digest
  #152:JSCall, frequency: 0.666475
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666475
  - size:25, name: digest
  #152:JSCall, frequency: 0.666475
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666475
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.835, 2.220, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d6ffa7781 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d6ffaee69 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d6ffaee69 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.101, 0.544, 0.007 ms]
[completed optimizing 0x229d6ffaee69 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #334) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4ee8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d6ffdc779 ; [fp - 24] 0x229d6ffdc779 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}118183>
      3: 0x229d6ffdc7a1 ; [fp - 32] 0x229d6ffdc7a1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4ee0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4ed8: [top + 136] <- 0x229d6ffdc779 ;  0x229d6ffdc779 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}118183>  (input #2)
    0x7ffeefbf4ed0: [top + 128] <- 0x229d6ffdc7a1 ;  0x229d6ffdc7a1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4ec8: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4ec0: [top + 112] <- 0x7ffeefbf4ef0 ;  caller's fp
    0x7ffeefbf4eb8: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4eb0: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4ea8: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ea0: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e98: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e90: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e88: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e80: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e78: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e70: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e68: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4e60: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4e58: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4e50: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4ee8, state=TOS_REGISTER, took 15.294 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d02b8c751 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d02b93d39 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d02b93d39 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.591, 1.735, 0.027 ms]
[completed optimizing 0x229d02b93d39 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d641acbf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641b42e1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641b42e1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.494, 0.411, 0.013 ms]
[completed optimizing 0x229d641b42e1 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d82499151 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d8249a331 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d8249a331 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.378, 1.919, 0.015 ms]
[completed optimizing 0x229d8249a331 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666453
  - size:25, name: digest
  #152:JSCall, frequency: 0.666453
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666453
  - size:25, name: digest
  #152:JSCall, frequency: 0.666453
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666453
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.836, 2.215, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #339) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc78ef479 ; [fp - 24] 0x229dc78ef479 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}120069>
      3: 0x229dc78ef4a1 ; [fp - 32] 0x229dc78ef4a1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229dc78ef479 ;  0x229dc78ef479 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}120069>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229dc78ef4a1 ;  0x229dc78ef4a1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.469 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.66647
  - size:25, name: digest
  #152:JSCall, frequency: 0.66647
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.66647
  - size:25, name: digest
  #152:JSCall, frequency: 0.66647
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.66647
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.833, 2.289, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #340) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de98f87b9 ; [fp - 24] 0x229de98f87b9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}121954>
      3: 0x229de98f87e1 ; [fp - 32] 0x229de98f87e1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229de98f87b9 ;  0x229de98f87b9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}121954>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229de98f87e1 ;  0x229de98f87e1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.262 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.66647
  - size:25, name: digest
  #152:JSCall, frequency: 0.66647
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.66647
  - size:25, name: digest
  #152:JSCall, frequency: 0.66647
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.66647
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.854, 2.305, 0.042 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #341) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d61e89921 ; [fp - 24] 0x229d61e89921 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}123838>
      3: 0x229d61e89949 ; [fp - 32] 0x229d61e89949 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d61e89921 ;  0x229d61e89921 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}123838>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d61e89949 ;  0x229d61e89949 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.389 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dfe1d75f1 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229dfe1d75f1 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229dfe1d75f1 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.092, 0.416, 0.029 ms]
[completed optimizing 0x229dfe1d75f1 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d7df06011 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d7df0cd49 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d7df0cd49 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.531, 2.671, 0.024 ms]
[completed optimizing 0x229d7df0cd49 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d3d6e1b99 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d3d6e92c9 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500247
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500247
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500247
  - size:157, name: 
  #150:JSCall, frequency: 0.500247
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499753
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500247
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500247
  - size:157, name: 
  #150:JSCall, frequency: 0.500247
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499753
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500247
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500247
  - size:157, name: 
  #150:JSCall, frequency: 0.500247
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499753
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500247
  - size:157, name: 
  #150:JSCall, frequency: 0.500247
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499753
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500247
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499753
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499753
  - size:85, name: endHandlerTimer
[optimizing 0x229d3d6e92c9 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.164, 4.960, 0.050 ms]
[completed optimizing 0x229d3d6e92c9 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666478
  - size:25, name: digest
  #152:JSCall, frequency: 0.666478
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666478
  - size:25, name: digest
  #152:JSCall, frequency: 0.666478
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666478
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.823, 2.201, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #345) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc65d59c9 ; [fp - 24] 0x229dc65d59c9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}125731>
      3: 0x229dc65d59f1 ; [fp - 32] 0x229dc65d59f1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d70: [top + 136] <- 0x229dc65d59c9 ;  0x229dc65d59c9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}125731>  (input #2)
    0x7ffeefbf4d68: [top + 128] <- 0x229dc65d59f1 ;  0x229dc65d59f1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d58: [top + 112] <- 0x7ffeefbf4d88 ;  caller's fp
    0x7ffeefbf4d50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cf8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4cf0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ce8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d80, state=TOS_REGISTER, took 15.612 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d467271c1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d467283a1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d467283a1 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.177, 1.059, 0.012 ms]
[completed optimizing 0x229d467283a1 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d80693059 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d8069aac1 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d8069aac1 <JSFunction f (sfi = 0x229d08f55139)> - took 0.111, 0.476, 0.011 ms]
[completed optimizing 0x229d8069aac1 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3e71d1 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3e83d1 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3e83d1 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.518, 0.419, 0.012 ms]
[completed optimizing 0x229d8b3e83d1 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0e396df9 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d0e39e519 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666423
  - size:25, name: digest
  #152:JSCall, frequency: 0.666423
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666423
  - size:25, name: digest
  #152:JSCall, frequency: 0.666423
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666423
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0e39e519 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.058, 4.311, 0.045 ms]
[completed optimizing 0x229d0e39e519 <JSFunction (sfi = 0x229d3a3f31c9)>]
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.802, 2.254, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #350) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d02ba01b1 ; [fp - 24] 0x229d02ba01b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}127607>
      3: 0x229d02ba01d9 ; [fp - 32] 0x229d02ba01d9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d02ba01b1 ;  0x229d02ba01b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}127607>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d02ba01d9 ;  0x229d02ba01d9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.538 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d5c89e221 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8a5ff1 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8a5ff1 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.558, 0.677, 0.015 ms]
[completed optimizing 0x229d5c8a5ff1 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d8b389fb9 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d8b3916d9 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d8b3916d9 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.605, 1.736, 0.025 ms]
[completed optimizing 0x229d8b3916d9 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666442
  - size:25, name: digest
  #152:JSCall, frequency: 0.666442
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666442
  - size:25, name: digest
  #152:JSCall, frequency: 0.666442
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666442
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.852, 2.240, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #353) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d5cca7b91 ; [fp - 24] 0x229d5cca7b91 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}129506>
      3: 0x229d5cca7bb9 ; [fp - 32] 0x229d5cca7bb9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d5cca7b91 ;  0x229d5cca7b91 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}129506>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d5cca7bb9 ;  0x229d5cca7bb9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.389 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dea22aac9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea232889 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea232889 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.487, 0.418, 0.023 ms]
[completed optimizing 0x229dea232889 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d45292559 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d45298a89 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d45298a89 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.382, 1.863, 0.015 ms]
[completed optimizing 0x229d45298a89 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666404
  - size:25, name: digest
  #152:JSCall, frequency: 0.666404
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666404
  - size:25, name: digest
  #152:JSCall, frequency: 0.666404
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666404
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.032, 2.397, 0.033 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #356) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dfe1d7d99 ; [fp - 24] 0x229dfe1d7d99 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}130763>
      3: 0x229dfe1d7dc1 ; [fp - 32] 0x229dfe1d7dc1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229dfe1d7d99 ;  0x229dfe1d7d99 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}130763>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229dfe1d7dc1 ;  0x229dfe1d7dc1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 15.352 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dca38f9a1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229dca3970b1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229dca3970b1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.117, 0.576, 0.009 ms]
[completed optimizing 0x229dca3970b1 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666395
  - size:25, name: digest
  #152:JSCall, frequency: 0.666395
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666395
  - size:25, name: digest
  #152:JSCall, frequency: 0.666395
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666395
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.856, 2.254, 0.034 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #358) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d452e7a01 ; [fp - 24] 0x229d452e7a01 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}132647>
      3: 0x229d452e7a29 ; [fp - 32] 0x229d452e7a29 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d452e7a01 ;  0x229d452e7a01 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}132647>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d452e7a29 ;  0x229d452e7a29 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.390 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666282
  - size:25, name: digest
  #152:JSCall, frequency: 0.666282
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666282
  - size:25, name: digest
  #152:JSCall, frequency: 0.666282
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666282
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.839, 2.219, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #359) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d84a6b579 ; [fp - 24] 0x229d84a6b579 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}134531>
      3: 0x229d84a6b5a1 ; [fp - 32] 0x229d84a6b5a1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d84a6b579 ;  0x229d84a6b579 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}134531>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d84a6b5a1 ;  0x229d84a6b5a1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 18.778 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d4e8debe9 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d4e8debe9 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[marking 0x229d4e8e5c01 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[optimizing 0x229d4e8debe9 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.086, 0.312, 0.018 ms]
[completed optimizing 0x229d4e8debe9 <JSFunction getType (sfi = 0x229df8185e51)>]
[compiling method 0x229d4e8ec019 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[marking 0x229d2a112ce1 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d2a11aac1 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500254
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500254
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500254
  - size:157, name: 
  #150:JSCall, frequency: 0.500254
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499746
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500254
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500254
  - size:157, name: 
  #150:JSCall, frequency: 0.500254
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499746
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500254
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500254
  - size:157, name: 
  #150:JSCall, frequency: 0.500254
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499746
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500254
  - size:157, name: 
  #150:JSCall, frequency: 0.500254
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499746
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500254
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499746
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499746
  - size:85, name: endHandlerTimer
[optimizing 0x229d4e8ec019 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.525, 2.732, 0.025 ms]
[completed optimizing 0x229d4e8ec019 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[optimizing 0x229d2a11aac1 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.088, 5.033, 0.063 ms]
[completed optimizing 0x229d2a11aac1 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666319
  - size:25, name: digest
  #152:JSCall, frequency: 0.666319
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666319
  - size:25, name: digest
  #152:JSCall, frequency: 0.666319
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666319
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.733, 2.288, 0.029 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #363) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dc78add21 ; [fp - 24] 0x229dc78add21 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}136418>
      3: 0x229dc78add49 ; [fp - 32] 0x229dc78add49 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d70: [top + 136] <- 0x229dc78add21 ;  0x229dc78add21 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}136418>  (input #2)
    0x7ffeefbf4d68: [top + 128] <- 0x229dc78add49 ;  0x229dc78add49 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d58: [top + 112] <- 0x7ffeefbf4d88 ;  caller's fp
    0x7ffeefbf4d50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cf8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4cf0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ce8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d80, state=TOS_REGISTER, took 15.409 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dfa123119 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa129631 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa129631 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.161, 0.957, 0.011 ms]
[completed optimizing 0x229dfa129631 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d7590b509 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d75912c01 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d75912c01 <JSFunction f (sfi = 0x229d08f55139)> - took 0.113, 0.476, 0.011 ms]
[completed optimizing 0x229d75912c01 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d02be92e1 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d02be92e1 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d02be92e1 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.514, 0.413, 0.011 ms]
[completed optimizing 0x229d02be92e1 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1.00011
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.666314
  - size:25, name: digest
  #330:JSCall, frequency: 0.666314
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.666314
  - size:25, name: digest
  #330:JSCall, frequency: 0.666314
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.666314
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 3.842, 3.083, 0.046 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #367) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf4e48]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229db8893741 ; [fp + 32] 0x229db8893741 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229db8893a99 ; [fp + 24] 0x229db8893a99 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229db8895261 ; [fp + 16] 0x229db8895261 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229db8895339 ; [fp - 24] 0x229db8895339 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}137215>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229db8895339 ; [fp - 32] 0x229db8895339 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}137215>
      3: 0x229db8895361 ; [fp - 40] 0x229db8895361 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf4e40: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf4e38: [top + 104] <- 0x229db8893741 ;  0x229db8893741 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf4e30: [top + 96] <- 0x229db8893a99 ;  0x229db8893a99 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf4e28: [top + 88] <- 0x229db8895261 ;  0x229db8895261 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf4e20: [top + 80] <- 0xc4cc397b177 ;  caller's pc
    0x7ffeefbf4e18: [top + 72] <- 0x7ffeefbf4ec0 ;  caller's fp
    0x7ffeefbf4e10: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf4e08: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf4e00: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4df8: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf4df0: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf4de8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4de0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4dd8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4dd0: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4dc8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4dc0: [top + 136] <- 0x229db8895339 ;  0x229db8895339 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}137215>  (input #2)
    0x7ffeefbf4db8: [top + 128] <- 0x229db8895361 ;  0x229db8895361 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4db0: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4da8: [top + 112] <- 0x7ffeefbf4e18 ;  caller's fp
    0x7ffeefbf4da0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d98: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d90: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d88: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d80: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d78: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d70: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d68: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d60: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d58: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d50: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d48: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d40: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d38: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e48, state=TOS_REGISTER, took 24.586 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666338
  - size:25, name: digest
  #152:JSCall, frequency: 0.666338
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666338
  - size:25, name: digest
  #152:JSCall, frequency: 0.666338
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666338
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.820, 2.292, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #368) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229de98b77b1 ; [fp - 24] 0x229de98b77b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}138302>
      3: 0x229de98b77d9 ; [fp - 32] 0x229de98b77d9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229de98b77b1 ;  0x229de98b77b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}138302>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229de98b77d9 ;  0x229de98b77d9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 15.409 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de98e4da1 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de98ec499 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229de98ec499 <JSFunction (sfi = 0x229d3a3f31c9)> - took 4.799, 4.315, 0.048 ms]
[completed optimizing 0x229de98ec499 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229d61eafdf1 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61eb7bc1 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61eb7bc1 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.550, 0.640, 0.014 ms]
[completed optimizing 0x229d61eb7bc1 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d02b8af59 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d02b92679 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d02b92679 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.683, 1.713, 0.029 ms]
[completed optimizing 0x229d02b92679 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666305
  - size:25, name: digest
  #152:JSCall, frequency: 0.666305
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666305
  - size:25, name: digest
  #152:JSCall, frequency: 0.666305
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666305
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.823, 2.397, 0.046 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #372) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d61ea9149 ; [fp - 24] 0x229d61ea9149 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}140198>
      3: 0x229d61ea9171 ; [fp - 32] 0x229d61ea9171 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d61ea9149 ;  0x229d61ea9149 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}140198>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d61ea9171 ;  0x229d61ea9171 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.500 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d641a4e99 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641acc59 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641acc59 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.490, 0.410, 0.014 ms]
[completed optimizing 0x229d641acc59 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d824ac161 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d824ad341 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d824ad341 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.382, 1.886, 0.017 ms]
[completed optimizing 0x229d824ad341 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d9354eb01 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d935568c1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d935568c1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.115, 0.632, 0.009 ms]
[completed optimizing 0x229d935568c1 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666232
  - size:25, name: digest
  #152:JSCall, frequency: 0.666232
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666232
  - size:25, name: digest
  #152:JSCall, frequency: 0.666232
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666232
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.903, 2.326, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #376) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d145ad0b1 ; [fp - 24] 0x229d145ad0b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}142082>
      3: 0x229d145ad0d9 ; [fp - 32] 0x229d145ad0d9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d145ad0b1 ;  0x229d145ad0b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}142082>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d145ad0d9 ;  0x229d145ad0d9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.166 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666242
  - size:25, name: digest
  #152:JSCall, frequency: 0.666242
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666242
  - size:25, name: digest
  #152:JSCall, frequency: 0.666242
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666242
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.808, 2.293, 0.028 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #377) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229ded8454b1 ; [fp - 24] 0x229ded8454b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}144003>
      3: 0x229ded8454d9 ; [fp - 32] 0x229ded8454d9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229ded8454b1 ;  0x229ded8454b1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}144003>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229ded8454d9 ;  0x229ded8454d9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.151 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666293
  - size:25, name: digest
  #152:JSCall, frequency: 0.666293
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666293
  - size:25, name: digest
  #152:JSCall, frequency: 0.666293
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666293
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.830, 2.692, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #378) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d6ff87d29 ; [fp - 24] 0x229d6ff87d29 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}145894>
      3: 0x229d6ff87d51 ; [fp - 32] 0x229d6ff87d51 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d6ff87d29 ;  0x229d6ff87d29 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}145894>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d6ff87d51 ;  0x229d6ff87d51 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 26.868 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229dfe1e8649 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229dfe1eea61 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229dfe1eea61 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.086, 0.314, 0.020 ms]
[completed optimizing 0x229dfe1eea61 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d7df66d21 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d7df6e429 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500236
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500236
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500236
  - size:157, name: 
  #150:JSCall, frequency: 0.500236
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499764
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500236
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500236
  - size:157, name: 
  #150:JSCall, frequency: 0.500236
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499764
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500236
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500236
  - size:157, name: 
  #150:JSCall, frequency: 0.500236
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499764
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500236
  - size:157, name: 
  #150:JSCall, frequency: 0.500236
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499764
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500236
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499764
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499764
  - size:85, name: endHandlerTimer
[marking 0x229d3d68aa59 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d3d691659 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d7df6e429 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.110, 5.071, 0.063 ms]
[completed optimizing 0x229d7df6e429 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[optimizing 0x229d3d691659 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.490, 2.782, 0.030 ms]
[completed optimizing 0x229d3d691659 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229d467165d9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229d467177b9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229d467177b9 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.163, 0.952, 0.011 ms]
[completed optimizing 0x229d467177b9 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229d80694e19 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d8069c7e9 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d8069c7e9 <JSFunction f (sfi = 0x229d08f55139)> - took 0.112, 0.477, 0.011 ms]
[completed optimizing 0x229d8069c7e9 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d8b3f00e1 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229d8b3f00e1 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229d8b3f00e1 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.489, 0.409, 0.011 ms]
[completed optimizing 0x229d8b3f00e1 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666305
  - size:25, name: digest
  #152:JSCall, frequency: 0.666305
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666305
  - size:25, name: digest
  #152:JSCall, frequency: 0.666305
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666305
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.792, 2.354, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #385) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dfa12b899 ; [fp - 24] 0x229dfa12b899 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}147778>
      3: 0x229dfa12b8c1 ; [fp - 32] 0x229dfa12b8c1 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229dfa12b899 ;  0x229dfa12b899 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}147778>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229dfa12b8c1 ;  0x229dfa12b8c1 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 16.101 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0e385039 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229d0e38c759 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229d0e38c759 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.062, 4.300, 0.050 ms]
[completed optimizing 0x229d0e38c759 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229de8783c49 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229de878b341 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229de878b341 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.669, 1.735, 0.025 ms]
[completed optimizing 0x229de878b341 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666321
  - size:25, name: digest
  #152:JSCall, frequency: 0.666321
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666321
  - size:25, name: digest
  #152:JSCall, frequency: 0.666321
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666321
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.835, 2.215, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #388) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d2a12eb59 ; [fp - 24] 0x229d2a12eb59 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}149662>
      3: 0x229d2a12eb81 ; [fp - 32] 0x229d2a12eb81 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229d2a12eb59 ;  0x229d2a12eb59 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}149662>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229d2a12eb81 ;  0x229d2a12eb81 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.858 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d5c89b8c1 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d5c8a3681 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d5c8a3681 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.575, 0.811, 0.014 ms]
[completed optimizing 0x229d5c8a3681 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229dea226b39 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229dea22e221 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229dea22e221 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.496, 0.414, 0.013 ms]
[completed optimizing 0x229dea22e221 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666316
  - size:25, name: digest
  #152:JSCall, frequency: 0.666316
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666316
  - size:25, name: digest
  #152:JSCall, frequency: 0.666316
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666316
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.830, 2.299, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #391) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4f78]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d806c5ef9 ; [fp - 24] 0x229d806c5ef9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}151547>
      3: 0x229d806c5f21 ; [fp - 32] 0x229d806c5f21 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4f70: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4f68: [top + 136] <- 0x229d806c5ef9 ;  0x229d806c5ef9 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}151547>  (input #2)
    0x7ffeefbf4f60: [top + 128] <- 0x229d806c5f21 ;  0x229d806c5f21 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4f58: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4f50: [top + 112] <- 0x7ffeefbf4f80 ;  caller's fp
    0x7ffeefbf4f48: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4f40: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4f38: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f30: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f28: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f20: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f18: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f10: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f08: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f00: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4ef8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ef0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ee8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4ee0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f78, state=TOS_REGISTER, took 15.526 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d452a6609 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d452ad1e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d452ad1e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.380, 1.892, 0.013 ms]
[completed optimizing 0x229d452ad1e9 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d23fcd6f9 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229d23fd4de1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[optimizing 0x229d23fd4de1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.118, 0.572, 0.008 ms]
[completed optimizing 0x229d23fd4de1 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666318
  - size:25, name: digest
  #152:JSCall, frequency: 0.666318
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666318
  - size:25, name: digest
  #152:JSCall, frequency: 0.666318
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666318
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.817, 2.278, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #394) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d66cd0531 ; [fp - 24] 0x229d66cd0531 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}153432>
      3: 0x229d66cd0559 ; [fp - 32] 0x229d66cd0559 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d66cd0531 ;  0x229d66cd0531 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}153432>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d66cd0559 ;  0x229d66cd0559 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.123 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666299
  - size:25, name: digest
  #152:JSCall, frequency: 0.666299
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666299
  - size:25, name: digest
  #152:JSCall, frequency: 0.666299
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666299
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.818, 2.209, 0.030 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #395) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229da31bcea1 ; [fp - 24] 0x229da31bcea1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}155313>
      3: 0x229da31bcec9 ; [fp - 32] 0x229da31bcec9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229da31bcea1 ;  0x229da31bcea1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}155313>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229da31bcec9 ;  0x229da31bcec9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 16.300 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666271
  - size:25, name: digest
  #152:JSCall, frequency: 0.666271
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666271
  - size:25, name: digest
  #152:JSCall, frequency: 0.666271
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666271
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.816, 2.313, 0.034 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #396) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4d30]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d0e3bc541 ; [fp - 24] 0x229d0e3bc541 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}157195>
      3: 0x229d0e3bc569 ; [fp - 32] 0x229d0e3bc569 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4d28: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4d20: [top + 136] <- 0x229d0e3bc541 ;  0x229d0e3bc541 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}157195>  (input #2)
    0x7ffeefbf4d18: [top + 128] <- 0x229d0e3bc569 ;  0x229d0e3bc569 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d10: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d08: [top + 112] <- 0x7ffeefbf4d38 ;  caller's fp
    0x7ffeefbf4d00: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4cf8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4cf0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ce8: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4ce0: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4cd8: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4cd0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4cc8: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4cc0: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4cb8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cb0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4ca8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4ca0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4c98: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d30, state=TOS_REGISTER, took 15.229 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d64187f91 <JSFunction next (sfi = 0x229d3a3f81b9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 43/70 (61%), generic ICs: 4/70 (5%)]
[compiling method 0x229d6418fd71 <JSFunction next (sfi = 0x229d3a3f81b9)> using TurboFan]
Candidates for inlining (size=7):
  #289:JSCall, frequency: 0.500249
  - size:84, name: wrapper
  #282:JSCall, frequency: 0.500249
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500249
  - size:157, name: 
  #150:JSCall, frequency: 0.500249
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499751
  - size:85, name: endHandlerTimer
Inlining wrapper into next
Candidates for inlining (size=6):
  #282:JSCall, frequency: 0.500249
  - size:64, name: startHandlerTimer
  #188:JSCall, frequency: 0.500249
  - size:157, name: 
  #150:JSCall, frequency: 0.500249
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499751
  - size:85, name: endHandlerTimer
Inlining startHandlerTimer into next
Candidates for inlining (size=6):
  #910:JSCall, frequency: 0.500249
  - size:101, name: hrtime
  #188:JSCall, frequency: 0.500249
  - size:157, name: 
  #150:JSCall, frequency: 0.500249
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499751
  - size:85, name: endHandlerTimer
Inlining hrtime into next
Candidates for inlining (size=5):
  #188:JSCall, frequency: 0.500249
  - size:157, name: 
  #150:JSCall, frequency: 0.500249
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499751
  - size:85, name: endHandlerTimer
Inlining  into next
Candidates for inlining (size=4):
  #150:JSCall, frequency: 0.500249
  - size:12, name: _reqClosed
  #386:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #373:JSCall, frequency: 0.499751
  - size:216, name: removeListener
  #117:JSCall, frequency: 0.499751
  - size:85, name: endHandlerTimer
[optimizing 0x229d6418fd71 <JSFunction next (sfi = 0x229d3a3f81b9)> - took 6.139, 4.871, 0.053 ms]
[completed optimizing 0x229d6418fd71 <JSFunction next (sfi = 0x229d3a3f81b9)>]
[marking 0x229d806fb309 <JSFunction getType (sfi = 0x229df8185e51)> for optimized recompilation, reason: small function, ICs with typeinfo: 3/3 (100%), generic ICs: 0/3 (0%)]
[compiling method 0x229d806fb309 <JSFunction getType (sfi = 0x229df8185e51)> using TurboFan]
[optimizing 0x229d15502671 <JSFunction getType (sfi = 0x229df8185e51)> - took 0.076, 0.289, 0.009 ms]
[completed optimizing 0x229d15502671 <JSFunction getType (sfi = 0x229df8185e51)>]
[marking 0x229d2a126461 <JSFunction getPriority (sfi = 0x229df8185da1)> for optimized recompilation, reason: small function, ICs with typeinfo: 1/1 (100%), generic ICs: 0/1 (0%)]
[compiling method 0x229d2a12c9a1 <JSFunction getPriority (sfi = 0x229df8185da1)> using TurboFan]
Candidates for inlining (size=1):
  #17:JSCall, frequency: 1
  - size:78, name: getMediaTypePriority
Inlining getMediaTypePriority into getPriority
Candidates for inlining (size=1):
  #84:JSCall, frequency: 1
  - size:137, name: specify
Inlining specify into getPriority
Candidates for inlining (size=1):
  #189:JSCall, frequency: 1
  - size:184, name: parseMediaType
Inlining parseMediaType into getPriority
[optimizing 0x229d2a12c9a1 <JSFunction getPriority (sfi = 0x229df8185da1)> - took 1.569, 2.740, 0.028 ms]
[completed optimizing 0x229d2a12c9a1 <JSFunction getPriority (sfi = 0x229df8185da1)>]
[marking 0x229dfa119339 <JSFunction InsertionSort (sfi = 0x229d269e6959)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 14/14 (100%), generic ICs: 1/14 (7%)]
[compiling method 0x229dfa11ff29 <JSFunction InsertionSort (sfi = 0x229d269e6959)> using TurboFan]
[optimizing 0x229dfa11ff29 <JSFunction InsertionSort (sfi = 0x229d269e6959)> - took 0.161, 0.954, 0.011 ms]
[completed optimizing 0x229dfa11ff29 <JSFunction InsertionSort (sfi = 0x229d269e6959)>]
[marking 0x229dfa15f001 <JSFunction (sfi = 0x229d3a3fe371)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 5/7 (71%), generic ICs: 0/7 (0%)]
[compiling method 0x229dfa15f001 <JSFunction (sfi = 0x229d3a3fe371)> using TurboFan]
Candidates for inlining (size=1):
  #22:JSCall, frequency: 1
  - size:20, name: out.(anonymous function)
Inlining out.(anonymous function) into 
[optimizing 0x229dfa15f001 <JSFunction (sfi = 0x229d3a3fe371)> - took 0.461, 0.406, 0.010 ms]
[completed optimizing 0x229dfa15f001 <JSFunction (sfi = 0x229d3a3fe371)>]
[marking 0x229d7590d2f9 <JSFunction f (sfi = 0x229d08f55139)> for optimized recompilation, reason: small function, ICs with typeinfo: 5/6 (83%), generic ICs: 0/6 (0%)]
[compiling method 0x229d75914a19 <JSFunction f (sfi = 0x229d08f55139)> using TurboFan]
[optimizing 0x229d75914a19 <JSFunction f (sfi = 0x229d08f55139)> - took 0.114, 0.472, 0.012 ms]
[completed optimizing 0x229d75914a19 <JSFunction f (sfi = 0x229d08f55139)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666324
  - size:25, name: digest
  #152:JSCall, frequency: 0.666324
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666324
  - size:25, name: digest
  #152:JSCall, frequency: 0.666324
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666324
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.879, 2.200, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #403) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4db8]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dd8b6a359 ; [fp - 24] 0x229dd8b6a359 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}159082>
      3: 0x229dd8b6a381 ; [fp - 32] 0x229dd8b6a381 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4db0: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4da8: [top + 136] <- 0x229dd8b6a359 ;  0x229dd8b6a359 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}159082>  (input #2)
    0x7ffeefbf4da0: [top + 128] <- 0x229dd8b6a381 ;  0x229dd8b6a381 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4d98: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4d90: [top + 112] <- 0x7ffeefbf4dc0 ;  caller's fp
    0x7ffeefbf4d88: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4d80: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4d78: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d70: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4d68: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4d60: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4d58: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4d50: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4d48: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4d40: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4d38: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4d30: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4d28: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4d20: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4db8, state=TOS_REGISTER, took 19.108 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229de989a641 <JSFunction (sfi = 0x229d3a3f31c9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 11/11 (100%), generic ICs: 1/11 (9%)]
[compiling method 0x229de98a1d61 <JSFunction (sfi = 0x229d3a3f31c9)> using TurboFan]
Candidates for inlining (size=1):
  #96:JSCall, frequency: 1
  - size:186, name: _run
Inlining _run into 
Candidates for inlining (size=6):
  #363:JSCall, frequency: 1
  - size:84, name: wrapper
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining wrapper into 
Candidates for inlining (size=5):
  #356:JSCall, frequency: 1
  - size:11, name: addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining addListener into 
Candidates for inlining (size=5):
  #752:JSCall, frequency: 1
  - size:230, name: _addListener
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
Inlining _addListener into 
Candidates for inlining (size=5):
  #343:JSCall, frequency: 1
  - size:28, name: once
  #330:JSCall, frequency: 1
  - size:28, name: once
  #312:JSCall, frequency: 1
  - size:84, name: wrapper
  #261:JSCall, frequency: 1
  - size:16, name: nextId
  #942:JSCall, frequency: 0.178471
  - size:14, name: $getMaxListeners
[optimizing 0x229de98a1d61 <JSFunction (sfi = 0x229d3a3f31c9)> - took 5.218, 4.351, 0.049 ms]
[completed optimizing 0x229de98a1d61 <JSFunction (sfi = 0x229d3a3f31c9)>]
[marking 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 7/9 (77%), generic ICs: 2/9 (22%)]
[compiling method 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> using TurboFan]
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1.00011
  - size:41, name: send
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining send into 
Candidates for inlining (size=1):
  #34:JSCall, frequency: 1
  - size:162, name: etag
Inlining etag into 
Inlining small function(s) at call site #306:JSCall
Inlining createHash into  (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #620:JSConstruct, frequency: 1
  - size:27, name: Hash
  #383:JSCall, frequency: 0.666358
  - size:25, name: digest
  #330:JSCall, frequency: 0.666358
  - size:23, name: update
Inlining Hash into  (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #383:JSCall, frequency: 0.666358
  - size:25, name: digest
  #330:JSCall, frequency: 0.666358
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into  (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #330:JSCall, frequency: 0.666358
  - size:23, name: update
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #746:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into  (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> - took 3.842, 3.058, 0.043 ms]
[completed optimizing 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[deoptimizing (DEOPT soft): begin 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> (opt #405) @45, FP to SP delta: 64, caller sp: 0x7ffeefbf4f10]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17> inlined at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/index.js:38:13>, Insufficient type feedback for generic named access
  reading input frame  => bytecode_offset=25, args=4, height=5; inputs:
      0: 0x229de805d891 ; [fp - 16] 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>
      1: 0x229d4b3c54a1 ; [fp + 40] 0x229d4b3c54a1 <Server map = 0x229d9a5aed59>
      2: 0x229d5c8d57c9 ; [fp + 32] 0x229d5c8d57c9 <IncomingMessage map = 0x229d9a5ba3e1>
      3: 0x229d5c8d5b21 ; [fp + 24] 0x229d5c8d5b21 <ServerResponse map = 0x229d9a5b6131>
      4: 0x229d5c8d72e9 ; [fp + 16] 0x229d5c8d72e9 <JSFunction f (sfi = 0x229d08f55139)>
      5: 0x229d27604b39 ; [fp - 8] 0x229d27604b39 <FixedArray[9]>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d5c8d73c1 ; [fp - 24] 0x229d5c8d73c1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}160129>
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; (literal 9) 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; (literal 10) 0x229df9102311 <undefined>
      2: 0x229d5c8d73c1 ; [fp - 32] 0x229d5c8d73c1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}160129>
      3: 0x229d5c8d73e9 ; [fp - 40] 0x229d5c8d73e9 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; (literal 11) 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame  => bytecode_offset=25, height=32
    0x7ffeefbf4f08: [top + 112] <- 0x229d4b3c54a1 ;  0x229d4b3c54a1 <Server map = 0x229d9a5aed59>  (input #1)
    0x7ffeefbf4f00: [top + 104] <- 0x229d5c8d57c9 ;  0x229d5c8d57c9 <IncomingMessage map = 0x229d9a5ba3e1>  (input #2)
    0x7ffeefbf4ef8: [top + 96] <- 0x229d5c8d5b21 ;  0x229d5c8d5b21 <ServerResponse map = 0x229d9a5b6131>  (input #3)
    0x7ffeefbf4ef0: [top + 88] <- 0x229d5c8d72e9 ;  0x229d5c8d72e9 <JSFunction f (sfi = 0x229d08f55139)>  (input #4)
    -------------------------
    0x7ffeefbf4ee8: [top + 80] <- 0xc4cc397c4d7 ;  caller's pc
    0x7ffeefbf4ee0: [top + 72] <- 0x7ffeefbf4f88 ;  caller's fp
    0x7ffeefbf4ed8: [top + 64] <- 0x229d27604b39 ;  context    0x229d27604b39 <FixedArray[9]>  (input #5)
    0x7ffeefbf4ed0: [top + 56] <- 0x229de805d891 ;  function    0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>  (input #0)
    0x7ffeefbf4ec8: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4ec0: [top + 40] <- 0x229df81a1811 ;  bytecode array 0x229df81a1811 <BytecodeArray[74]>  (input #0)
    0x7ffeefbf4eb8: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf4eb0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4ea8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4ea0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4e98: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e90: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e88: [top + 136] <- 0x229d5c8d73c1 ;  0x229d5c8d73c1 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}160129>  (input #2)
    0x7ffeefbf4e80: [top + 128] <- 0x229d5c8d73e9 ;  0x229d5c8d73e9 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e78: [top + 120] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf4e70: [top + 112] <- 0x7ffeefbf4ee0 ;  caller's fp
    0x7ffeefbf4e68: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e60: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e58: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e50: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e48: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e40: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e38: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e30: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e28: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e20: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e18: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4e10: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4e08: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4e00: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)> @45 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4f10, state=TOS_REGISTER, took 26.182 ms]
[removing optimized code for: 0x229de805d891 <JSFunction (sfi = 0x229d08f03eb1)>]
[marking 0x229d61e9e3e9 <JSFunction done (sfi = 0x229d3a3f7ad1)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d61ea61b9 <JSFunction done (sfi = 0x229d3a3f7ad1)> using TurboFan]
Candidates for inlining (size=1):
  #24:JSCall, frequency: 1
  - size:84, name: _finishReqResCycle
Inlining _finishReqResCycle into done
[optimizing 0x229d61ea61b9 <JSFunction done (sfi = 0x229d3a3f7ad1)> - took 0.552, 0.630, 0.015 ms]
[completed optimizing 0x229d61ea61b9 <JSFunction done (sfi = 0x229d3a3f7ad1)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666337
  - size:25, name: digest
  #152:JSCall, frequency: 0.666337
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666337
  - size:25, name: digest
  #152:JSCall, frequency: 0.666337
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666337
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.842, 2.282, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d3447d209 <JSFunction onRoute (sfi = 0x229d3a3f3551)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 4/14 (28%), generic ICs: 2/14 (14%)]
[compiling method 0x229df9c86af1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> using TurboFan]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #407) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4e80]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229df9cacd19 ; [fp - 24] 0x229df9cacd19 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}160974>
      3: 0x229df9cacd41 ; [fp - 32] 0x229df9cacd41 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4e78: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4e70: [top + 136] <- 0x229df9cacd19 ;  0x229df9cacd19 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}160974>  (input #2)
    0x7ffeefbf4e68: [top + 128] <- 0x229df9cacd41 ;  0x229df9cacd41 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4e60: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4e58: [top + 112] <- 0x7ffeefbf4e88 ;  caller's fp
    0x7ffeefbf4e50: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4e48: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4e40: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4e38: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4e30: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4e28: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4e20: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4e18: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4e10: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4e08: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4e00: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4df8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4df0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4de8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4e80, state=TOS_REGISTER, took 15.502 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[optimizing 0x229df9c86af1 <JSFunction onRoute (sfi = 0x229d3a3f3551)> - took 0.098, 0.530, 0.006 ms]
[completed optimizing 0x229df9c86af1 <JSFunction onRoute (sfi = 0x229d3a3f3551)>]
[marking 0x229d02b909f9 <JSFunction _flush (sfi = 0x229d3a3fced9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 12/15 (80%), generic ICs: 0/15 (0%)]
[compiling method 0x229d02b97fe1 <JSFunction _flush (sfi = 0x229d3a3fced9)> using TurboFan]
Candidates for inlining (size=3):
  #89:JSCall, frequency: 1
  - size:157, name: 
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining  into _flush
Candidates for inlining (size=2):
  #62:JSCall, frequency: 1
  - size:12, name: write
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write into _flush
Candidates for inlining (size=2):
  #224:JSCall, frequency: 1
  - size:206, name: write_
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining write_ into _flush
Candidates for inlining (size=5):
  #480:JSCall, frequency: 1
  - size:0, name: debugs.(anonymous function)
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining debugs.(anonymous function) into _flush
Candidates for inlining (size=4):
  #459:JSCall, frequency: 1
  - size:137, name: _send
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
Inlining _send into _flush
Candidates for inlining (size=4):
  #630:JSCall, frequency: 1
  - size:158, name: _writeRaw
  #418:JSCall, frequency: 1
  - size:167, name: nextTick
  #398:JSCall, frequency: 1
  - size:14, name: Writable.cork
  #33:JSCall, frequency: 1
  - size:56, name: restifyWriteHead
[optimizing 0x229d02b97fe1 <JSFunction _flush (sfi = 0x229d3a3fced9)> - took 4.687, 1.699, 0.027 ms]
[completed optimizing 0x229d02b97fe1 <JSFunction _flush (sfi = 0x229d3a3fced9)>]
[marking 0x229d641aa611 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> for optimized recompilation, reason: small function, ICs with typeinfo: 2/2 (100%), generic ICs: 0/2 (0%)]
[compiling method 0x229d641b1cf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> using TurboFan]
Candidates for inlining (size=1):
  #23:JSCall, frequency: 1
  - size:53, name: _route
Inlining _route into routeAndRun
[optimizing 0x229d641b1cf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)> - took 0.490, 0.492, 0.013 ms]
[completed optimizing 0x229d641b1cf9 <JSFunction routeAndRun (sfi = 0x229d3a3f2d11)>]
[marking 0x229d82493341 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 56/57 (98%), generic ICs: 1/57 (1%)]
[compiling method 0x229d82494521 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> using TurboFan]
[optimizing 0x229d82494521 <JSFunction QuickSort (sfi = 0x229d269e6ae9)> - took 0.381, 1.875, 0.017 ms]
[completed optimizing 0x229d82494521 <JSFunction QuickSort (sfi = 0x229d269e6ae9)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666324
  - size:25, name: digest
  #152:JSCall, frequency: 0.666324
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666324
  - size:25, name: digest
  #152:JSCall, frequency: 0.666324
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666324
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.845, 2.263, 0.031 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #412) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229dcef4ed09 ; [fp - 24] 0x229dcef4ed09 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}162862>
      3: 0x229dcef4ed31 ; [fp - 32] 0x229dcef4ed31 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229dcef4ed09 ;  0x229dcef4ed09 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}162862>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229dcef4ed31 ;  0x229dcef4ed31 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.509 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666332
  - size:25, name: digest
  #152:JSCall, frequency: 0.666332
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666332
  - size:25, name: digest
  #152:JSCall, frequency: 0.666332
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666332
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 2.837, 2.229, 0.032 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #413) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d2a7fbd39 ; [fp - 24] 0x229d2a7fbd39 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}164750>
      3: 0x229d2a7fbd61 ; [fp - 32] 0x229d2a7fbd61 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d2a7fbd39 ;  0x229d2a7fbd39 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}164750>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d2a7fbd61 ;  0x229d2a7fbd61 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 15.054 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[marking 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> for optimized recompilation, reason: hot and stable, ICs with typeinfo: 25/28 (89%), generic ICs: 1/28 (3%)]
[compiling method 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> using TurboFan]
Inlining small function(s) at call site #128:JSCall
Inlining createHash into etag (inside try-block)
Inlinee contains 1 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #442:JSConstruct, frequency: 1
  - size:27, name: Hash
  #205:JSCall, frequency: 0.666374
  - size:25, name: digest
  #152:JSCall, frequency: 0.666374
  - size:23, name: update
Inlining Hash into etag (inside try-block)
Inlinee contains 9 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=3):
  #205:JSCall, frequency: 0.666374
  - size:25, name: digest
  #152:JSCall, frequency: 0.666374
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining digest into etag (inside try-block)
Inlinee contains 6 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=2):
  #152:JSCall, frequency: 0.666374
  - size:23, name: update
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining update into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
Candidates for inlining (size=1):
  #568:JSCall, frequency: 0.660471
  - size:18, name: LazyTransform
Inlining LazyTransform into etag (inside try-block)
Inlinee contains 3 calls without local exception handler; linking to surrounding exception handler
[optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> - took 3.007, 2.813, 0.033 ms]
[completed optimizing 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT soft): begin 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> (opt #414) @34, FP to SP delta: 56, caller sp: 0x7ffeefbf4fe0]
            ;;; deoptimize at </Users/swami/Documents/my-code-lab/jsconf2018/my-repo/slow-rest-api/etag.js:57:17>, Insufficient type feedback for generic named access
  reading input frame etag => bytecode_offset=261, args=3, height=9; inputs:
      0: 0x229d0a446d69 ; [fp - 16] 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d3d6fba69 ; [fp - 24] 0x229d3d6fba69 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}166634>
      3: 0x229d3d6fba91 ; [fp - 32] 0x229d3d6fba91 <Object map = 0x229d9a5b3111>
      4: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      5: 1 ; rbx (bool)
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df9102311 ; rax 0x229df9102311 <undefined>
      8: 0x229d0a461b49 ; [fp - 8] 0x229d0a461b49 <FixedArray[5]>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame etag => bytecode_offset=261, height=72
    0x7ffeefbf4fd8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4fd0: [top + 136] <- 0x229d3d6fba69 ;  0x229d3d6fba69 <String[974]: {"name":"slow-rest-api","version":"1.0.0","description":"","main":"index.js","scripts":{"start":"node index","local":"nodemon index","test":"./scripts/test.sh","mk-static":"mkdir -p static && cd static && (dd if=/dev/random bs=1 count=10000 | split -a 4 -b 4)","mk-cache-json":"node -p \"JSON.stringify(require('fs').readdirSync('./static').reduce((o, f) => { f = require('fs').readFileSync('./static/' + f); o[require('./etag-fixed')(f)] = {algorithm: 'md5', encoding: 'utf8', output: 'base64', content: f}; return o  }, {}), 0, 2)\" > etag-cache.json","rm-static":"rm -fr static","mk-cache":"npm run mk-static && npm run mk-cache-json && npm run rm-static","lint":"standard"},"author":"David Mark Clements","contributors":["Matteo Collina <matteo.collina@gmail.com>"],"license":"MIT","dependencies":{"autocannon":"^0.16.5","benchmark":"^2.1.1","bunyan":"^1.8.12","microtime":"^2.1.1","restify":"^5.0.0"},"devDependencies":{"nodemon":"^1.14.11","standard":"^10.0.2"}}166634>  (input #2)
    0x7ffeefbf4fc8: [top + 128] <- 0x229d3d6fba91 ;  0x229d3d6fba91 <Object map = 0x229d9a5b3111>  (input #3)
    -------------------------
    0x7ffeefbf4fc0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4fb8: [top + 112] <- 0x7ffeefbf4fe8 ;  caller's fp
    0x7ffeefbf4fb0: [top + 104] <- 0x229d0a461b49 ;  context    0x229d0a461b49 <FixedArray[5]>  (input #4)
    0x7ffeefbf4fa8: [top + 96] <- 0x229d0a446d69 ;  function    0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>  (input #0)
    0x7ffeefbf4fa0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4f98: [top + 80] <- 0x229d3a3fbad1 ;  bytecode array 0x229d3a3fbad1 <BytecodeArray[324]>  (input #0)
    0x7ffeefbf4f90: [top + 72] <- 0x13a00000000 ;  bytecode offset @ 261
    -------------------------
    0x7ffeefbf4f88: [top + 64] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #5)
    0x7ffeefbf4f80: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4f78: [top + 48] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #7)
    0x7ffeefbf4f70: [top + 40] <- 0x229d0a461b49 ;  0x229d0a461b49 <FixedArray[5]>  (input #8)
    0x7ffeefbf4f68: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4f60: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4f58: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4f50: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4f48: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (soft): end 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)> @34 => node=261, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4fe0, state=TOS_REGISTER, took 16.781 ms]
[removing optimized code for: 0x229d0a446d69 <JSFunction etag (sfi = 0x229de3443c69)>]
[deoptimizing (DEOPT eager): begin 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)> (opt #90) @1, FP to SP delta: 80, caller sp: 0x7ffeefbf5460]
            ;;; deoptimize at <_stream_readable.js:499:22>, wrong map
  reading input frame emitReadable => bytecode_offset=0, args=2, height=5; inputs:
      0: 0x229d1e5c20e1 ; [fp - 16] 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)>
      1: 0x229df9102311 ; [fp + 24] 0x229df9102311 <undefined>
      2: 0x229d91598701 ; rbx 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      3: 0x229d1e5b4d79 ; [fp - 8] 0x229d1e5b4d79 <FixedArray[38]>
      4: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame emitReadable => bytecode_offset=0, height=40
    0x7ffeefbf5458: [top + 104] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf5450: [top + 96] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #2)
    -------------------------
    0x7ffeefbf5448: [top + 88] <- 0xc4cc38f4ed2 ;  caller's pc
    0x7ffeefbf5440: [top + 80] <- 0x7ffeefbf5468 ;  caller's fp
    0x7ffeefbf5438: [top + 72] <- 0x229d1e5b4d79 ;  context    0x229d1e5b4d79 <FixedArray[38]>  (input #3)
    0x7ffeefbf5430: [top + 64] <- 0x229d1e5c20e1 ;  function    0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)>  (input #0)
    0x7ffeefbf5428: [top + 56] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5420: [top + 48] <- 0x229df819a639 ;  bytecode array 0x229df819a639 <BytecodeArray[83]>  (input #0)
    0x7ffeefbf5418: [top + 40] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf5410: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbf5408: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5400: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf53f8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf53f0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
[deoptimizing (eager): end 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)> @1 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5460, state=TOS_REGISTER, took 3.884 ms]
[removing optimized code for: 0x229d1e5c20e1 <JSFunction emitReadable (sfi = 0x229d18dfa2f1)>]
[deoptimizing (DEOPT eager): begin 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)> (opt #86) @1, FP to SP delta: 32, caller sp: 0x7ffeefbf53e0]
            ;;; deoptimize at <_stream_readable.js:513:10>, wrong map
  reading input frame emitReadable_ => bytecode_offset=0, args=2, height=4; inputs:
      0: 0x229d1e5c2129 ; [fp - 16] 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)>
      1: 0x229df9102311 ; [fp + 24] 0x229df9102311 <undefined>
      2: 0x229d91598701 ; rbx 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      3: 0x229d1e5b4d79 ; [fp - 8] 0x229d1e5b4d79 <FixedArray[38]>
      4: 0x229df91025a9 ; (literal 3) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df91025a9 ; (literal 3) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 3) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 3) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame emitReadable_ => bytecode_offset=0, height=32
    0x7ffeefbf53d8: [top + 96] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf53d0: [top + 88] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #2)
    -------------------------
    0x7ffeefbf53c8: [top + 80] <- 0xc4cc38f4ed2 ;  caller's pc
    0x7ffeefbf53c0: [top + 72] <- 0x7ffeefbf53e8 ;  caller's fp
    0x7ffeefbf53b8: [top + 64] <- 0x229d1e5b4d79 ;  context    0x229d1e5b4d79 <FixedArray[38]>  (input #3)
    0x7ffeefbf53b0: [top + 56] <- 0x229d1e5c2129 ;  function    0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)>  (input #0)
    0x7ffeefbf53a8: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf53a0: [top + 40] <- 0x229df819f921 ;  bytecode array 0x229df819f921 <BytecodeArray[40]>  (input #0)
    0x7ffeefbf5398: [top + 32] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf5390: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbf5388: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5380: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5378: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
[deoptimizing (eager): end 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)> @1 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf53e0, state=TOS_REGISTER, took 3.482 ms]
[removing optimized code for: 0x229d1e5c2129 <JSFunction emitReadable_ (sfi = 0x229d18dfa3b9)>]
[deoptimizing (DEOPT eager): begin 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)> (opt #18) @2, FP to SP delta: 112, caller sp: 0x7ffeefbf52f8]
            ;;; deoptimize at <_stream_readable.js:368:20>, wrong map
  reading input frame Readable.read => bytecode_offset=32, args=2, height=9; inputs:
      0: 0x229d18dfe899 ; [fp - 16] 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)>
      1: 0x229d91598701 ; rdi 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229ddffe53a1 ; [fp - 40] 0x229ddffe53a1 <Number nan>
      3: 0x229d1e5b4d79 ; [fp - 8] 0x229d1e5b4d79 <FixedArray[38]>
      4: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 8) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame Readable.read => bytecode_offset=32, height=72
    0x7ffeefbf52f0: [top + 136] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf52e8: [top + 128] <- 0x229ddffe53a1 ;  0x229ddffe53a1 <Number nan>  (input #2)
    -------------------------
    0x7ffeefbf52e0: [top + 120] <- 0xc4cc3805d1b ;  caller's pc
    0x7ffeefbf52d8: [top + 112] <- 0x7ffeefbf5310 ;  caller's fp
    0x7ffeefbf52d0: [top + 104] <- 0x229d1e5b4d79 ;  context    0x229d1e5b4d79 <FixedArray[38]>  (input #3)
    0x7ffeefbf52c8: [top + 96] <- 0x229d18dfe899 ;  function    0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)>  (input #0)
    0x7ffeefbf52c0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf52b8: [top + 80] <- 0x229d3a3e3539 ;  bytecode array 0x229d3a3e3539 <BytecodeArray[502]>  (input #0)
    0x7ffeefbf52b0: [top + 72] <- 0x5500000000 ;  bytecode offset @ 32
    -------------------------
    0x7ffeefbf52a8: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbf52a0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5298: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5290: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5288: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5280: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5278: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf5270: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf5268: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
[deoptimizing (eager): end 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)> @2 => node=32, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf52f8, state=TOS_REGISTER, took 5.249 ms]
[removing optimized code for: 0x229d18dfe899 <JSFunction Readable.read (sfi = 0x229d18dfb421)>]
[deoptimizing (DEOPT eager): begin 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)> (opt #89) @1, FP to SP delta: 48, caller sp: 0x7ffeefbf5500]
            ;;; deoptimize at <events.js:341:8>, wrong map
  reading input frame once => bytecode_offset=0, args=3, height=9; inputs:
      0: 0x229d3a6bd8c1 ; [fp - 16] 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)>
      1: 0x229d91598701 ; r8 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddffe5519 ; rdi 0x229ddffe5519 <JSFunction end (sfi = 0x229d1926d189)>
      4: 0x229ddc3960d9 ; [fp - 8] 0x229ddc3960d9 <FixedArray[21]>
      5: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame once => bytecode_offset=0, height=72
    0x7ffeefbf54f8: [top + 144] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf54f0: [top + 136] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf54e8: [top + 128] <- 0x229ddffe5519 ;  0x229ddffe5519 <JSFunction end (sfi = 0x229d1926d189)>  (input #3)
    -------------------------
    0x7ffeefbf54e0: [top + 120] <- 0xc4cc38f474a ;  caller's pc
    0x7ffeefbf54d8: [top + 112] <- 0x7ffeefbf5508 ;  caller's fp
    0x7ffeefbf54d0: [top + 104] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #4)
    0x7ffeefbf54c8: [top + 96] <- 0x229d3a6bd8c1 ;  function    0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)>  (input #0)
    0x7ffeefbf54c0: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf54b8: [top + 80] <- 0x229d4feeed29 ;  bytecode array 0x229d4feeed29 <BytecodeArray[62]>  (input #0)
    0x7ffeefbf54b0: [top + 72] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf54a8: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf54a0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5498: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5490: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5488: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5480: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf5478: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf5470: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf5468: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (eager): end 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)> @1 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5500, state=TOS_REGISTER, took 6.861 ms]
[removing optimized code for: 0x229d3a6bd8c1 <JSFunction once (sfi = 0x229d3a6bc3d9)>]
[deoptimizing (DEOPT soft): begin 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)> (opt #128) @19, FP to SP delta: 40, caller sp: 0x7ffeefbf5458]
            ;;; deoptimize at <events.js:272:16> inlined at <events.js:297:10> inlined at <_stream_readable.js:772:35> inlined at <_http_server.js:651:37>, Insufficient type feedback for generic named access
  reading input frame socketOnWrap => bytecode_offset=40, args=3, height=7; inputs:
      0: 0x229d0931a0f9 ; [fp - 16] 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)>
      1: 0x229d91598701 ; r8 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddffe55f1 ; [fp + 16] 0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229d48edf039 ; [fp - 8] 0x229d48edf039 <FixedArray[41]>
      5: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229d3a688a31 ; (literal 7) 0x229d3a688a31 <JSFunction call (sfi = 0x229df9127169)>
  reading input frame Readable.on => bytecode_offset=34, args=3, height=8; inputs:
      0: 0x229d18dfe9b9 ; (literal 8) 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)>
      1: 0x229d91598701 ; r8 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddffe55f1 ; [fp + 16] 0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229d1e5b4d79 ; (literal 9) 0x229d1e5b4d79 <FixedArray[38]>
      5: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229d3a688a31 ; (literal 7) 0x229d3a688a31 <JSFunction call (sfi = 0x229df9127169)>
  reading input frame addListener => bytecode_offset=20, args=3, height=7; inputs:
      0: 0x229d3a6bd831 ; (literal 10) 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>
      1: 0x229d91598701 ; r8 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddffe55f1 ; [fp + 16] 0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229ddc3960d9 ; (literal 11) 0x229ddc3960d9 <FixedArray[21]>
      5: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df9102421 ; (literal 12) 0x229df9102421 <false>
  reading input frame _addListener => bytecode_offset=241, args=5, height=10; inputs:
      0: 0x229ddc3c2b61 ; (literal 13) 0x229ddc3c2b61 <JSFunction _addListener (sfi = 0x229d3a6bb8e9)>
      1: 0x229df9102311 ; (literal 14) 0x229df9102311 <undefined>
      2: 0x229d91598701 ; r8 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      3: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      4: 0x229ddffe55f1 ; [fp + 16] 0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      5: 0x229df9102421 ; (literal 12) 0x229df9102421 <false>
      6: 0x229ddc3960d9 ; (literal 11) 0x229ddc3960d9 <FixedArray[21]>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d915afd21 ; rax 0x229d915afd21 <JSArray[2]>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame socketOnWrap => bytecode_offset=40, height=48
    0x7ffeefbf5450: [top + 120] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf5448: [top + 112] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf5440: [top + 104] <- 0x229ddffe55f1 ;  0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf5438: [top + 96] <- 0xc4cc38f474a ;  caller's pc
    0x7ffeefbf5430: [top + 88] <- 0x7ffeefbf5460 ;  caller's fp
    0x7ffeefbf5428: [top + 80] <- 0x229d48edf039 ;  context    0x229d48edf039 <FixedArray[41]>  (input #4)
    0x7ffeefbf5420: [top + 72] <- 0x229d0931a0f9 ;  function    0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)>  (input #0)
    0x7ffeefbf5418: [top + 64] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5410: [top + 56] <- 0x229d3a3f0001 ;  bytecode array 0x229d3a3f0001 <BytecodeArray[114]>  (input #0)
    0x7ffeefbf5408: [top + 48] <- 0x5d00000000 ;  bytecode offset @ 40
    -------------------------
    0x7ffeefbf5400: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf53f8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf53f0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf53e8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf53e0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf53d8: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
  translating interpreted frame Readable.on => bytecode_offset=34, height=56
    0x7ffeefbf53d0: [top + 128] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf53c8: [top + 120] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf53c0: [top + 112] <- 0x229ddffe55f1 ;  0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf53b8: [top + 104] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf53b0: [top + 96] <- 0x7ffeefbf5430 ;  caller's fp
    0x7ffeefbf53a8: [top + 88] <- 0x229d1e5b4d79 ;  context    0x229d1e5b4d79 <FixedArray[38]>  (input #4)
    0x7ffeefbf53a0: [top + 80] <- 0x229d18dfe9b9 ;  function    0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)>  (input #0)
    0x7ffeefbf5398: [top + 72] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5390: [top + 64] <- 0x229d4feef2d1 ;  bytecode array 0x229d4feef2d1 <BytecodeArray[163]>  (input #0)
    0x7ffeefbf5388: [top + 56] <- 0x5700000000 ;  bytecode offset @ 34
    -------------------------
    0x7ffeefbf5380: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5378: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5370: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5368: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5360: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5358: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf5350: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
  translating interpreted frame addListener => bytecode_offset=20, height=48
    0x7ffeefbf5348: [top + 120] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf5340: [top + 112] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf5338: [top + 104] <- 0x229ddffe55f1 ;  0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf5330: [top + 96] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf5328: [top + 88] <- 0x7ffeefbf53b0 ;  caller's fp
    0x7ffeefbf5320: [top + 80] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #4)
    0x7ffeefbf5318: [top + 72] <- 0x229d3a6bd831 ;  function    0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>  (input #0)
    0x7ffeefbf5310: [top + 64] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5308: [top + 56] <- 0x229d18da6051 ;  bytecode array 0x229d18da6051 <BytecodeArray[26]>  (input #0)
    0x7ffeefbf5300: [top + 48] <- 0x4900000000 ;  bytecode offset @ 20
    -------------------------
    0x7ffeefbf52f8: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf52f0: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf52e8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf52e0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf52d8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf52d0: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
  translating interpreted frame _addListener => bytecode_offset=241, height=80
    0x7ffeefbf52c8: [top + 168] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf52c0: [top + 160] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #2)
    0x7ffeefbf52b8: [top + 152] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #3)
    0x7ffeefbf52b0: [top + 144] <- 0x229ddffe55f1 ;  0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #4)
    0x7ffeefbf52a8: [top + 136] <- 0x229df9102421 ;  0x229df9102421 <false>  (input #5)
    -------------------------
    0x7ffeefbf52a0: [top + 128] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf5298: [top + 120] <- 0x7ffeefbf5328 ;  caller's fp
    0x7ffeefbf5290: [top + 112] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #6)
    0x7ffeefbf5288: [top + 104] <- 0x229ddc3c2b61 ;  function    0x229ddc3c2b61 <JSFunction _addListener (sfi = 0x229d3a6bb8e9)>  (input #0)
    0x7ffeefbf5280: [top + 96] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5278: [top + 88] <- 0x229d18da63f1 ;  bytecode array 0x229d18da63f1 <BytecodeArray[427]>  (input #0)
    0x7ffeefbf5270: [top + 80] <- 0x12600000000 ;  bytecode offset @ 241
    -------------------------
    0x7ffeefbf5268: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5260: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5258: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5250: [top + 48] <- 0x229d915afd21 ;  0x229d915afd21 <JSArray[2]>  (input #10)
    0x7ffeefbf5248: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf5240: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf5238: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf5230: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf5228: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf5220: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
[deoptimizing (soft): end 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)> @19 => node=241, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5458, state=TOS_REGISTER, took 22.770 ms]
[removing optimized code for: 0x229d0931a0f9 <JSFunction socketOnWrap (sfi = 0x229d269e4491)>]
[deoptimizing (DEOPT eager): begin 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)> (opt #53) @3, FP to SP delta: 16, caller sp: 0x7ffeefbf56e8]
            ;;; deoptimize at <_stream_readable.js:1054:21>, wrong map
  reading input frame endReadableNT => bytecode_offset=25, args=3, height=4; inputs:
      0: 0x229d1e5c2489 ; [fp - 16] 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d9159dfd1 ; rbx 0x229d9159dfd1 <ReadableState map = 0x229de813fa29>
      3: 0x229d91598701 ; rcx 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      4: 0x229d1e5b4d79 ; [fp - 8] 0x229d1e5b4d79 <FixedArray[38]>
      5: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df9102421 ; (literal 2) 0x229df9102421 <false>
  translating interpreted frame endReadableNT => bytecode_offset=25, height=32
    0x7ffeefbf56e0: [top + 104] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf56d8: [top + 96] <- 0x229d9159dfd1 ;  0x229d9159dfd1 <ReadableState map = 0x229de813fa29>  (input #2)
    0x7ffeefbf56d0: [top + 88] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #3)
    -------------------------
    0x7ffeefbf56c8: [top + 80] <- 0xc4cc3995ef9 ;  caller's pc
    0x7ffeefbf56c0: [top + 72] <- 0x7ffeefbf5738 ;  caller's fp
    0x7ffeefbf56b8: [top + 64] <- 0x229d1e5b4d79 ;  context    0x229d1e5b4d79 <FixedArray[38]>  (input #4)
    0x7ffeefbf56b0: [top + 56] <- 0x229d1e5c2489 ;  function    0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)>  (input #0)
    0x7ffeefbf56a8: [top + 48] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf56a0: [top + 40] <- 0x229df81a0711 ;  bytecode array 0x229df81a0711 <BytecodeArray[46]>  (input #0)
    0x7ffeefbf5698: [top + 32] <- 0x4e00000000 ;  bytecode offset @ 25
    -------------------------
    0x7ffeefbf5690: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5688: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5680: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5678: [top + 0] <- 0x229df9102421 ;  accumulator 0x229df9102421 <false>  (input #8)
[deoptimizing (eager): end 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)> @3 => node=25, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf56e8, state=TOS_REGISTER, took 3.541 ms]
[removing optimized code for: 0x229d1e5c2489 <JSFunction endReadableNT (sfi = 0x229d18dfade1)>]
[deoptimizing (DEOPT soft): begin 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)> (opt #28) @10, FP to SP delta: 56, caller sp: 0x7ffeefbf5488]
            ;;; deoptimize at <events.js:381:43>, Insufficient type feedback for generic keyed access
  reading input frame removeListener => bytecode_offset=191, args=3, height=12; inputs:
      0: 0x229d3a6bd951 ; [fp - 16] 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)>
      1: 0x229d91598701 ; [fp + 32] 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229d915b8a11 ; [fp + 16] 0x229d915b8a11 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229ddc3960d9 ; [fp - 8] 0x229ddc3960d9 <FixedArray[21]>
      5: 0x229d915afd21 ; rbx 0x229d915afd21 <JSArray[3]>
      6: 0x229d9159e091 ; [fp - 40] 0x229d9159e091 <Object map = 0x229de8106669>
      7: 0xffffffff00000000 ; (literal 4) -1
      8: 2 ; rdx 
      9: 0x229df9102311 ; (literal 3) 0x229df9102311 <undefined>
     10: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229ddffe55f1 ; rax 0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
     12: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 2) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229d915b8a11 ; [fp + 16] 0x229d915b8a11 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
  translating interpreted frame removeListener => bytecode_offset=191, height=96
    0x7ffeefbf5480: [top + 168] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf5478: [top + 160] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf5470: [top + 152] <- 0x229d915b8a11 ;  0x229d915b8a11 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf5468: [top + 144] <- 0xc4cc38f474a ;  caller's pc
    0x7ffeefbf5460: [top + 136] <- 0x7ffeefbf5490 ;  caller's fp
    0x7ffeefbf5458: [top + 128] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #4)
    0x7ffeefbf5450: [top + 120] <- 0x229d3a6bd951 ;  function    0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)>  (input #0)
    0x7ffeefbf5448: [top + 112] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5440: [top + 104] <- 0x229d3a3e5a41 ;  bytecode array 0x229d3a3e5a41 <BytecodeArray[364]>  (input #0)
    0x7ffeefbf5438: [top + 96] <- 0xf400000000 ;  bytecode offset @ 191
    -------------------------
    0x7ffeefbf5430: [top + 88] <- 0x229d915afd21 ;  0x229d915afd21 <JSArray[3]>  (input #5)
    0x7ffeefbf5428: [top + 80] <- 0x229d9159e091 ;  0x229d9159e091 <Object map = 0x229de8106669>  (input #6)
    0x7ffeefbf5420: [top + 72] <- 0xffffffff00000000 ;  -1  (input #7)
    0x7ffeefbf5418: [top + 64] <- 0x200000000 ;  2  (input #8)
    0x7ffeefbf5410: [top + 56] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #9)
    0x7ffeefbf5408: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf5400: [top + 40] <- 0x229ddffe55f1 ;  0x229ddffe55f1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #11)
    0x7ffeefbf53f8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf53f0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf53e8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf53e0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf53d8: [top + 0] <- 0x229d915b8a11 ;  accumulator 0x229d915b8a11 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #16)
[deoptimizing (soft): end 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)> @10 => node=191, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5488, state=TOS_REGISTER, took 6.355 ms]
[removing optimized code for: 0x229d3a6bd951 <JSFunction removeListener (sfi = 0x229d3a6bc569)>]
[deoptimizing (DEOPT soft): begin 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)> (opt #40) @1, FP to SP delta: 16, caller sp: 0x7ffeefbf5310]
            ;;; deoptimize at <_stream_duplex.js:86:50>, Insufficient type feedback for generic named access
  reading input frame get => bytecode_offset=27, args=1, height=2; inputs:
      0: 0x229d1e5bcb49 ; [fp - 16] 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)>
      1: 0x229d91598701 ; rax 0x229d91598701 <Socket map = 0x229d9a5b75d1>
      2: 0x229d1e5bcbd9 ; [fp - 8] 0x229d1e5bcbd9 <FixedArray[9]>
      3: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      4: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame get => bytecode_offset=27, height=16
    0x7ffeefbf5308: [top + 72] <- 0x229d91598701 ;  0x229d91598701 <Socket map = 0x229d9a5b75d1>  (input #1)
    -------------------------
    0x7ffeefbf5300: [top + 64] <- 0xc4cc38cee2f ;  caller's pc
    0x7ffeefbf52f8: [top + 56] <- 0x7ffeefbf5350 ;  caller's fp
    0x7ffeefbf52f0: [top + 48] <- 0x229d1e5bcbd9 ;  context    0x229d1e5bcbd9 <FixedArray[9]>  (input #2)
    0x7ffeefbf52e8: [top + 40] <- 0x229d1e5bcb49 ;  function    0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)>  (input #0)
    0x7ffeefbf52e0: [top + 32] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf52d8: [top + 24] <- 0x229df8196781 ;  bytecode array 0x229df8196781 <BytecodeArray[38]>  (input #0)
    0x7ffeefbf52d0: [top + 16] <- 0x5000000000 ;  bytecode offset @ 27
    -------------------------
    0x7ffeefbf52c8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #3)
    0x7ffeefbf52c0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
[deoptimizing (soft): end 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)> @1 => node=27, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5310, state=TOS_REGISTER, took 2.532 ms]
[removing optimized code for: 0x229d1e5bcb49 <JSFunction get (sfi = 0x229d3a6f2f51)>]
[deoptimizing (DEOPT soft): begin 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)> (opt #39) @15, FP to SP delta: 40, caller sp: 0x7ffeefbf5390]
            ;;; deoptimize at <events.js:272:16> inlined at <events.js:297:10> inlined at <_stream_readable.js:772:35>, Insufficient type feedback for generic named access
  reading input frame Readable.on => bytecode_offset=34, args=3, height=8; inputs:
      0: 0x229d18dfe9b9 ; [fp - 16] 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)>
      1: 0x229d91598b69 ; r8 0x229d91598b69 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddfff5331 ; [fp + 16] 0x229ddfff5331 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229d1e5b4d79 ; [fp - 8] 0x229d1e5b4d79 <FixedArray[38]>
      5: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229d3a688a31 ; (literal 6) 0x229d3a688a31 <JSFunction call (sfi = 0x229df9127169)>
  reading input frame addListener => bytecode_offset=20, args=3, height=7; inputs:
      0: 0x229d3a6bd831 ; (literal 7) 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>
      1: 0x229d91598b69 ; r8 0x229d91598b69 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddfff5331 ; [fp + 16] 0x229ddfff5331 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229ddc3960d9 ; (literal 8) 0x229ddc3960d9 <FixedArray[21]>
      5: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df9102421 ; (literal 9) 0x229df9102421 <false>
  reading input frame _addListener => bytecode_offset=241, args=5, height=10; inputs:
      0: 0x229ddc3c2b61 ; (literal 10) 0x229ddc3c2b61 <JSFunction _addListener (sfi = 0x229d3a6bb8e9)>
      1: 0x229df9102311 ; (literal 11) 0x229df9102311 <undefined>
      2: 0x229d91598b69 ; r8 0x229d91598b69 <Socket map = 0x229d9a5b75d1>
      3: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      4: 0x229ddfff5331 ; [fp + 16] 0x229ddfff5331 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      5: 0x229df9102421 ; (literal 9) 0x229df9102421 <false>
      6: 0x229ddc3960d9 ; (literal 8) 0x229ddc3960d9 <FixedArray[21]>
      7: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d915b01b9 ; rax 0x229d915b01b9 <JSArray[2]>
     11: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame Readable.on => bytecode_offset=34, height=56
    0x7ffeefbf5388: [top + 128] <- 0x229d91598b69 ;  0x229d91598b69 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf5380: [top + 120] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf5378: [top + 112] <- 0x229ddfff5331 ;  0x229ddfff5331 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf5370: [top + 104] <- 0xc4cc38f4048 ;  caller's pc
    0x7ffeefbf5368: [top + 96] <- 0x7ffeefbf53c8 ;  caller's fp
    0x7ffeefbf5360: [top + 88] <- 0x229d1e5b4d79 ;  context    0x229d1e5b4d79 <FixedArray[38]>  (input #4)
    0x7ffeefbf5358: [top + 80] <- 0x229d18dfe9b9 ;  function    0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)>  (input #0)
    0x7ffeefbf5350: [top + 72] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5348: [top + 64] <- 0x229d4feef2d1 ;  bytecode array 0x229d4feef2d1 <BytecodeArray[163]>  (input #0)
    0x7ffeefbf5340: [top + 56] <- 0x5700000000 ;  bytecode offset @ 34
    -------------------------
    0x7ffeefbf5338: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5330: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5328: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5320: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5318: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5310: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf5308: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
  translating interpreted frame addListener => bytecode_offset=20, height=48
    0x7ffeefbf5300: [top + 120] <- 0x229d91598b69 ;  0x229d91598b69 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf52f8: [top + 112] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf52f0: [top + 104] <- 0x229ddfff5331 ;  0x229ddfff5331 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf52e8: [top + 96] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf52e0: [top + 88] <- 0x7ffeefbf5368 ;  caller's fp
    0x7ffeefbf52d8: [top + 80] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #4)
    0x7ffeefbf52d0: [top + 72] <- 0x229d3a6bd831 ;  function    0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>  (input #0)
    0x7ffeefbf52c8: [top + 64] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf52c0: [top + 56] <- 0x229d18da6051 ;  bytecode array 0x229d18da6051 <BytecodeArray[26]>  (input #0)
    0x7ffeefbf52b8: [top + 48] <- 0x4900000000 ;  bytecode offset @ 20
    -------------------------
    0x7ffeefbf52b0: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf52a8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf52a0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5298: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5290: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5288: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
  translating interpreted frame _addListener => bytecode_offset=241, height=80
    0x7ffeefbf5280: [top + 168] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf5278: [top + 160] <- 0x229d91598b69 ;  0x229d91598b69 <Socket map = 0x229d9a5b75d1>  (input #2)
    0x7ffeefbf5270: [top + 152] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #3)
    0x7ffeefbf5268: [top + 144] <- 0x229ddfff5331 ;  0x229ddfff5331 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #4)
    0x7ffeefbf5260: [top + 136] <- 0x229df9102421 ;  0x229df9102421 <false>  (input #5)
    -------------------------
    0x7ffeefbf5258: [top + 128] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf5250: [top + 120] <- 0x7ffeefbf52e0 ;  caller's fp
    0x7ffeefbf5248: [top + 112] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #6)
    0x7ffeefbf5240: [top + 104] <- 0x229ddc3c2b61 ;  function    0x229ddc3c2b61 <JSFunction _addListener (sfi = 0x229d3a6bb8e9)>  (input #0)
    0x7ffeefbf5238: [top + 96] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5230: [top + 88] <- 0x229d18da63f1 ;  bytecode array 0x229d18da63f1 <BytecodeArray[427]>  (input #0)
    0x7ffeefbf5228: [top + 80] <- 0x12600000000 ;  bytecode offset @ 241
    -------------------------
    0x7ffeefbf5220: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5218: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5210: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5208: [top + 48] <- 0x229d915b01b9 ;  0x229d915b01b9 <JSArray[2]>  (input #10)
    0x7ffeefbf5200: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf51f8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf51f0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf51e8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf51e0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf51d8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
[deoptimizing (soft): end 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)> @15 => node=241, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5390, state=TOS_REGISTER, took 17.661 ms]
[removing optimized code for: 0x229d18dfe9b9 <JSFunction Readable.on (sfi = 0x229d18dfb741)>]
[deoptimizing (DEOPT soft): begin 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)> (opt #8) @14, FP to SP delta: 40, caller sp: 0x7ffeefbf52c0]
            ;;; deoptimize at <events.js:272:16> inlined at <events.js:297:10>, Insufficient type feedback for generic named access
  reading input frame addListener => bytecode_offset=20, args=3, height=7; inputs:
      0: 0x229d3a6bd831 ; [fp - 16] 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>
      1: 0x229d91598e59 ; r8 0x229d91598e59 <Socket map = 0x229d9a5b75d1>
      2: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      3: 0x229ddfffd8c1 ; [fp + 16] 0x229ddfffd8c1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      4: 0x229ddc3960d9 ; [fp - 8] 0x229ddc3960d9 <FixedArray[21]>
      5: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df9102421 ; (literal 5) 0x229df9102421 <false>
  reading input frame _addListener => bytecode_offset=241, args=5, height=10; inputs:
      0: 0x229ddc3c2b61 ; (literal 6) 0x229ddc3c2b61 <JSFunction _addListener (sfi = 0x229d3a6bb8e9)>
      1: 0x229df9102311 ; (literal 7) 0x229df9102311 <undefined>
      2: 0x229d91598e59 ; r8 0x229d91598e59 <Socket map = 0x229d9a5b75d1>
      3: 0x229d3a6b66d1 ; [fp + 24] 0x229d3a6b66d1 <String[3]: end>
      4: 0x229ddfffd8c1 ; [fp + 16] 0x229ddfffd8c1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>
      5: 0x229df9102421 ; (literal 5) 0x229df9102421 <false>
      6: 0x229ddc3960d9 ; (literal 8) 0x229ddc3960d9 <FixedArray[21]>
      7: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d915b04c9 ; rax 0x229d915b04c9 <JSArray[2]>
     11: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame addListener => bytecode_offset=20, height=48
    0x7ffeefbf52b8: [top + 120] <- 0x229d91598e59 ;  0x229d91598e59 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf52b0: [top + 112] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #2)
    0x7ffeefbf52a8: [top + 104] <- 0x229ddfffd8c1 ;  0x229ddfffd8c1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #3)
    -------------------------
    0x7ffeefbf52a0: [top + 96] <- 0xc4cc38f4048 ;  caller's pc
    0x7ffeefbf5298: [top + 88] <- 0x7ffeefbf52f8 ;  caller's fp
    0x7ffeefbf5290: [top + 80] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #4)
    0x7ffeefbf5288: [top + 72] <- 0x229d3a6bd831 ;  function    0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>  (input #0)
    0x7ffeefbf5280: [top + 64] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5278: [top + 56] <- 0x229d18da6051 ;  bytecode array 0x229d18da6051 <BytecodeArray[26]>  (input #0)
    0x7ffeefbf5270: [top + 48] <- 0x4900000000 ;  bytecode offset @ 20
    -------------------------
    0x7ffeefbf5268: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf5260: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf5258: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf5250: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf5248: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf5240: [top + 0] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
  translating interpreted frame _addListener => bytecode_offset=241, height=80
    0x7ffeefbf5238: [top + 168] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf5230: [top + 160] <- 0x229d91598e59 ;  0x229d91598e59 <Socket map = 0x229d9a5b75d1>  (input #2)
    0x7ffeefbf5228: [top + 152] <- 0x229d3a6b66d1 ;  0x229d3a6b66d1 <String[3]: end>  (input #3)
    0x7ffeefbf5220: [top + 144] <- 0x229ddfffd8c1 ;  0x229ddfffd8c1 <JSBoundFunction (BoundTargetFunction 0x229d4feadf01)>  (input #4)
    0x7ffeefbf5218: [top + 136] <- 0x229df9102421 ;  0x229df9102421 <false>  (input #5)
    -------------------------
    0x7ffeefbf5210: [top + 128] <- 0xc4cc38c01e0 ;  caller's pc
    0x7ffeefbf5208: [top + 120] <- 0x7ffeefbf5298 ;  caller's fp
    0x7ffeefbf5200: [top + 112] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #6)
    0x7ffeefbf51f8: [top + 104] <- 0x229ddc3c2b61 ;  function    0x229ddc3c2b61 <JSFunction _addListener (sfi = 0x229d3a6bb8e9)>  (input #0)
    0x7ffeefbf51f0: [top + 96] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf51e8: [top + 88] <- 0x229d18da63f1 ;  bytecode array 0x229d18da63f1 <BytecodeArray[427]>  (input #0)
    0x7ffeefbf51e0: [top + 80] <- 0x12600000000 ;  bytecode offset @ 241
    -------------------------
    0x7ffeefbf51d8: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf51d0: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf51c8: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf51c0: [top + 48] <- 0x229d915b04c9 ;  0x229d915b04c9 <JSArray[2]>  (input #10)
    0x7ffeefbf51b8: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf51b0: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf51a8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf51a0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf5198: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf5190: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
[deoptimizing (soft): end 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)> @14 => node=241, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf52c0, state=TOS_REGISTER, took 10.987 ms]
[removing optimized code for: 0x229d3a6bd831 <JSFunction addListener (sfi = 0x229d3a6bc249)>]
[deoptimizing (DEOPT soft): begin 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)> (opt #11) @3, FP to SP delta: 120, caller sp: 0x7ffeefbf5658]
            ;;; deoptimize at <events.js:163:34>, Insufficient type feedback for generic named access
  reading input frame emit => bytecode_offset=29, args=2, height=23; inputs:
      0: 0x229d3a6bd7e9 ; [fp - 16] 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)>
      1: 0x229d91599a19 ; [fp + 24] 0x229d91599a19 <Socket map = 0x229d9a5b75d1>
      2: 0x229df9138099 ; [fp + 16] 0x229df9138099 <String[5]: error>
      3: 0x229ddc3960d9 ; [fp - 8] 0x229ddc3960d9 <FixedArray[21]>
      4: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df9102311 ; (literal 2) 0x229df9102311 <undefined>
      6: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d9159fea1 ; rbx 0x229d9159fea1 <Object map = 0x229de8106669>
     11: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df9102421 ; (literal 3) 0x229df9102421 <false>
     13: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229dadaadf41 ; [fp - 40] 0x229dadaadf41 <Arguments map = 0x229de8106611>
     17: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     18: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     19: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     20: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     21: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     22: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     23: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     24: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     25: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
     26: 0x229df91025a9 ; (literal 1) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame emit => bytecode_offset=29, height=184
    0x7ffeefbf5650: [top + 248] <- 0x229d91599a19 ;  0x229d91599a19 <Socket map = 0x229d9a5b75d1>  (input #1)
    0x7ffeefbf5648: [top + 240] <- 0x229df9138099 ;  0x229df9138099 <String[5]: error>  (input #2)
    -------------------------
    0x7ffeefbf5640: [top + 232] <- 0xc4cc3805d1b ;  caller's pc
    0x7ffeefbf5638: [top + 224] <- 0x7ffeefbf5670 ;  caller's fp
    0x7ffeefbf5630: [top + 216] <- 0x229ddc3960d9 ;  context    0x229ddc3960d9 <FixedArray[21]>  (input #3)
    0x7ffeefbf5628: [top + 208] <- 0x229d3a6bd7e9 ;  function    0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)>  (input #0)
    0x7ffeefbf5620: [top + 200] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf5618: [top + 192] <- 0x229d18da6cd1 ;  bytecode array 0x229d18da6cd1 <BytecodeArray[498]>  (input #0)
    0x7ffeefbf5610: [top + 184] <- 0x5200000000 ;  bytecode offset @ 29
    -------------------------
    0x7ffeefbf5608: [top + 176] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbf5600: [top + 168] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #5)
    0x7ffeefbf55f8: [top + 160] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf55f0: [top + 152] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf55e8: [top + 144] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf55e0: [top + 136] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf55d8: [top + 128] <- 0x229d9159fea1 ;  0x229d9159fea1 <Object map = 0x229de8106669>  (input #10)
    0x7ffeefbf55d0: [top + 120] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf55c8: [top + 112] <- 0x229df9102421 ;  0x229df9102421 <false>  (input #12)
    0x7ffeefbf55c0: [top + 104] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf55b8: [top + 96] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf55b0: [top + 88] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf55a8: [top + 80] <- 0x229dadaadf41 ;  0x229dadaadf41 <Arguments map = 0x229de8106611>  (input #16)
    0x7ffeefbf55a0: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #17)
    0x7ffeefbf5598: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #18)
    0x7ffeefbf5590: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #19)
    0x7ffeefbf5588: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #20)
    0x7ffeefbf5580: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #21)
    0x7ffeefbf5578: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #22)
    0x7ffeefbf5570: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #23)
    0x7ffeefbf5568: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #24)
    0x7ffeefbf5560: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #25)
    0x7ffeefbf5558: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #26)
[deoptimizing (soft): end 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)> @3 => node=29, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5658, state=TOS_REGISTER, took 9.304 ms]
[removing optimized code for: 0x229d3a6bd7e9 <JSFunction emit (sfi = 0x229d3a6bc181)>]
[marking dependent code 0xc4cc3953ce1 (opt #128) for deoptimization, reason: field-owner]
[deoptimize marked code in all contexts]
[deoptimizing (DEOPT eager): begin 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)> (opt #55) @22, FP to SP delta: 88, caller sp: 0x7ffeefbf4d58]
            ;;; deoptimize at <_stream_writable.js:265:20>, wrong map
  reading input frame Writable.write => bytecode_offset=0, args=4, height=11; inputs:
      0: 0x229d3a6f2691 ; [fp - 16] 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)>
      1: 0x229d27606969 ; [fp + 40] 0x229d27606969 <WriteStream map = 0x229de8140689>
      2: 0x229d344281b1 ; [fp + 32] 0x229d344281b1 <String[13]\: count 168073\n>
      3: 0x229d276654d1 ; [fp + 24] 0x229d276654d1 <JSFunction (sfi = 0x229d4fef1fe1)>
      4: 0x229df9102311 ; [fp + 16] 0x229df9102311 <undefined>
      5: 0x229d1e5bb629 ; [fp - 8] 0x229d1e5bb629 <FixedArray[27]>
      6: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 6) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame Writable.write => bytecode_offset=0, height=88
    0x7ffeefbf4d50: [top + 168] <- 0x229d27606969 ;  0x229d27606969 <WriteStream map = 0x229de8140689>  (input #1)
    0x7ffeefbf4d48: [top + 160] <- 0x229d344281b1 ;  0x229d344281b1 <String[13]\: count 168073\n>  (input #2)
    0x7ffeefbf4d40: [top + 152] <- 0x229d276654d1 ;  0x229d276654d1 <JSFunction (sfi = 0x229d4fef1fe1)>  (input #3)
    0x7ffeefbf4d38: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #4)
    -------------------------
    0x7ffeefbf4d30: [top + 136] <- 0xc4cc3805d1b ;  caller's pc
    0x7ffeefbf4d28: [top + 128] <- 0x7ffeefbf4d70 ;  caller's fp
    0x7ffeefbf4d20: [top + 120] <- 0x229d1e5bb629 ;  context    0x229d1e5bb629 <FixedArray[27]>  (input #5)
    0x7ffeefbf4d18: [top + 112] <- 0x229d3a6f2691 ;  function    0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)>  (input #0)
    0x7ffeefbf4d10: [top + 104] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4d08: [top + 96] <- 0x229df8196c51 ;  bytecode array 0x229df8196c51 <BytecodeArray[218]>  (input #0)
    0x7ffeefbf4d00: [top + 88] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf4cf8: [top + 80] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4cf0: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4ce8: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4ce0: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4cd8: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4cd0: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4cc8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4cc0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf4cb8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf4cb0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf4ca8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
[deoptimizing (eager): end 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)> @22 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4d58, state=TOS_REGISTER, took 8.987 ms]
[removing optimized code for: 0x229d3a6f2691 <JSFunction Writable.write (sfi = 0x229d3a6f0ba1)>]
[deoptimizing (DEOPT eager): begin 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)> (opt #64) @51, FP to SP delta: 64, caller sp: 0x7ffeefbf4998]
            ;;; deoptimize at <net.js:712:12>, wrong map
  reading input frame Socket._writeGeneric => bytecode_offset=20, args=5, height=15; inputs:
      0: 0x229d4fee17c9 ; [fp - 16] 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)>
      1: 0x229d27606969 ; [fp + 48] 0x229d27606969 <WriteStream map = 0x229de8140689>
      2: 0x229df9102421 ; [fp + 40] 0x229df9102421 <false>
      3: 0x229d344281b1 ; [fp + 32] 0x229d344281b1 <String[13]\: count 168073\n>
      4: 0x229d3a6b6691 ; [fp + 24] 0x229d3a6b6691 <String[4]: utf8>
      5: 0x229d27674301 ; [fp + 16] 0x229d27674301 <JSBoundFunction (BoundTargetFunction 0x229d1e5c18c1)>
      6: 0x229d34428451 ; [fp - 24] 0x229d34428451 <FixedArray[8]>
      7: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229d27636f29 ; [fp - 8] 0x229d27636f29 <FixedArray[64]>
     15: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     17: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     18: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     19: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     20: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
     21: 0x229df91025a9 ; (literal 9) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame Socket._writeGeneric => bytecode_offset=20, height=120
    0x7ffeefbf4990: [top + 208] <- 0x229d27606969 ;  0x229d27606969 <WriteStream map = 0x229de8140689>  (input #1)
    0x7ffeefbf4988: [top + 200] <- 0x229df9102421 ;  0x229df9102421 <false>  (input #2)
    0x7ffeefbf4980: [top + 192] <- 0x229d344281b1 ;  0x229d344281b1 <String[13]\: count 168073\n>  (input #3)
    0x7ffeefbf4978: [top + 184] <- 0x229d3a6b6691 ;  0x229d3a6b6691 <String[4]: utf8>  (input #4)
    0x7ffeefbf4970: [top + 176] <- 0x229d27674301 ;  0x229d27674301 <JSBoundFunction (BoundTargetFunction 0x229d1e5c18c1)>  (input #5)
    -------------------------
    0x7ffeefbf4968: [top + 168] <- 0xc4cc38f4048 ;  caller's pc
    0x7ffeefbf4960: [top + 160] <- 0x7ffeefbf49d0 ;  caller's fp
    0x7ffeefbf4958: [top + 152] <- 0x229d34428451 ;  context    0x229d34428451 <FixedArray[8]>  (input #6)
    0x7ffeefbf4950: [top + 144] <- 0x229d4fee17c9 ;  function    0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)>  (input #0)
    0x7ffeefbf4948: [top + 136] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4940: [top + 128] <- 0x229df819cb09 ;  bytecode array 0x229df819cb09 <BytecodeArray[532]>  (input #0)
    0x7ffeefbf4938: [top + 120] <- 0x4900000000 ;  bytecode offset @ 20
    -------------------------
    0x7ffeefbf4930: [top + 112] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4928: [top + 104] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4920: [top + 96] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4918: [top + 88] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4910: [top + 80] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4908: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4900: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf48f8: [top + 56] <- 0x229d27636f29 ;  0x229d27636f29 <FixedArray[64]>  (input #14)
    0x7ffeefbf48f0: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf48e8: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
    0x7ffeefbf48e0: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #17)
    0x7ffeefbf48d8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #18)
    0x7ffeefbf48d0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #19)
    0x7ffeefbf48c8: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #20)
    0x7ffeefbf48c0: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #21)
[deoptimizing (eager): end 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)> @51 => node=20, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4998, state=TOS_REGISTER, took 8.231 ms]
[removing optimized code for: 0x229d4fee17c9 <JSFunction Socket._writeGeneric (sfi = 0x229d4feccdc1)>]
[deoptimizing (DEOPT eager): begin 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)> (opt #47) @30, FP to SP delta: 56, caller sp: 0x7ffeefbf48b0]
            ;;; deoptimize at <timers.js:159:22> inlined at <timers.js:149:3> inlined at <net.js:260:12>, wrong map
  reading input frame _unrefTimer => bytecode_offset=13, args=1, height=5; inputs:
      0: 0x229d4fee0f19 ; [fp - 16] 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)>
      1: 0x229d27606969 ; [fp + 16] 0x229d27606969 <WriteStream map = 0x229de8140689>
      2: 0x229d27636f29 ; [fp - 8] 0x229d27636f29 <FixedArray[64]>
      3: 0x229d27606969 ; [fp - 24] 0x229d27606969 <WriteStream map = 0x229de8140689>
      4: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      5: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame _unrefTimer => bytecode_offset=13, height=40
    0x7ffeefbf48a8: [top + 96] <- 0x229d27606969 ;  0x229d27606969 <WriteStream map = 0x229de8140689>  (input #1)
    -------------------------
    0x7ffeefbf48a0: [top + 88] <- 0xc4cc38f44c9 ;  caller's pc
    0x7ffeefbf4898: [top + 80] <- 0x7ffeefbf48b8 ;  caller's fp
    0x7ffeefbf4890: [top + 72] <- 0x229d27636f29 ;  context    0x229d27636f29 <FixedArray[64]>  (input #2)
    0x7ffeefbf4888: [top + 64] <- 0x229d4fee0f19 ;  function    0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)>  (input #0)
    0x7ffeefbf4880: [top + 56] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4878: [top + 48] <- 0x229df819ae71 ;  bytecode array 0x229df819ae71 <BytecodeArray[42]>  (input #0)
    0x7ffeefbf4870: [top + 40] <- 0x4200000000 ;  bytecode offset @ 13
    -------------------------
    0x7ffeefbf4868: [top + 32] <- 0x229d27606969 ;  0x229d27606969 <WriteStream map = 0x229de8140689>  (input #3)
    0x7ffeefbf4860: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #4)
    0x7ffeefbf4858: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf4850: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4848: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
[deoptimizing (eager): end 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)> @30 => node=13, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf48b0, state=TOS_REGISTER, took 4.264 ms]
[removing optimized code for: 0x229d4fee0f19 <JSFunction _unrefTimer (sfi = 0x229d4fecbb01)>]
[deoptimizing (DEOPT eager): begin 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> (opt #136) @1, FP to SP delta: 40, caller sp: 0x7ffeefbf47c0]
            ;;; deoptimize at <timers.js:159:22>, wrong map
  reading input frame insert => bytecode_offset=0, args=3, height=9; inputs:
      0: 0x229d4fea9431 ; [fp - 16] 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d27606969 ; rax 0x229d27606969 <WriteStream map = 0x229de8140689>
      3: 0x229df91023b1 ; [fp + 16] 0x229df91023b1 <true>
      4: 0x229ddc3ed099 ; [fp - 8] 0x229ddc3ed099 <FixedArray[48]>
      5: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 5) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame insert => bytecode_offset=0, height=72
    0x7ffeefbf47b8: [top + 144] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf47b0: [top + 136] <- 0x229d27606969 ;  0x229d27606969 <WriteStream map = 0x229de8140689>  (input #2)
    0x7ffeefbf47a8: [top + 128] <- 0x229df91023b1 ;  0x229df91023b1 <true>  (input #3)
    -------------------------
    0x7ffeefbf47a0: [top + 120] <- 0xc4cc38f5002 ;  caller's pc
    0x7ffeefbf4798: [top + 112] <- 0x7ffeefbf47c8 ;  caller's fp
    0x7ffeefbf4790: [top + 104] <- 0x229ddc3ed099 ;  context    0x229ddc3ed099 <FixedArray[48]>  (input #4)
    0x7ffeefbf4788: [top + 96] <- 0x229d4fea9431 ;  function    0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>  (input #0)
    0x7ffeefbf4780: [top + 88] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4778: [top + 80] <- 0x229d3a3e6921 ;  bytecode array 0x229d3a3e6921 <BytecodeArray[273]>  (input #0)
    0x7ffeefbf4770: [top + 72] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf4768: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf4760: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4758: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4750: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4748: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf4740: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf4738: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf4730: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf4728: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
[deoptimizing (eager): end 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)> @1 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf47c0, state=TOS_REGISTER, took 6.808 ms]
[removing optimized code for: 0x229d4fea9431 <JSFunction insert (sfi = 0x229d18dc43f9)>]
[deoptimizing (DEOPT eager): begin 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)> (opt #24) @31, FP to SP delta: 104, caller sp: 0x7ffeefbf4878]
            ;;; deoptimize at <_stream_writable.js:423:22>, wrong map
  reading input frame onwrite => bytecode_offset=0, args=3, height=12; inputs:
      0: 0x229d1e5c18c1 ; [fp - 16] 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229d27606969 ; [fp + 24] 0x229d27606969 <WriteStream map = 0x229de8140689>
      3: 0x229df9102311 ; [fp + 16] 0x229df9102311 <undefined>
      4: 0x229d1e5bb629 ; [fp - 8] 0x229d1e5bb629 <FixedArray[27]>
      5: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      6: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     11: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     13: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 7) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame onwrite => bytecode_offset=0, height=96
    0x7ffeefbf4870: [top + 168] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf4868: [top + 160] <- 0x229d27606969 ;  0x229d27606969 <WriteStream map = 0x229de8140689>  (input #2)
    0x7ffeefbf4860: [top + 152] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #3)
    -------------------------
    0x7ffeefbf4858: [top + 144] <- 0xc4cc3805d1b ;  caller's pc
    0x7ffeefbf4850: [top + 136] <- 0x7ffeefbf4890 ;  caller's fp
    0x7ffeefbf4848: [top + 128] <- 0x229d1e5bb629 ;  context    0x229d1e5bb629 <FixedArray[27]>  (input #4)
    0x7ffeefbf4840: [top + 120] <- 0x229d1e5c18c1 ;  function    0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)>  (input #0)
    0x7ffeefbf4838: [top + 112] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf4830: [top + 104] <- 0x229df819d7d1 ;  bytecode array 0x229df819d7d1 <BytecodeArray[157]>  (input #0)
    0x7ffeefbf4828: [top + 96] <- 0x3500000000 ;  bytecode offset @ 0
    -------------------------
    0x7ffeefbf4820: [top + 88] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #5)
    0x7ffeefbf4818: [top + 80] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf4810: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf4808: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf4800: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf47f8: [top + 48] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #10)
    0x7ffeefbf47f0: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf47e8: [top + 32] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #12)
    0x7ffeefbf47e0: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf47d8: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf47d0: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf47c8: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
[deoptimizing (eager): end 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)> @31 => node=0, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf4878, state=TOS_REGISTER, took 7.118 ms]
[removing optimized code for: 0x229d1e5c18c1 <JSFunction onwrite (sfi = 0x229d3a6effe9)>]
[deoptimizing (DEOPT soft): begin 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)> (opt #73) @15, FP to SP delta: 48, caller sp: 0x7ffeefbf5340]
            ;;; deoptimize at <internal/process/next_tick.js:285:36>, Insufficient type feedback for generic named access
  reading input frame internalNextTick => bytecode_offset=50, args=3, height=12; inputs:
      0: 0x229d4fea0231 ; [fp - 16] 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)>
      1: 0x229df9102311 ; [fp + 32] 0x229df9102311 <undefined>
      2: 0x229df9102201 ; [fp + 24] 0x229df9102201 <null>
      3: 0x229d27671189 ; [fp + 16] 0x229d27671189 <JSFunction emitCloseNT (sfi = 0x229d4fecba39)>
      4: 0x229d4fe9dcf1 ; [fp - 8] 0x229d4fe9dcf1 <FixedArray[30]>
      5: 0x229df9102311 ; (literal 3) 0x229df9102311 <undefined>
      6: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      7: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      8: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
      9: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     10: 0x229d34428fb1 ; rdx 0x229d34428fb1 <Arguments map = 0x229de8106611>
     11: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     12: 0x229d4fe9eaf1 ; (literal 15) 0x229d4fe9eaf1 <Object map = 0x229de8124c79>
     13: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     14: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     15: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
     16: 0x229df91025a9 ; (literal 4) 0x229df91025a9 <Odd Oddball: optimized_out>
  translating interpreted frame internalNextTick => bytecode_offset=50, height=96
    0x7ffeefbf5338: [top + 168] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #1)
    0x7ffeefbf5330: [top + 160] <- 0x229df9102201 ;  0x229df9102201 <null>  (input #2)
    0x7ffeefbf5328: [top + 152] <- 0x229d27671189 ;  0x229d27671189 <JSFunction emitCloseNT (sfi = 0x229d4fecba39)>  (input #3)
    -------------------------
    0x7ffeefbf5320: [top + 144] <- 0xc4cc3805d1b ;  caller's pc
    0x7ffeefbf5318: [top + 136] <- 0x7ffeefbf5358 ;  caller's fp
    0x7ffeefbf5310: [top + 128] <- 0x229d4fe9dcf1 ;  context    0x229d4fe9dcf1 <FixedArray[30]>  (input #4)
    0x7ffeefbf5308: [top + 120] <- 0x229d4fea0231 ;  function    0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)>  (input #0)
    0x7ffeefbf5300: [top + 112] <- 0x229df9102311 ;  new_target  0x229df9102311 <undefined>  (input #0)
    0x7ffeefbf52f8: [top + 104] <- 0x229d3a3df1d1 ;  bytecode array 0x229d3a3df1d1 <BytecodeArray[410]>  (input #0)
    0x7ffeefbf52f0: [top + 96] <- 0x6700000000 ;  bytecode offset @ 50
    -------------------------
    0x7ffeefbf52e8: [top + 88] <- 0x229df9102311 ;  0x229df9102311 <undefined>  (input #5)
    0x7ffeefbf52e0: [top + 80] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #6)
    0x7ffeefbf52d8: [top + 72] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #7)
    0x7ffeefbf52d0: [top + 64] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #8)
    0x7ffeefbf52c8: [top + 56] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #9)
    0x7ffeefbf52c0: [top + 48] <- 0x229d34428fb1 ;  0x229d34428fb1 <Arguments map = 0x229de8106611>  (input #10)
    0x7ffeefbf52b8: [top + 40] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #11)
    0x7ffeefbf52b0: [top + 32] <- 0x229d4fe9eaf1 ;  0x229d4fe9eaf1 <Object map = 0x229de8124c79>  (input #12)
    0x7ffeefbf52a8: [top + 24] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #13)
    0x7ffeefbf52a0: [top + 16] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #14)
    0x7ffeefbf5298: [top + 8] <- 0x229df91025a9 ;  0x229df91025a9 <Odd Oddball: optimized_out>  (input #15)
    0x7ffeefbf5290: [top + 0] <- 0x229df91025a9 ;  accumulator 0x229df91025a9 <Odd Oddball: optimized_out>  (input #16)
[deoptimizing (soft): end 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)> @15 => node=50, pc=0xc4cc38c02c0, caller sp=0x7ffeefbf5340, state=TOS_REGISTER, took 6.974 ms]
[removing optimized code for: 0x229d4fea0231 <JSFunction internalNextTick (sfi = 0x229d18daaf81)>]
